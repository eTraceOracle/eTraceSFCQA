'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace eTraceOTOService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="eTraceOTOServiceSoap", [Namespace]:="http://eTraceOTOService.org/")>  _
    Partial Public Class eTraceOTOService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetManualPlacementUnitByDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ManualPlacementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaterialInfoReadByCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShowMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobHeaderByProdLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCompHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetComploadStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetComploadStatusByCompIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStatusByProductLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConsumedQtyOfCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMiStationInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckIntSN_LoadStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIntSNInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTrayInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Tray_BatchInput_ChangeJobIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Valid_Save_BatchInput_ChangeJobIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnloadIntSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobHeaderByDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsAuthMatchingFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BoardsOnPCBByProcOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrgListsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoginWayOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccessCardUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrinterCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIP121DepanellingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFeederOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFeederInfoByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TEGetPartDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAegisDataByDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAegisDataToTempTableByDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAegisDataToTempTableByDateSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAegisDataFromTempTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAegisDataToTempTableByDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAegisDataToTempTableBySNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConfigValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateConfigValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWipHeaderByIntSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyDataByIntSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPout121_SMTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SplIDGenerationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SplReadByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintSPLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProcessByTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TrayIDSwopOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PCBListReadByTrayIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MIPreLoadReadByWIPIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MILoadByTrayOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessedQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private JobItemQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWIPFlowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWIPTDHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIP121PVI_SiplaceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPanelIDOrPCBIDforSealingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPanelIDOrPCBIDForUnsealingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPanelIDOrPCBIDForExtensionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PCBFloorLifeExtensionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PCBSealingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PCBUnsealingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMTPanelInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsAuthorizedPCBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateKanbanLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private JobReadByProdLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StructureReadByPCBAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FamilyPCBAListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChildISNIsValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckChildISNIsValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MaterialInfoReadByCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIP121MatchingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CLIDCurrentQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PanelIDIsValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductLineInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PCBListReadByPanelIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CompReadOnMSLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIP121PVIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDualFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIP121PVI_AOISPI1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIP121MIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PanelIDSwopOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MIJobReadByEquOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MIMatLoadListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MIMatPendingListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MICompInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MIPCBAInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MILoadAndUnloadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPanelPCBAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ErrorLoggingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ErrorLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckJobStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetComponentHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDJInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWIPHeaderInfoByDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEquipmentsbyLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEquipmentsbyCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllEquipmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobHeadersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobHeaders_CPLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetupDJHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateJobStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobItems_CPLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMSLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveMSLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveMSLforFFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckMSLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckMSL_ForProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProdLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductStructureByModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductStructureByPCBAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductStructureByModelAndPCBAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMSLbyCircuitCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveMSLItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateJobQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSABatchInputOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckJobQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobItems_AIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobHeaders_AIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobHeaders_SMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private JobReadByEqtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AICompLoadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPout121OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GeneratedSEQListByEqtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRemainCompCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SequenceGenerationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintSEQsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintSEQOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStationByEqtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CompLoadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMessageListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrevStationReadByProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PublishPropertysOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SMTCompTraceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SMTCompTraceV2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPCBTraceByCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePCBTraceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllTBACLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPdtStureByChildItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PCBTraceReadByPCBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFixscanByPdLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.eTrace_SFCFunction_.My.MySettings.Default.eTrace_SFCFunction__eTraceOTOService_eTraceOTOService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetManualPlacementUnitByDJCompleted As GetManualPlacementUnitByDJCompletedEventHandler
        
        '''<remarks/>
        Public Event ManualPlacementCompleted As ManualPlacementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaterialInfoReadByCLIDCompleted As GetMaterialInfoReadByCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event ShowMessageCompleted As ShowMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobHeaderByProdLineCompleted As GetJobHeaderByProdLineCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCompHeaderCompleted As UpdateCompHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetComploadStatusCompleted As GetComploadStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetComploadStatusByCompIDCompleted As GetComploadStatusByCompIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStatusByProductLineCompleted As GetStatusByProductLineCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConsumedQtyOfCLIDCompleted As GetConsumedQtyOfCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMiStationInfoCompleted As GetMiStationInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIntSN_LoadStatusCompleted As CheckIntSN_LoadStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIntSNInfoCompleted As GetIntSNInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTrayInfoCompleted As GetTrayInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event Tray_BatchInput_ChangeJobIDCompleted As Tray_BatchInput_ChangeJobIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Valid_Save_BatchInput_ChangeJobIDCompleted As Valid_Save_BatchInput_ChangeJobIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UnloadIntSNCompleted As UnloadIntSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobHeaderByDJCompleted As GetJobHeaderByDJCompletedEventHandler
        
        '''<remarks/>
        Public Event IsAuthMatchingFileCompleted As IsAuthMatchingFileCompletedEventHandler
        
        '''<remarks/>
        Public Event BoardsOnPCBByProcCompleted As BoardsOnPCBByProcCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrgListsCompleted As GetOrgListsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoginWayCompleted As GetLoginWayCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserInfoCompleted As GetUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccessCardUserInfoCompleted As GetAccessCardUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysMessageCompleted As GetSysMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event PrinterCheckCompleted As PrinterCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event WIP121DepanellingCompleted As WIP121DepanellingCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFeederCompleted As UpdateFeederCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFeederInfoByIDCompleted As GetFeederInfoByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event TEGetPartDataCompleted As TEGetPartDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAegisDataByDateCompleted As GetAegisDataByDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAegisDataToTempTableByDateCompleted As GetAegisDataToTempTableByDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAegisDataToTempTableByDateSNCompleted As GetAegisDataToTempTableByDateSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAegisDataFromTempTableCompleted As GetAegisDataFromTempTableCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAegisDataToTempTableByDJCompleted As GetAegisDataToTempTableByDJCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAegisDataToTempTableBySNCompleted As GetAegisDataToTempTableBySNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConfigValueCompleted As GetConfigValueCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateConfigValueCompleted As UpdateConfigValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWipHeaderByIntSNCompleted As GetWipHeaderByIntSNCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyDataByIntSNCompleted As CopyDataByIntSNCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPout121_SMTCompleted As WIPout121_SMTCompletedEventHandler
        
        '''<remarks/>
        Public Event SplIDGenerationCompleted As SplIDGenerationCompletedEventHandler
        
        '''<remarks/>
        Public Event SplReadByIDCompleted As SplReadByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintSPLCompleted As PrintSPLCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProcessByTypeCompleted As GetProcessByTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event TrayIDSwopCompleted As TrayIDSwopCompletedEventHandler
        
        '''<remarks/>
        Public Event PCBListReadByTrayIDCompleted As PCBListReadByTrayIDCompletedEventHandler
        
        '''<remarks/>
        Public Event MIPreLoadReadByWIPIDCompleted As MIPreLoadReadByWIPIDCompletedEventHandler
        
        '''<remarks/>
        Public Event MILoadByTrayCompleted As MILoadByTrayCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessedQtyCompleted As ProcessedQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event JobItemQtyCompleted As JobItemQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWIPFlowCompleted As GetWIPFlowCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWIPTDHeaderCompleted As GetWIPTDHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event WIP121PVI_SiplaceCompleted As WIP121PVI_SiplaceCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPanelIDOrPCBIDforSealingCompleted As CheckPanelIDOrPCBIDforSealingCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPanelIDOrPCBIDForUnsealingCompleted As CheckPanelIDOrPCBIDForUnsealingCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPanelIDOrPCBIDForExtensionCompleted As CheckPanelIDOrPCBIDForExtensionCompletedEventHandler
        
        '''<remarks/>
        Public Event PCBFloorLifeExtensionCompleted As PCBFloorLifeExtensionCompletedEventHandler
        
        '''<remarks/>
        Public Event PCBSealingCompleted As PCBSealingCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveFileCompleted As SaveFileCompletedEventHandler
        
        '''<remarks/>
        Public Event PCBUnsealingCompleted As PCBUnsealingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMTPanelInfoCompleted As GetSMTPanelInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event IsAuthorizedPCBCompleted As IsAuthorizedPCBCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateKanbanLabelCompleted As UpdateKanbanLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event JobReadByProdLineCompleted As JobReadByProdLineCompletedEventHandler
        
        '''<remarks/>
        Public Event StructureReadByPCBACompleted As StructureReadByPCBACompletedEventHandler
        
        '''<remarks/>
        Public Event FamilyPCBAListCompleted As FamilyPCBAListCompletedEventHandler
        
        '''<remarks/>
        Public Event ChildISNIsValidCompleted As ChildISNIsValidCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckChildISNIsValidCompleted As CheckChildISNIsValidCompletedEventHandler
        
        '''<remarks/>
        Public Event MaterialInfoReadByCLIDCompleted As MaterialInfoReadByCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event WIP121MatchingCompleted As WIP121MatchingCompletedEventHandler
        
        '''<remarks/>
        Public Event CLIDCurrentQtyCompleted As CLIDCurrentQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event PanelIDIsValidCompleted As PanelIDIsValidCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductLineInfoCompleted As GetProductLineInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event PCBListReadByPanelIDCompleted As PCBListReadByPanelIDCompletedEventHandler
        
        '''<remarks/>
        Public Event CompReadOnMSLCompleted As CompReadOnMSLCompletedEventHandler
        
        '''<remarks/>
        Public Event WIP121PVICompleted As WIP121PVICompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDualFlagCompleted As UpdateDualFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event WIP121PVI_AOISPI1Completed As WIP121PVI_AOISPI1CompletedEventHandler
        
        '''<remarks/>
        Public Event WIP121MICompleted As WIP121MICompletedEventHandler
        
        '''<remarks/>
        Public Event PanelIDSwopCompleted As PanelIDSwopCompletedEventHandler
        
        '''<remarks/>
        Public Event MIJobReadByEquCompleted As MIJobReadByEquCompletedEventHandler
        
        '''<remarks/>
        Public Event MIMatLoadListCompleted As MIMatLoadListCompletedEventHandler
        
        '''<remarks/>
        Public Event MIMatPendingListCompleted As MIMatPendingListCompletedEventHandler
        
        '''<remarks/>
        Public Event MICompInfoCompleted As MICompInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event MIPCBAInfoCompleted As MIPCBAInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event MILoadAndUnloadCompleted As MILoadAndUnloadCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPanelPCBACompleted As GetPanelPCBACompletedEventHandler
        
        '''<remarks/>
        Public Event ErrorLoggingCompleted As ErrorLoggingCompletedEventHandler
        
        '''<remarks/>
        Public Event ErrorLogCompleted As ErrorLogCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckJobStatusCompleted As CheckJobStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetComponentHeaderCompleted As GetComponentHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDJInfoCompleted As GetDJInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWIPHeaderInfoByDJCompleted As GetWIPHeaderInfoByDJCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEquipmentCompleted As GetEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEquipmentsbyLineCompleted As GetEquipmentsbyLineCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEquipmentsbyCategoryCompleted As GetEquipmentsbyCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllEquipmentsCompleted As GetAllEquipmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStationsCompleted As GetStationsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobHeadersCompleted As GetJobHeadersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobHeaders_CPLineCompleted As GetJobHeaders_CPLineCompletedEventHandler
        
        '''<remarks/>
        Public Event SetupDJHeaderCompleted As SetupDJHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateJobStatusCompleted As UpdateJobStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobItemsCompleted As GetJobItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobItems_CPLineCompleted As GetJobItems_CPLineCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEquipmentCompleted As UpdateEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckEquipmentCompleted As CheckEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMSLCompleted As GetMSLCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveMSLCompleted As SaveMSLCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveMSLforFFCompleted As SaveMSLforFFCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckMSLCompleted As CheckMSLCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckMSL_ForProcessCompleted As CheckMSL_ForProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProdLineCompleted As GetProdLineCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductStructureByModelCompleted As GetProductStructureByModelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductStructureByPCBACompleted As GetProductStructureByPCBACompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductStructureByModelAndPCBACompleted As GetProductStructureByModelAndPCBACompletedEventHandler
        
        '''<remarks/>
        Public Event GetMSLbyCircuitCodeCompleted As GetMSLbyCircuitCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveMSLItemCompleted As SaveMSLItemCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateJobQtyCompleted As UpdateJobQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSABatchInputCompleted As GetSABatchInputCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckJobQtyCompleted As CheckJobQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobItems_AICompleted As GetJobItems_AICompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobHeaders_AICompleted As GetJobHeaders_AICompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobHeaders_SMCompleted As GetJobHeaders_SMCompletedEventHandler
        
        '''<remarks/>
        Public Event JobReadByEqtCompleted As JobReadByEqtCompletedEventHandler
        
        '''<remarks/>
        Public Event AICompLoadCompleted As AICompLoadCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPout121Completed As WIPout121CompletedEventHandler
        
        '''<remarks/>
        Public Event GeneratedSEQListByEqtCompleted As GeneratedSEQListByEqtCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRemainCompCountCompleted As GetRemainCompCountCompletedEventHandler
        
        '''<remarks/>
        Public Event SequenceGenerationCompleted As SequenceGenerationCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintSEQsCompleted As PrintSEQsCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintSEQCompleted As PrintSEQCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStationByEqtCompleted As GetStationByEqtCompletedEventHandler
        
        '''<remarks/>
        Public Event CompLoadCompleted As CompLoadCompletedEventHandler
        
        '''<remarks/>
        Public Event getMessageListCompleted As getMessageListCompletedEventHandler
        
        '''<remarks/>
        Public Event PrevStationReadByProcessCompleted As PrevStationReadByProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event PublishPropertysCompleted As PublishPropertysCompletedEventHandler
        
        '''<remarks/>
        Public Event SMTCompTraceCompleted As SMTCompTraceCompletedEventHandler
        
        '''<remarks/>
        Public Event SMTCompTraceV2Completed As SMTCompTraceV2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPCBTraceByCLIDCompleted As GetPCBTraceByCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePCBTraceCompleted As UpdatePCBTraceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllTBACLIDCompleted As GetAllTBACLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPdtStureByChildItemCompleted As GetPdtStureByChildItemCompletedEventHandler
        
        '''<remarks/>
        Public Event PCBTraceReadByPCBCompleted As PCBTraceReadByPCBCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFixscanByPdLineCompleted As GetFixscanByPdLineCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetManualPlacementUnitByDJ", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetManualPlacementUnitByDJ(ByVal DJ As String, ByVal getAll As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetManualPlacementUnitByDJ", New Object() {DJ, getAll})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetManualPlacementUnitByDJAsync(ByVal DJ As String, ByVal getAll As Boolean)
            Me.GetManualPlacementUnitByDJAsync(DJ, getAll, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetManualPlacementUnitByDJAsync(ByVal DJ As String, ByVal getAll As Boolean, ByVal userState As Object)
            If (Me.GetManualPlacementUnitByDJOperationCompleted Is Nothing) Then
                Me.GetManualPlacementUnitByDJOperationCompleted = AddressOf Me.OnGetManualPlacementUnitByDJOperationCompleted
            End If
            Me.InvokeAsync("GetManualPlacementUnitByDJ", New Object() {DJ, getAll}, Me.GetManualPlacementUnitByDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetManualPlacementUnitByDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetManualPlacementUnitByDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetManualPlacementUnitByDJCompleted(Me, New GetManualPlacementUnitByDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/ManualPlacement", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ManualPlacement(ByVal CircuitCodeList As System.Data.DataSet, ByVal IntSN As String, ByVal UserID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ManualPlacement", New Object() {CircuitCodeList, IntSN, UserID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ManualPlacementAsync(ByVal CircuitCodeList As System.Data.DataSet, ByVal IntSN As String, ByVal UserID As String)
            Me.ManualPlacementAsync(CircuitCodeList, IntSN, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ManualPlacementAsync(ByVal CircuitCodeList As System.Data.DataSet, ByVal IntSN As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.ManualPlacementOperationCompleted Is Nothing) Then
                Me.ManualPlacementOperationCompleted = AddressOf Me.OnManualPlacementOperationCompleted
            End If
            Me.InvokeAsync("ManualPlacement", New Object() {CircuitCodeList, IntSN, UserID}, Me.ManualPlacementOperationCompleted, userState)
        End Sub
        
        Private Sub OnManualPlacementOperationCompleted(ByVal arg As Object)
            If (Not (Me.ManualPlacementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ManualPlacementCompleted(Me, New ManualPlacementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetMaterialInfoReadByCLID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaterialInfoReadByCLID(ByVal clid As String, ByVal jobID As String, ByVal pcba As String, ByVal process As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMaterialInfoReadByCLID", New Object() {clid, jobID, pcba, process})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaterialInfoReadByCLIDAsync(ByVal clid As String, ByVal jobID As String, ByVal pcba As String, ByVal process As String)
            Me.GetMaterialInfoReadByCLIDAsync(clid, jobID, pcba, process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaterialInfoReadByCLIDAsync(ByVal clid As String, ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal userState As Object)
            If (Me.GetMaterialInfoReadByCLIDOperationCompleted Is Nothing) Then
                Me.GetMaterialInfoReadByCLIDOperationCompleted = AddressOf Me.OnGetMaterialInfoReadByCLIDOperationCompleted
            End If
            Me.InvokeAsync("GetMaterialInfoReadByCLID", New Object() {clid, jobID, pcba, process}, Me.GetMaterialInfoReadByCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaterialInfoReadByCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaterialInfoReadByCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaterialInfoReadByCLIDCompleted(Me, New GetMaterialInfoReadByCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/ShowMessage", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShowMessage(ByVal MessageText As String) As String
            Dim results() As Object = Me.Invoke("ShowMessage", New Object() {MessageText})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShowMessageAsync(ByVal MessageText As String)
            Me.ShowMessageAsync(MessageText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShowMessageAsync(ByVal MessageText As String, ByVal userState As Object)
            If (Me.ShowMessageOperationCompleted Is Nothing) Then
                Me.ShowMessageOperationCompleted = AddressOf Me.OnShowMessageOperationCompleted
            End If
            Me.InvokeAsync("ShowMessage", New Object() {MessageText}, Me.ShowMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnShowMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShowMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShowMessageCompleted(Me, New ShowMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetJobHeaderByProdLine", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobHeaderByProdLine(ByVal prodLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobHeaderByProdLine", New Object() {prodLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaderByProdLineAsync(ByVal prodLine As String)
            Me.GetJobHeaderByProdLineAsync(prodLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaderByProdLineAsync(ByVal prodLine As String, ByVal userState As Object)
            If (Me.GetJobHeaderByProdLineOperationCompleted Is Nothing) Then
                Me.GetJobHeaderByProdLineOperationCompleted = AddressOf Me.OnGetJobHeaderByProdLineOperationCompleted
            End If
            Me.InvokeAsync("GetJobHeaderByProdLine", New Object() {prodLine}, Me.GetJobHeaderByProdLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobHeaderByProdLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobHeaderByProdLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobHeaderByProdLineCompleted(Me, New GetJobHeaderByProdLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/UpdateCompHeader", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCompHeader(ByVal ds As System.Data.DataSet, ByVal list() As String) As String
            Dim results() As Object = Me.Invoke("UpdateCompHeader", New Object() {ds, list})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCompHeaderAsync(ByVal ds As System.Data.DataSet, ByVal list() As String)
            Me.UpdateCompHeaderAsync(ds, list, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCompHeaderAsync(ByVal ds As System.Data.DataSet, ByVal list() As String, ByVal userState As Object)
            If (Me.UpdateCompHeaderOperationCompleted Is Nothing) Then
                Me.UpdateCompHeaderOperationCompleted = AddressOf Me.OnUpdateCompHeaderOperationCompleted
            End If
            Me.InvokeAsync("UpdateCompHeader", New Object() {ds, list}, Me.UpdateCompHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCompHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCompHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCompHeaderCompleted(Me, New UpdateCompHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetComploadStatus", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetComploadStatus(ByVal jobID As String, ByVal pcba As String, ByVal process As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetComploadStatus", New Object() {jobID, pcba, process})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetComploadStatusAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String)
            Me.GetComploadStatusAsync(jobID, pcba, process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetComploadStatusAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal userState As Object)
            If (Me.GetComploadStatusOperationCompleted Is Nothing) Then
                Me.GetComploadStatusOperationCompleted = AddressOf Me.OnGetComploadStatusOperationCompleted
            End If
            Me.InvokeAsync("GetComploadStatus", New Object() {jobID, pcba, process}, Me.GetComploadStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetComploadStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetComploadStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetComploadStatusCompleted(Me, New GetComploadStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetComploadStatusByCompID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetComploadStatusByCompID(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal compID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetComploadStatusByCompID", New Object() {jobID, pcba, process, compID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetComploadStatusByCompIDAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal compID As String)
            Me.GetComploadStatusByCompIDAsync(jobID, pcba, process, compID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetComploadStatusByCompIDAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal compID As String, ByVal userState As Object)
            If (Me.GetComploadStatusByCompIDOperationCompleted Is Nothing) Then
                Me.GetComploadStatusByCompIDOperationCompleted = AddressOf Me.OnGetComploadStatusByCompIDOperationCompleted
            End If
            Me.InvokeAsync("GetComploadStatusByCompID", New Object() {jobID, pcba, process, compID}, Me.GetComploadStatusByCompIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetComploadStatusByCompIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetComploadStatusByCompIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetComploadStatusByCompIDCompleted(Me, New GetComploadStatusByCompIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetStatusByProductLine", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStatusByProductLine(ByVal prodLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStatusByProductLine", New Object() {prodLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStatusByProductLineAsync(ByVal prodLine As String)
            Me.GetStatusByProductLineAsync(prodLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStatusByProductLineAsync(ByVal prodLine As String, ByVal userState As Object)
            If (Me.GetStatusByProductLineOperationCompleted Is Nothing) Then
                Me.GetStatusByProductLineOperationCompleted = AddressOf Me.OnGetStatusByProductLineOperationCompleted
            End If
            Me.InvokeAsync("GetStatusByProductLine", New Object() {prodLine}, Me.GetStatusByProductLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStatusByProductLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStatusByProductLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStatusByProductLineCompleted(Me, New GetStatusByProductLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetConsumedQtyOfCLID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConsumedQtyOfCLID(ByVal CLID As String) As Decimal
            Dim results() As Object = Me.Invoke("GetConsumedQtyOfCLID", New Object() {CLID})
            Return CType(results(0),Decimal)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConsumedQtyOfCLIDAsync(ByVal CLID As String)
            Me.GetConsumedQtyOfCLIDAsync(CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConsumedQtyOfCLIDAsync(ByVal CLID As String, ByVal userState As Object)
            If (Me.GetConsumedQtyOfCLIDOperationCompleted Is Nothing) Then
                Me.GetConsumedQtyOfCLIDOperationCompleted = AddressOf Me.OnGetConsumedQtyOfCLIDOperationCompleted
            End If
            Me.InvokeAsync("GetConsumedQtyOfCLID", New Object() {CLID}, Me.GetConsumedQtyOfCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConsumedQtyOfCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConsumedQtyOfCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConsumedQtyOfCLIDCompleted(Me, New GetConsumedQtyOfCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetMiStationInfo", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMiStationInfo(ByVal MiStation As String) As Sa_Rst
            Dim results() As Object = Me.Invoke("GetMiStationInfo", New Object() {MiStation})
            Return CType(results(0),Sa_Rst)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMiStationInfoAsync(ByVal MiStation As String)
            Me.GetMiStationInfoAsync(MiStation, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMiStationInfoAsync(ByVal MiStation As String, ByVal userState As Object)
            If (Me.GetMiStationInfoOperationCompleted Is Nothing) Then
                Me.GetMiStationInfoOperationCompleted = AddressOf Me.OnGetMiStationInfoOperationCompleted
            End If
            Me.InvokeAsync("GetMiStationInfo", New Object() {MiStation}, Me.GetMiStationInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMiStationInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMiStationInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMiStationInfoCompleted(Me, New GetMiStationInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CheckIntSN_LoadStatus", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIntSN_LoadStatus(ByVal IntSN As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal dsSA As System.Data.DataSet, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("CheckIntSN_LoadStatus", New Object() {IntSN, JobID, PCBA, Process, dsSA, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIntSN_LoadStatusAsync(ByVal IntSN As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal dsSA As System.Data.DataSet, ByVal User As String)
            Me.CheckIntSN_LoadStatusAsync(IntSN, JobID, PCBA, Process, dsSA, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIntSN_LoadStatusAsync(ByVal IntSN As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal dsSA As System.Data.DataSet, ByVal User As String, ByVal userState As Object)
            If (Me.CheckIntSN_LoadStatusOperationCompleted Is Nothing) Then
                Me.CheckIntSN_LoadStatusOperationCompleted = AddressOf Me.OnCheckIntSN_LoadStatusOperationCompleted
            End If
            Me.InvokeAsync("CheckIntSN_LoadStatus", New Object() {IntSN, JobID, PCBA, Process, dsSA, User}, Me.CheckIntSN_LoadStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIntSN_LoadStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIntSN_LoadStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIntSN_LoadStatusCompleted(Me, New CheckIntSN_LoadStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetIntSNInfo", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIntSNInfo(ByVal IntSN As String) As IntSNInform
            Dim results() As Object = Me.Invoke("GetIntSNInfo", New Object() {IntSN})
            Return CType(results(0),IntSNInform)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIntSNInfoAsync(ByVal IntSN As String)
            Me.GetIntSNInfoAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIntSNInfoAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.GetIntSNInfoOperationCompleted Is Nothing) Then
                Me.GetIntSNInfoOperationCompleted = AddressOf Me.OnGetIntSNInfoOperationCompleted
            End If
            Me.InvokeAsync("GetIntSNInfo", New Object() {IntSN}, Me.GetIntSNInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIntSNInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIntSNInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIntSNInfoCompleted(Me, New GetIntSNInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetTrayInfo", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTrayInfo(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTrayInfo", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTrayInfoAsync(ByVal IntSN As String)
            Me.GetTrayInfoAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTrayInfoAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.GetTrayInfoOperationCompleted Is Nothing) Then
                Me.GetTrayInfoOperationCompleted = AddressOf Me.OnGetTrayInfoOperationCompleted
            End If
            Me.InvokeAsync("GetTrayInfo", New Object() {IntSN}, Me.GetTrayInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTrayInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTrayInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTrayInfoCompleted(Me, New GetTrayInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/Tray_BatchInput_ChangeJobID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Tray_BatchInput_ChangeJobID(ByVal ChangeJobID As String, ByVal IntSN As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal dsSA As System.Data.DataSet, ByVal User As String) As TrayPost_Rst
            Dim results() As Object = Me.Invoke("Tray_BatchInput_ChangeJobID", New Object() {ChangeJobID, IntSN, JobID, PCBA, Process, dsSA, User})
            Return CType(results(0),TrayPost_Rst)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Tray_BatchInput_ChangeJobIDAsync(ByVal ChangeJobID As String, ByVal IntSN As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal dsSA As System.Data.DataSet, ByVal User As String)
            Me.Tray_BatchInput_ChangeJobIDAsync(ChangeJobID, IntSN, JobID, PCBA, Process, dsSA, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Tray_BatchInput_ChangeJobIDAsync(ByVal ChangeJobID As String, ByVal IntSN As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal dsSA As System.Data.DataSet, ByVal User As String, ByVal userState As Object)
            If (Me.Tray_BatchInput_ChangeJobIDOperationCompleted Is Nothing) Then
                Me.Tray_BatchInput_ChangeJobIDOperationCompleted = AddressOf Me.OnTray_BatchInput_ChangeJobIDOperationCompleted
            End If
            Me.InvokeAsync("Tray_BatchInput_ChangeJobID", New Object() {ChangeJobID, IntSN, JobID, PCBA, Process, dsSA, User}, Me.Tray_BatchInput_ChangeJobIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnTray_BatchInput_ChangeJobIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Tray_BatchInput_ChangeJobIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Tray_BatchInput_ChangeJobIDCompleted(Me, New Tray_BatchInput_ChangeJobIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/Valid_Save_BatchInput_ChangeJobID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Valid_Save_BatchInput_ChangeJobID(ByVal ChangeJobID As String, ByVal IntSN As String, ByVal WIPID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal ChildSA As String, ByVal dsSA As System.Data.DataSet, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("Valid_Save_BatchInput_ChangeJobID", New Object() {ChangeJobID, IntSN, WIPID, JobID, PCBA, Process, ChildSA, dsSA, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Valid_Save_BatchInput_ChangeJobIDAsync(ByVal ChangeJobID As String, ByVal IntSN As String, ByVal WIPID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal ChildSA As String, ByVal dsSA As System.Data.DataSet, ByVal User As String)
            Me.Valid_Save_BatchInput_ChangeJobIDAsync(ChangeJobID, IntSN, WIPID, JobID, PCBA, Process, ChildSA, dsSA, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Valid_Save_BatchInput_ChangeJobIDAsync(ByVal ChangeJobID As String, ByVal IntSN As String, ByVal WIPID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal ChildSA As String, ByVal dsSA As System.Data.DataSet, ByVal User As String, ByVal userState As Object)
            If (Me.Valid_Save_BatchInput_ChangeJobIDOperationCompleted Is Nothing) Then
                Me.Valid_Save_BatchInput_ChangeJobIDOperationCompleted = AddressOf Me.OnValid_Save_BatchInput_ChangeJobIDOperationCompleted
            End If
            Me.InvokeAsync("Valid_Save_BatchInput_ChangeJobID", New Object() {ChangeJobID, IntSN, WIPID, JobID, PCBA, Process, ChildSA, dsSA, User}, Me.Valid_Save_BatchInput_ChangeJobIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnValid_Save_BatchInput_ChangeJobIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Valid_Save_BatchInput_ChangeJobIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Valid_Save_BatchInput_ChangeJobIDCompleted(Me, New Valid_Save_BatchInput_ChangeJobIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/UnloadIntSN", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnloadIntSN(ByVal ChildSAWIPID As String, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("UnloadIntSN", New Object() {ChildSAWIPID, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnloadIntSNAsync(ByVal ChildSAWIPID As String, ByVal User As String)
            Me.UnloadIntSNAsync(ChildSAWIPID, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnloadIntSNAsync(ByVal ChildSAWIPID As String, ByVal User As String, ByVal userState As Object)
            If (Me.UnloadIntSNOperationCompleted Is Nothing) Then
                Me.UnloadIntSNOperationCompleted = AddressOf Me.OnUnloadIntSNOperationCompleted
            End If
            Me.InvokeAsync("UnloadIntSN", New Object() {ChildSAWIPID, User}, Me.UnloadIntSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnloadIntSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnloadIntSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnloadIntSNCompleted(Me, New UnloadIntSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetJobHeaderByDJ", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobHeaderByDJ(ByVal prodLine As String, ByVal lineType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobHeaderByDJ", New Object() {prodLine, lineType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaderByDJAsync(ByVal prodLine As String, ByVal lineType As String)
            Me.GetJobHeaderByDJAsync(prodLine, lineType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaderByDJAsync(ByVal prodLine As String, ByVal lineType As String, ByVal userState As Object)
            If (Me.GetJobHeaderByDJOperationCompleted Is Nothing) Then
                Me.GetJobHeaderByDJOperationCompleted = AddressOf Me.OnGetJobHeaderByDJOperationCompleted
            End If
            Me.InvokeAsync("GetJobHeaderByDJ", New Object() {prodLine, lineType}, Me.GetJobHeaderByDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobHeaderByDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobHeaderByDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobHeaderByDJCompleted(Me, New GetJobHeaderByDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/IsAuthMatchingFile", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsAuthMatchingFile(ByVal ds As System.Data.DataSet, ByVal orgCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("IsAuthMatchingFile", New Object() {ds, orgCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsAuthMatchingFileAsync(ByVal ds As System.Data.DataSet, ByVal orgCode As String)
            Me.IsAuthMatchingFileAsync(ds, orgCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsAuthMatchingFileAsync(ByVal ds As System.Data.DataSet, ByVal orgCode As String, ByVal userState As Object)
            If (Me.IsAuthMatchingFileOperationCompleted Is Nothing) Then
                Me.IsAuthMatchingFileOperationCompleted = AddressOf Me.OnIsAuthMatchingFileOperationCompleted
            End If
            Me.InvokeAsync("IsAuthMatchingFile", New Object() {ds, orgCode}, Me.IsAuthMatchingFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsAuthMatchingFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsAuthMatchingFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsAuthMatchingFileCompleted(Me, New IsAuthMatchingFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/BoardsOnPCBByProc", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BoardsOnPCBByProc(ByVal Model As String, ByVal PCBA As String, ByVal Proc As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("BoardsOnPCBByProc", New Object() {Model, PCBA, Proc})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BoardsOnPCBByProcAsync(ByVal Model As String, ByVal PCBA As String, ByVal Proc As String)
            Me.BoardsOnPCBByProcAsync(Model, PCBA, Proc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BoardsOnPCBByProcAsync(ByVal Model As String, ByVal PCBA As String, ByVal Proc As String, ByVal userState As Object)
            If (Me.BoardsOnPCBByProcOperationCompleted Is Nothing) Then
                Me.BoardsOnPCBByProcOperationCompleted = AddressOf Me.OnBoardsOnPCBByProcOperationCompleted
            End If
            Me.InvokeAsync("BoardsOnPCBByProc", New Object() {Model, PCBA, Proc}, Me.BoardsOnPCBByProcOperationCompleted, userState)
        End Sub
        
        Private Sub OnBoardsOnPCBByProcOperationCompleted(ByVal arg As Object)
            If (Not (Me.BoardsOnPCBByProcCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BoardsOnPCBByProcCompleted(Me, New BoardsOnPCBByProcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetOrgLists", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrgLists(ByVal eTraceModule As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOrgLists", New Object() {eTraceModule})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrgListsAsync(ByVal eTraceModule As String)
            Me.GetOrgListsAsync(eTraceModule, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrgListsAsync(ByVal eTraceModule As String, ByVal userState As Object)
            If (Me.GetOrgListsOperationCompleted Is Nothing) Then
                Me.GetOrgListsOperationCompleted = AddressOf Me.OnGetOrgListsOperationCompleted
            End If
            Me.InvokeAsync("GetOrgLists", New Object() {eTraceModule}, Me.GetOrgListsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrgListsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrgListsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrgListsCompleted(Me, New GetOrgListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetLoginWay", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoginWay(ByVal eTraceModule As String) As Integer
            Dim results() As Object = Me.Invoke("GetLoginWay", New Object() {eTraceModule})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoginWayAsync(ByVal eTraceModule As String)
            Me.GetLoginWayAsync(eTraceModule, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoginWayAsync(ByVal eTraceModule As String, ByVal userState As Object)
            If (Me.GetLoginWayOperationCompleted Is Nothing) Then
                Me.GetLoginWayOperationCompleted = AddressOf Me.OnGetLoginWayOperationCompleted
            End If
            Me.InvokeAsync("GetLoginWay", New Object() {eTraceModule}, Me.GetLoginWayOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoginWayOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoginWayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoginWayCompleted(Me, New GetLoginWayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetUserInfo", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserInfo(ByVal Uname As String, ByVal UPwd As String, ByVal InvOrg As String) As AccessCard
            Dim results() As Object = Me.Invoke("GetUserInfo", New Object() {Uname, UPwd, InvOrg})
            Return CType(results(0),AccessCard)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoAsync(ByVal Uname As String, ByVal UPwd As String, ByVal InvOrg As String)
            Me.GetUserInfoAsync(Uname, UPwd, InvOrg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoAsync(ByVal Uname As String, ByVal UPwd As String, ByVal InvOrg As String, ByVal userState As Object)
            If (Me.GetUserInfoOperationCompleted Is Nothing) Then
                Me.GetUserInfoOperationCompleted = AddressOf Me.OnGetUserInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUserInfo", New Object() {Uname, UPwd, InvOrg}, Me.GetUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserInfoCompleted(Me, New GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetAccessCardUserInfo", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccessCardUserInfo(ByVal AccessCardID As String) As AccessCard
            Dim results() As Object = Me.Invoke("GetAccessCardUserInfo", New Object() {AccessCardID})
            Return CType(results(0),AccessCard)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccessCardUserInfoAsync(ByVal AccessCardID As String)
            Me.GetAccessCardUserInfoAsync(AccessCardID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccessCardUserInfoAsync(ByVal AccessCardID As String, ByVal userState As Object)
            If (Me.GetAccessCardUserInfoOperationCompleted Is Nothing) Then
                Me.GetAccessCardUserInfoOperationCompleted = AddressOf Me.OnGetAccessCardUserInfoOperationCompleted
            End If
            Me.InvokeAsync("GetAccessCardUserInfo", New Object() {AccessCardID}, Me.GetAccessCardUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccessCardUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccessCardUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccessCardUserInfoCompleted(Me, New GetAccessCardUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetSysMessage", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysMessage(ByVal frequecy As String, ByVal device As String, ByVal eTraceModel As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSysMessage", New Object() {frequecy, device, eTraceModel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysMessageAsync(ByVal frequecy As String, ByVal device As String, ByVal eTraceModel As String)
            Me.GetSysMessageAsync(frequecy, device, eTraceModel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysMessageAsync(ByVal frequecy As String, ByVal device As String, ByVal eTraceModel As String, ByVal userState As Object)
            If (Me.GetSysMessageOperationCompleted Is Nothing) Then
                Me.GetSysMessageOperationCompleted = AddressOf Me.OnGetSysMessageOperationCompleted
            End If
            Me.InvokeAsync("GetSysMessage", New Object() {frequecy, device, eTraceModel}, Me.GetSysMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysMessageCompleted(Me, New GetSysMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PrinterCheck", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrinterCheck(ByVal User As String, ByVal PrinterID As String, ByVal OutputType As String) As String
            Dim results() As Object = Me.Invoke("PrinterCheck", New Object() {User, PrinterID, OutputType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrinterCheckAsync(ByVal User As String, ByVal PrinterID As String, ByVal OutputType As String)
            Me.PrinterCheckAsync(User, PrinterID, OutputType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrinterCheckAsync(ByVal User As String, ByVal PrinterID As String, ByVal OutputType As String, ByVal userState As Object)
            If (Me.PrinterCheckOperationCompleted Is Nothing) Then
                Me.PrinterCheckOperationCompleted = AddressOf Me.OnPrinterCheckOperationCompleted
            End If
            Me.InvokeAsync("PrinterCheck", New Object() {User, PrinterID, OutputType}, Me.PrinterCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrinterCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrinterCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrinterCheckCompleted(Me, New PrinterCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/WIP121Depanelling", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIP121Depanelling(ByVal dsResult As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WIP121Depanelling", New Object() {dsResult})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIP121DepanellingAsync(ByVal dsResult As System.Data.DataSet)
            Me.WIP121DepanellingAsync(dsResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIP121DepanellingAsync(ByVal dsResult As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIP121DepanellingOperationCompleted Is Nothing) Then
                Me.WIP121DepanellingOperationCompleted = AddressOf Me.OnWIP121DepanellingOperationCompleted
            End If
            Me.InvokeAsync("WIP121Depanelling", New Object() {dsResult}, Me.WIP121DepanellingOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIP121DepanellingOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIP121DepanellingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIP121DepanellingCompleted(Me, New WIP121DepanellingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/UpdateFeeder", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFeeder(ByVal FeederID As String, ByVal CLID As String, ByVal ChangedBy As String) As String
            Dim results() As Object = Me.Invoke("UpdateFeeder", New Object() {FeederID, CLID, ChangedBy})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFeederAsync(ByVal FeederID As String, ByVal CLID As String, ByVal ChangedBy As String)
            Me.UpdateFeederAsync(FeederID, CLID, ChangedBy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFeederAsync(ByVal FeederID As String, ByVal CLID As String, ByVal ChangedBy As String, ByVal userState As Object)
            If (Me.UpdateFeederOperationCompleted Is Nothing) Then
                Me.UpdateFeederOperationCompleted = AddressOf Me.OnUpdateFeederOperationCompleted
            End If
            Me.InvokeAsync("UpdateFeeder", New Object() {FeederID, CLID, ChangedBy}, Me.UpdateFeederOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFeederOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFeederCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFeederCompleted(Me, New UpdateFeederCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetFeederInfoByID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFeederInfoByID(ByVal FeederID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFeederInfoByID", New Object() {FeederID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFeederInfoByIDAsync(ByVal FeederID As String)
            Me.GetFeederInfoByIDAsync(FeederID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFeederInfoByIDAsync(ByVal FeederID As String, ByVal userState As Object)
            If (Me.GetFeederInfoByIDOperationCompleted Is Nothing) Then
                Me.GetFeederInfoByIDOperationCompleted = AddressOf Me.OnGetFeederInfoByIDOperationCompleted
            End If
            Me.InvokeAsync("GetFeederInfoByID", New Object() {FeederID}, Me.GetFeederInfoByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFeederInfoByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFeederInfoByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFeederInfoByIDCompleted(Me, New GetFeederInfoByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/TEGetPartData", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TEGetPartData(ByVal PartNumber As String, ByVal IsDownload As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TEGetPartData", New Object() {PartNumber, IsDownload})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TEGetPartDataAsync(ByVal PartNumber As String, ByVal IsDownload As Boolean)
            Me.TEGetPartDataAsync(PartNumber, IsDownload, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TEGetPartDataAsync(ByVal PartNumber As String, ByVal IsDownload As Boolean, ByVal userState As Object)
            If (Me.TEGetPartDataOperationCompleted Is Nothing) Then
                Me.TEGetPartDataOperationCompleted = AddressOf Me.OnTEGetPartDataOperationCompleted
            End If
            Me.InvokeAsync("TEGetPartData", New Object() {PartNumber, IsDownload}, Me.TEGetPartDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnTEGetPartDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.TEGetPartDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TEGetPartDataCompleted(Me, New TEGetPartDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetAegisDataByDate", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAegisDataByDate() As String
            Dim results() As Object = Me.Invoke("GetAegisDataByDate", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataByDateAsync()
            Me.GetAegisDataByDateAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataByDateAsync(ByVal userState As Object)
            If (Me.GetAegisDataByDateOperationCompleted Is Nothing) Then
                Me.GetAegisDataByDateOperationCompleted = AddressOf Me.OnGetAegisDataByDateOperationCompleted
            End If
            Me.InvokeAsync("GetAegisDataByDate", New Object(-1) {}, Me.GetAegisDataByDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAegisDataByDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAegisDataByDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAegisDataByDateCompleted(Me, New GetAegisDataByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetAegisDataToTempTableByDate", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAegisDataToTempTableByDate(ByVal strBeginDate As String, ByVal strEndDate As String) As String
            Dim results() As Object = Me.Invoke("GetAegisDataToTempTableByDate", New Object() {strBeginDate, strEndDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataToTempTableByDateAsync(ByVal strBeginDate As String, ByVal strEndDate As String)
            Me.GetAegisDataToTempTableByDateAsync(strBeginDate, strEndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataToTempTableByDateAsync(ByVal strBeginDate As String, ByVal strEndDate As String, ByVal userState As Object)
            If (Me.GetAegisDataToTempTableByDateOperationCompleted Is Nothing) Then
                Me.GetAegisDataToTempTableByDateOperationCompleted = AddressOf Me.OnGetAegisDataToTempTableByDateOperationCompleted
            End If
            Me.InvokeAsync("GetAegisDataToTempTableByDate", New Object() {strBeginDate, strEndDate}, Me.GetAegisDataToTempTableByDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAegisDataToTempTableByDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAegisDataToTempTableByDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAegisDataToTempTableByDateCompleted(Me, New GetAegisDataToTempTableByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetAegisDataToTempTableByDateSN", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAegisDataToTempTableByDateSN(ByVal strBeginDate As String, ByVal strEndDate As String, ByVal strIntSN As String) As String
            Dim results() As Object = Me.Invoke("GetAegisDataToTempTableByDateSN", New Object() {strBeginDate, strEndDate, strIntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataToTempTableByDateSNAsync(ByVal strBeginDate As String, ByVal strEndDate As String, ByVal strIntSN As String)
            Me.GetAegisDataToTempTableByDateSNAsync(strBeginDate, strEndDate, strIntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataToTempTableByDateSNAsync(ByVal strBeginDate As String, ByVal strEndDate As String, ByVal strIntSN As String, ByVal userState As Object)
            If (Me.GetAegisDataToTempTableByDateSNOperationCompleted Is Nothing) Then
                Me.GetAegisDataToTempTableByDateSNOperationCompleted = AddressOf Me.OnGetAegisDataToTempTableByDateSNOperationCompleted
            End If
            Me.InvokeAsync("GetAegisDataToTempTableByDateSN", New Object() {strBeginDate, strEndDate, strIntSN}, Me.GetAegisDataToTempTableByDateSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAegisDataToTempTableByDateSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAegisDataToTempTableByDateSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAegisDataToTempTableByDateSNCompleted(Me, New GetAegisDataToTempTableByDateSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetAegisDataFromTempTable", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAegisDataFromTempTable(ByVal strBeginDate As String, ByVal strEndDate As String) As String
            Dim results() As Object = Me.Invoke("GetAegisDataFromTempTable", New Object() {strBeginDate, strEndDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataFromTempTableAsync(ByVal strBeginDate As String, ByVal strEndDate As String)
            Me.GetAegisDataFromTempTableAsync(strBeginDate, strEndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataFromTempTableAsync(ByVal strBeginDate As String, ByVal strEndDate As String, ByVal userState As Object)
            If (Me.GetAegisDataFromTempTableOperationCompleted Is Nothing) Then
                Me.GetAegisDataFromTempTableOperationCompleted = AddressOf Me.OnGetAegisDataFromTempTableOperationCompleted
            End If
            Me.InvokeAsync("GetAegisDataFromTempTable", New Object() {strBeginDate, strEndDate}, Me.GetAegisDataFromTempTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAegisDataFromTempTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAegisDataFromTempTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAegisDataFromTempTableCompleted(Me, New GetAegisDataFromTempTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetAegisDataToTempTableByDJ", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAegisDataToTempTableByDJ(ByVal strDJ As String) As String
            Dim results() As Object = Me.Invoke("GetAegisDataToTempTableByDJ", New Object() {strDJ})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataToTempTableByDJAsync(ByVal strDJ As String)
            Me.GetAegisDataToTempTableByDJAsync(strDJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataToTempTableByDJAsync(ByVal strDJ As String, ByVal userState As Object)
            If (Me.GetAegisDataToTempTableByDJOperationCompleted Is Nothing) Then
                Me.GetAegisDataToTempTableByDJOperationCompleted = AddressOf Me.OnGetAegisDataToTempTableByDJOperationCompleted
            End If
            Me.InvokeAsync("GetAegisDataToTempTableByDJ", New Object() {strDJ}, Me.GetAegisDataToTempTableByDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAegisDataToTempTableByDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAegisDataToTempTableByDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAegisDataToTempTableByDJCompleted(Me, New GetAegisDataToTempTableByDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetAegisDataToTempTableBySN", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAegisDataToTempTableBySN(ByVal strSN As String) As String
            Dim results() As Object = Me.Invoke("GetAegisDataToTempTableBySN", New Object() {strSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataToTempTableBySNAsync(ByVal strSN As String)
            Me.GetAegisDataToTempTableBySNAsync(strSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAegisDataToTempTableBySNAsync(ByVal strSN As String, ByVal userState As Object)
            If (Me.GetAegisDataToTempTableBySNOperationCompleted Is Nothing) Then
                Me.GetAegisDataToTempTableBySNOperationCompleted = AddressOf Me.OnGetAegisDataToTempTableBySNOperationCompleted
            End If
            Me.InvokeAsync("GetAegisDataToTempTableBySN", New Object() {strSN}, Me.GetAegisDataToTempTableBySNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAegisDataToTempTableBySNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAegisDataToTempTableBySNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAegisDataToTempTableBySNCompleted(Me, New GetAegisDataToTempTableBySNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetConfigValue", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConfigValue(ByVal eTraceModule As String) As String
            Dim results() As Object = Me.Invoke("GetConfigValue", New Object() {eTraceModule})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConfigValueAsync(ByVal eTraceModule As String)
            Me.GetConfigValueAsync(eTraceModule, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConfigValueAsync(ByVal eTraceModule As String, ByVal userState As Object)
            If (Me.GetConfigValueOperationCompleted Is Nothing) Then
                Me.GetConfigValueOperationCompleted = AddressOf Me.OnGetConfigValueOperationCompleted
            End If
            Me.InvokeAsync("GetConfigValue", New Object() {eTraceModule}, Me.GetConfigValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConfigValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConfigValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConfigValueCompleted(Me, New GetConfigValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/UpdateConfigValue", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateConfigValue(ByVal ConfigID As String, ByVal ConfigValue As String) As String
            Dim results() As Object = Me.Invoke("UpdateConfigValue", New Object() {ConfigID, ConfigValue})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateConfigValueAsync(ByVal ConfigID As String, ByVal ConfigValue As String)
            Me.UpdateConfigValueAsync(ConfigID, ConfigValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateConfigValueAsync(ByVal ConfigID As String, ByVal ConfigValue As String, ByVal userState As Object)
            If (Me.UpdateConfigValueOperationCompleted Is Nothing) Then
                Me.UpdateConfigValueOperationCompleted = AddressOf Me.OnUpdateConfigValueOperationCompleted
            End If
            Me.InvokeAsync("UpdateConfigValue", New Object() {ConfigID, ConfigValue}, Me.UpdateConfigValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateConfigValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateConfigValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateConfigValueCompleted(Me, New UpdateConfigValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetWipHeaderByIntSN", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWipHeaderByIntSN(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWipHeaderByIntSN", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWipHeaderByIntSNAsync(ByVal IntSN As String)
            Me.GetWipHeaderByIntSNAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWipHeaderByIntSNAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.GetWipHeaderByIntSNOperationCompleted Is Nothing) Then
                Me.GetWipHeaderByIntSNOperationCompleted = AddressOf Me.OnGetWipHeaderByIntSNOperationCompleted
            End If
            Me.InvokeAsync("GetWipHeaderByIntSN", New Object() {IntSN}, Me.GetWipHeaderByIntSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWipHeaderByIntSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWipHeaderByIntSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWipHeaderByIntSNCompleted(Me, New GetWipHeaderByIntSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CopyDataByIntSN", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyDataByIntSN(ByVal IntSN As String, ByVal NewIntSN As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("CopyDataByIntSN", New Object() {IntSN, NewIntSN, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyDataByIntSNAsync(ByVal IntSN As String, ByVal NewIntSN As String, ByVal Process As String)
            Me.CopyDataByIntSNAsync(IntSN, NewIntSN, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyDataByIntSNAsync(ByVal IntSN As String, ByVal NewIntSN As String, ByVal Process As String, ByVal userState As Object)
            If (Me.CopyDataByIntSNOperationCompleted Is Nothing) Then
                Me.CopyDataByIntSNOperationCompleted = AddressOf Me.OnCopyDataByIntSNOperationCompleted
            End If
            Me.InvokeAsync("CopyDataByIntSN", New Object() {IntSN, NewIntSN, Process}, Me.CopyDataByIntSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyDataByIntSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyDataByIntSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyDataByIntSNCompleted(Me, New CopyDataByIntSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/WIPout121_SMT", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPout121_SMT(ByVal p_Operator As String, ByVal p_EquipmentID As String, ByVal p_IntSN As String, ByVal p_CompID As String) As String
            Dim results() As Object = Me.Invoke("WIPout121_SMT", New Object() {p_Operator, p_EquipmentID, p_IntSN, p_CompID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPout121_SMTAsync(ByVal p_Operator As String, ByVal p_EquipmentID As String, ByVal p_IntSN As String, ByVal p_CompID As String)
            Me.WIPout121_SMTAsync(p_Operator, p_EquipmentID, p_IntSN, p_CompID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPout121_SMTAsync(ByVal p_Operator As String, ByVal p_EquipmentID As String, ByVal p_IntSN As String, ByVal p_CompID As String, ByVal userState As Object)
            If (Me.WIPout121_SMTOperationCompleted Is Nothing) Then
                Me.WIPout121_SMTOperationCompleted = AddressOf Me.OnWIPout121_SMTOperationCompleted
            End If
            Me.InvokeAsync("WIPout121_SMT", New Object() {p_Operator, p_EquipmentID, p_IntSN, p_CompID}, Me.WIPout121_SMTOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPout121_SMTOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPout121_SMTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPout121_SMTCompleted(Me, New WIPout121_SMTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/SplIDGeneration", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SplIDGeneration(ByVal CountQty As Integer, ByVal AccessCardID As String, ByVal dtClids As System.Data.DataTable) As String
            Dim results() As Object = Me.Invoke("SplIDGeneration", New Object() {CountQty, AccessCardID, dtClids})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SplIDGenerationAsync(ByVal CountQty As Integer, ByVal AccessCardID As String, ByVal dtClids As System.Data.DataTable)
            Me.SplIDGenerationAsync(CountQty, AccessCardID, dtClids, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SplIDGenerationAsync(ByVal CountQty As Integer, ByVal AccessCardID As String, ByVal dtClids As System.Data.DataTable, ByVal userState As Object)
            If (Me.SplIDGenerationOperationCompleted Is Nothing) Then
                Me.SplIDGenerationOperationCompleted = AddressOf Me.OnSplIDGenerationOperationCompleted
            End If
            Me.InvokeAsync("SplIDGeneration", New Object() {CountQty, AccessCardID, dtClids}, Me.SplIDGenerationOperationCompleted, userState)
        End Sub
        
        Private Sub OnSplIDGenerationOperationCompleted(ByVal arg As Object)
            If (Not (Me.SplIDGenerationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SplIDGenerationCompleted(Me, New SplIDGenerationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/SplReadByID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SplReadByID(ByVal SplID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SplReadByID", New Object() {SplID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SplReadByIDAsync(ByVal SplID As String)
            Me.SplReadByIDAsync(SplID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SplReadByIDAsync(ByVal SplID As String, ByVal userState As Object)
            If (Me.SplReadByIDOperationCompleted Is Nothing) Then
                Me.SplReadByIDOperationCompleted = AddressOf Me.OnSplReadByIDOperationCompleted
            End If
            Me.InvokeAsync("SplReadByID", New Object() {SplID}, Me.SplReadByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnSplReadByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.SplReadByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SplReadByIDCompleted(Me, New SplReadByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PrintSPL", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintSPL(ByVal p_strSPL As String, ByVal p_strQTY As String, ByVal p_strItemNo As String, ByVal p_strOrgCode As String, ByVal p_strPrinter As String, ByVal p_strRecDate As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintSPL", New Object() {p_strSPL, p_strQTY, p_strItemNo, p_strOrgCode, p_strPrinter, p_strRecDate})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintSPLAsync(ByVal p_strSPL As String, ByVal p_strQTY As String, ByVal p_strItemNo As String, ByVal p_strOrgCode As String, ByVal p_strPrinter As String, ByVal p_strRecDate As String)
            Me.PrintSPLAsync(p_strSPL, p_strQTY, p_strItemNo, p_strOrgCode, p_strPrinter, p_strRecDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintSPLAsync(ByVal p_strSPL As String, ByVal p_strQTY As String, ByVal p_strItemNo As String, ByVal p_strOrgCode As String, ByVal p_strPrinter As String, ByVal p_strRecDate As String, ByVal userState As Object)
            If (Me.PrintSPLOperationCompleted Is Nothing) Then
                Me.PrintSPLOperationCompleted = AddressOf Me.OnPrintSPLOperationCompleted
            End If
            Me.InvokeAsync("PrintSPL", New Object() {p_strSPL, p_strQTY, p_strItemNo, p_strOrgCode, p_strPrinter, p_strRecDate}, Me.PrintSPLOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintSPLOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintSPLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintSPLCompleted(Me, New PrintSPLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetProcessByType", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProcessByType(ByVal InProcessType As String, ByVal wipid As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProcessByType", New Object() {InProcessType, wipid})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProcessByTypeAsync(ByVal InProcessType As String, ByVal wipid As String)
            Me.GetProcessByTypeAsync(InProcessType, wipid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProcessByTypeAsync(ByVal InProcessType As String, ByVal wipid As String, ByVal userState As Object)
            If (Me.GetProcessByTypeOperationCompleted Is Nothing) Then
                Me.GetProcessByTypeOperationCompleted = AddressOf Me.OnGetProcessByTypeOperationCompleted
            End If
            Me.InvokeAsync("GetProcessByType", New Object() {InProcessType, wipid}, Me.GetProcessByTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProcessByTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProcessByTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProcessByTypeCompleted(Me, New GetProcessByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/TrayIDSwop", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TrayIDSwop(ByVal OriID As String, ByVal NewID As String, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("TrayIDSwop", New Object() {OriID, NewID, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TrayIDSwopAsync(ByVal OriID As String, ByVal NewID As String, ByVal User As String)
            Me.TrayIDSwopAsync(OriID, NewID, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TrayIDSwopAsync(ByVal OriID As String, ByVal NewID As String, ByVal User As String, ByVal userState As Object)
            If (Me.TrayIDSwopOperationCompleted Is Nothing) Then
                Me.TrayIDSwopOperationCompleted = AddressOf Me.OnTrayIDSwopOperationCompleted
            End If
            Me.InvokeAsync("TrayIDSwop", New Object() {OriID, NewID, User}, Me.TrayIDSwopOperationCompleted, userState)
        End Sub
        
        Private Sub OnTrayIDSwopOperationCompleted(ByVal arg As Object)
            If (Not (Me.TrayIDSwopCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TrayIDSwopCompleted(Me, New TrayIDSwopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PCBListReadByTrayID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PCBListReadByTrayID(ByVal TrayID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PCBListReadByTrayID", New Object() {TrayID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PCBListReadByTrayIDAsync(ByVal TrayID As String)
            Me.PCBListReadByTrayIDAsync(TrayID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PCBListReadByTrayIDAsync(ByVal TrayID As String, ByVal userState As Object)
            If (Me.PCBListReadByTrayIDOperationCompleted Is Nothing) Then
                Me.PCBListReadByTrayIDOperationCompleted = AddressOf Me.OnPCBListReadByTrayIDOperationCompleted
            End If
            Me.InvokeAsync("PCBListReadByTrayID", New Object() {TrayID}, Me.PCBListReadByTrayIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnPCBListReadByTrayIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.PCBListReadByTrayIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PCBListReadByTrayIDCompleted(Me, New PCBListReadByTrayIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/MIPreLoadReadByWIPID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MIPreLoadReadByWIPID(ByVal WIPID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MIPreLoadReadByWIPID", New Object() {WIPID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MIPreLoadReadByWIPIDAsync(ByVal WIPID As String)
            Me.MIPreLoadReadByWIPIDAsync(WIPID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MIPreLoadReadByWIPIDAsync(ByVal WIPID As String, ByVal userState As Object)
            If (Me.MIPreLoadReadByWIPIDOperationCompleted Is Nothing) Then
                Me.MIPreLoadReadByWIPIDOperationCompleted = AddressOf Me.OnMIPreLoadReadByWIPIDOperationCompleted
            End If
            Me.InvokeAsync("MIPreLoadReadByWIPID", New Object() {WIPID}, Me.MIPreLoadReadByWIPIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnMIPreLoadReadByWIPIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.MIPreLoadReadByWIPIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MIPreLoadReadByWIPIDCompleted(Me, New MIPreLoadReadByWIPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/MILoadByTray", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MILoadByTray(ByVal dsWIPID As System.Data.DataSet, ByVal TrayID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal Circuit As String, ByVal Comp As String, ByVal equ As String, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("MILoadByTray", New Object() {dsWIPID, TrayID, JobID, PCBA, Process, Circuit, Comp, equ, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MILoadByTrayAsync(ByVal dsWIPID As System.Data.DataSet, ByVal TrayID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal Circuit As String, ByVal Comp As String, ByVal equ As String, ByVal user As String)
            Me.MILoadByTrayAsync(dsWIPID, TrayID, JobID, PCBA, Process, Circuit, Comp, equ, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MILoadByTrayAsync(ByVal dsWIPID As System.Data.DataSet, ByVal TrayID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal Circuit As String, ByVal Comp As String, ByVal equ As String, ByVal user As String, ByVal userState As Object)
            If (Me.MILoadByTrayOperationCompleted Is Nothing) Then
                Me.MILoadByTrayOperationCompleted = AddressOf Me.OnMILoadByTrayOperationCompleted
            End If
            Me.InvokeAsync("MILoadByTray", New Object() {dsWIPID, TrayID, JobID, PCBA, Process, Circuit, Comp, equ, user}, Me.MILoadByTrayOperationCompleted, userState)
        End Sub
        
        Private Sub OnMILoadByTrayOperationCompleted(ByVal arg As Object)
            If (Not (Me.MILoadByTrayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MILoadByTrayCompleted(Me, New MILoadByTrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/ProcessedQty", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessedQty(ByVal JobID As String, ByVal PCBA As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("ProcessedQty", New Object() {JobID, PCBA, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessedQtyAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Process As String)
            Me.ProcessedQtyAsync(JobID, PCBA, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessedQtyAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal userState As Object)
            If (Me.ProcessedQtyOperationCompleted Is Nothing) Then
                Me.ProcessedQtyOperationCompleted = AddressOf Me.OnProcessedQtyOperationCompleted
            End If
            Me.InvokeAsync("ProcessedQty", New Object() {JobID, PCBA, Process}, Me.ProcessedQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessedQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessedQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessedQtyCompleted(Me, New ProcessedQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/JobItemQty", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function JobItemQty(ByVal JobID As String, ByVal PCBA As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("JobItemQty", New Object() {JobID, PCBA, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub JobItemQtyAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Process As String)
            Me.JobItemQtyAsync(JobID, PCBA, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub JobItemQtyAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal userState As Object)
            If (Me.JobItemQtyOperationCompleted Is Nothing) Then
                Me.JobItemQtyOperationCompleted = AddressOf Me.OnJobItemQtyOperationCompleted
            End If
            Me.InvokeAsync("JobItemQty", New Object() {JobID, PCBA, Process}, Me.JobItemQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnJobItemQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.JobItemQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent JobItemQtyCompleted(Me, New JobItemQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetWIPFlow", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWIPFlow(ByVal intsn As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWIPFlow", New Object() {intsn})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWIPFlowAsync(ByVal intsn As String)
            Me.GetWIPFlowAsync(intsn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWIPFlowAsync(ByVal intsn As String, ByVal userState As Object)
            If (Me.GetWIPFlowOperationCompleted Is Nothing) Then
                Me.GetWIPFlowOperationCompleted = AddressOf Me.OnGetWIPFlowOperationCompleted
            End If
            Me.InvokeAsync("GetWIPFlow", New Object() {intsn}, Me.GetWIPFlowOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWIPFlowOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWIPFlowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWIPFlowCompleted(Me, New GetWIPFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetWIPTDHeader", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWIPTDHeader(ByVal intsn As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWIPTDHeader", New Object() {intsn})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWIPTDHeaderAsync(ByVal intsn As String)
            Me.GetWIPTDHeaderAsync(intsn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWIPTDHeaderAsync(ByVal intsn As String, ByVal userState As Object)
            If (Me.GetWIPTDHeaderOperationCompleted Is Nothing) Then
                Me.GetWIPTDHeaderOperationCompleted = AddressOf Me.OnGetWIPTDHeaderOperationCompleted
            End If
            Me.InvokeAsync("GetWIPTDHeader", New Object() {intsn}, Me.GetWIPTDHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWIPTDHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWIPTDHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWIPTDHeaderCompleted(Me, New GetWIPTDHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/WIP121PVI_Siplace", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIP121PVI_Siplace(ByVal ds As System.Data.DataSet, ByVal runSiplace As Integer, ByVal ignoreSiplace As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WIP121PVI_Siplace", New Object() {ds, runSiplace, ignoreSiplace})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIP121PVI_SiplaceAsync(ByVal ds As System.Data.DataSet, ByVal runSiplace As Integer, ByVal ignoreSiplace As Integer)
            Me.WIP121PVI_SiplaceAsync(ds, runSiplace, ignoreSiplace, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIP121PVI_SiplaceAsync(ByVal ds As System.Data.DataSet, ByVal runSiplace As Integer, ByVal ignoreSiplace As Integer, ByVal userState As Object)
            If (Me.WIP121PVI_SiplaceOperationCompleted Is Nothing) Then
                Me.WIP121PVI_SiplaceOperationCompleted = AddressOf Me.OnWIP121PVI_SiplaceOperationCompleted
            End If
            Me.InvokeAsync("WIP121PVI_Siplace", New Object() {ds, runSiplace, ignoreSiplace}, Me.WIP121PVI_SiplaceOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIP121PVI_SiplaceOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIP121PVI_SiplaceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIP121PVI_SiplaceCompleted(Me, New WIP121PVI_SiplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CheckPanelIDOrPCBIDforSealing", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPanelIDOrPCBIDforSealing(ByVal ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckPanelIDOrPCBIDforSealing", New Object() {ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPanelIDOrPCBIDforSealingAsync(ByVal ID As String)
            Me.CheckPanelIDOrPCBIDforSealingAsync(ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPanelIDOrPCBIDforSealingAsync(ByVal ID As String, ByVal userState As Object)
            If (Me.CheckPanelIDOrPCBIDforSealingOperationCompleted Is Nothing) Then
                Me.CheckPanelIDOrPCBIDforSealingOperationCompleted = AddressOf Me.OnCheckPanelIDOrPCBIDforSealingOperationCompleted
            End If
            Me.InvokeAsync("CheckPanelIDOrPCBIDforSealing", New Object() {ID}, Me.CheckPanelIDOrPCBIDforSealingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPanelIDOrPCBIDforSealingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPanelIDOrPCBIDforSealingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPanelIDOrPCBIDforSealingCompleted(Me, New CheckPanelIDOrPCBIDforSealingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CheckPanelIDOrPCBIDForUnsealing", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPanelIDOrPCBIDForUnsealing(ByVal ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckPanelIDOrPCBIDForUnsealing", New Object() {ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPanelIDOrPCBIDForUnsealingAsync(ByVal ID As String)
            Me.CheckPanelIDOrPCBIDForUnsealingAsync(ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPanelIDOrPCBIDForUnsealingAsync(ByVal ID As String, ByVal userState As Object)
            If (Me.CheckPanelIDOrPCBIDForUnsealingOperationCompleted Is Nothing) Then
                Me.CheckPanelIDOrPCBIDForUnsealingOperationCompleted = AddressOf Me.OnCheckPanelIDOrPCBIDForUnsealingOperationCompleted
            End If
            Me.InvokeAsync("CheckPanelIDOrPCBIDForUnsealing", New Object() {ID}, Me.CheckPanelIDOrPCBIDForUnsealingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPanelIDOrPCBIDForUnsealingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPanelIDOrPCBIDForUnsealingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPanelIDOrPCBIDForUnsealingCompleted(Me, New CheckPanelIDOrPCBIDForUnsealingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CheckPanelIDOrPCBIDForExtension", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPanelIDOrPCBIDForExtension(ByVal ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckPanelIDOrPCBIDForExtension", New Object() {ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPanelIDOrPCBIDForExtensionAsync(ByVal ID As String)
            Me.CheckPanelIDOrPCBIDForExtensionAsync(ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPanelIDOrPCBIDForExtensionAsync(ByVal ID As String, ByVal userState As Object)
            If (Me.CheckPanelIDOrPCBIDForExtensionOperationCompleted Is Nothing) Then
                Me.CheckPanelIDOrPCBIDForExtensionOperationCompleted = AddressOf Me.OnCheckPanelIDOrPCBIDForExtensionOperationCompleted
            End If
            Me.InvokeAsync("CheckPanelIDOrPCBIDForExtension", New Object() {ID}, Me.CheckPanelIDOrPCBIDForExtensionOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPanelIDOrPCBIDForExtensionOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPanelIDOrPCBIDForExtensionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPanelIDOrPCBIDForExtensionCompleted(Me, New CheckPanelIDOrPCBIDForExtensionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PCBFloorLifeExtension", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PCBFloorLifeExtension(ByVal ID As String, ByVal extendStep As String, ByVal PCBAlid As String, ByVal cause As String, ByVal result As String, ByVal attachment As String, ByVal extendHours As String, ByVal Model As String, ByVal PCBA As String, ByVal user As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PCBFloorLifeExtension", New Object() {ID, extendStep, PCBAlid, cause, result, attachment, extendHours, Model, PCBA, user})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PCBFloorLifeExtensionAsync(ByVal ID As String, ByVal extendStep As String, ByVal PCBAlid As String, ByVal cause As String, ByVal result As String, ByVal attachment As String, ByVal extendHours As String, ByVal Model As String, ByVal PCBA As String, ByVal user As String)
            Me.PCBFloorLifeExtensionAsync(ID, extendStep, PCBAlid, cause, result, attachment, extendHours, Model, PCBA, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PCBFloorLifeExtensionAsync(ByVal ID As String, ByVal extendStep As String, ByVal PCBAlid As String, ByVal cause As String, ByVal result As String, ByVal attachment As String, ByVal extendHours As String, ByVal Model As String, ByVal PCBA As String, ByVal user As String, ByVal userState As Object)
            If (Me.PCBFloorLifeExtensionOperationCompleted Is Nothing) Then
                Me.PCBFloorLifeExtensionOperationCompleted = AddressOf Me.OnPCBFloorLifeExtensionOperationCompleted
            End If
            Me.InvokeAsync("PCBFloorLifeExtension", New Object() {ID, extendStep, PCBAlid, cause, result, attachment, extendHours, Model, PCBA, user}, Me.PCBFloorLifeExtensionOperationCompleted, userState)
        End Sub
        
        Private Sub OnPCBFloorLifeExtensionOperationCompleted(ByVal arg As Object)
            If (Not (Me.PCBFloorLifeExtensionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PCBFloorLifeExtensionCompleted(Me, New PCBFloorLifeExtensionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PCBSealing", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PCBSealing(ByVal sealType As String, ByVal user As String, ByVal process As String, ByVal keyValue As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PCBSealing", New Object() {sealType, user, process, keyValue})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PCBSealingAsync(ByVal sealType As String, ByVal user As String, ByVal process As String, ByVal keyValue As String)
            Me.PCBSealingAsync(sealType, user, process, keyValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PCBSealingAsync(ByVal sealType As String, ByVal user As String, ByVal process As String, ByVal keyValue As String, ByVal userState As Object)
            If (Me.PCBSealingOperationCompleted Is Nothing) Then
                Me.PCBSealingOperationCompleted = AddressOf Me.OnPCBSealingOperationCompleted
            End If
            Me.InvokeAsync("PCBSealing", New Object() {sealType, user, process, keyValue}, Me.PCBSealingOperationCompleted, userState)
        End Sub
        
        Private Sub OnPCBSealingOperationCompleted(ByVal arg As Object)
            If (Not (Me.PCBSealingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PCBSealingCompleted(Me, New PCBSealingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/SaveFile", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveFile(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal file() As Byte, ByVal fileName As String, ByRef success As Boolean, ByRef errorMsg As String) As String
            Dim results() As Object = Me.Invoke("SaveFile", New Object() {file, fileName, success, errorMsg})
            success = CType(results(1),Boolean)
            errorMsg = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveFileAsync(ByVal file() As Byte, ByVal fileName As String, ByVal success As Boolean, ByVal errorMsg As String)
            Me.SaveFileAsync(file, fileName, success, errorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveFileAsync(ByVal file() As Byte, ByVal fileName As String, ByVal success As Boolean, ByVal errorMsg As String, ByVal userState As Object)
            If (Me.SaveFileOperationCompleted Is Nothing) Then
                Me.SaveFileOperationCompleted = AddressOf Me.OnSaveFileOperationCompleted
            End If
            Me.InvokeAsync("SaveFile", New Object() {file, fileName, success, errorMsg}, Me.SaveFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveFileCompleted(Me, New SaveFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PCBUnsealing", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PCBUnsealing(ByVal sealAt As Date, ByVal sealType As String, ByVal user As String, ByVal process As String, ByVal keyValue As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PCBUnsealing", New Object() {sealAt, sealType, user, process, keyValue})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PCBUnsealingAsync(ByVal sealAt As Date, ByVal sealType As String, ByVal user As String, ByVal process As String, ByVal keyValue As String)
            Me.PCBUnsealingAsync(sealAt, sealType, user, process, keyValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PCBUnsealingAsync(ByVal sealAt As Date, ByVal sealType As String, ByVal user As String, ByVal process As String, ByVal keyValue As String, ByVal userState As Object)
            If (Me.PCBUnsealingOperationCompleted Is Nothing) Then
                Me.PCBUnsealingOperationCompleted = AddressOf Me.OnPCBUnsealingOperationCompleted
            End If
            Me.InvokeAsync("PCBUnsealing", New Object() {sealAt, sealType, user, process, keyValue}, Me.PCBUnsealingOperationCompleted, userState)
        End Sub
        
        Private Sub OnPCBUnsealingOperationCompleted(ByVal arg As Object)
            If (Not (Me.PCBUnsealingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PCBUnsealingCompleted(Me, New PCBUnsealingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetSMTPanelInfo", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMTPanelInfo(ByVal id As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSMTPanelInfo", New Object() {id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMTPanelInfoAsync(ByVal id As String)
            Me.GetSMTPanelInfoAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMTPanelInfoAsync(ByVal id As String, ByVal userState As Object)
            If (Me.GetSMTPanelInfoOperationCompleted Is Nothing) Then
                Me.GetSMTPanelInfoOperationCompleted = AddressOf Me.OnGetSMTPanelInfoOperationCompleted
            End If
            Me.InvokeAsync("GetSMTPanelInfo", New Object() {id}, Me.GetSMTPanelInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMTPanelInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMTPanelInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMTPanelInfoCompleted(Me, New GetSMTPanelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/IsAuthorizedPCB", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsAuthorizedPCB(ByVal model As String, ByVal pcb As String, ByVal userName As String) As String
            Dim results() As Object = Me.Invoke("IsAuthorizedPCB", New Object() {model, pcb, userName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsAuthorizedPCBAsync(ByVal model As String, ByVal pcb As String, ByVal userName As String)
            Me.IsAuthorizedPCBAsync(model, pcb, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsAuthorizedPCBAsync(ByVal model As String, ByVal pcb As String, ByVal userName As String, ByVal userState As Object)
            If (Me.IsAuthorizedPCBOperationCompleted Is Nothing) Then
                Me.IsAuthorizedPCBOperationCompleted = AddressOf Me.OnIsAuthorizedPCBOperationCompleted
            End If
            Me.InvokeAsync("IsAuthorizedPCB", New Object() {model, pcb, userName}, Me.IsAuthorizedPCBOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsAuthorizedPCBOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsAuthorizedPCBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsAuthorizedPCBCompleted(Me, New IsAuthorizedPCBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/UpdateKanbanLabel", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateKanbanLabel(ByVal userName As String, ByVal kbCode As String, ByVal subType As String, ByVal qty As Double) As String
            Dim results() As Object = Me.Invoke("UpdateKanbanLabel", New Object() {userName, kbCode, subType, qty})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateKanbanLabelAsync(ByVal userName As String, ByVal kbCode As String, ByVal subType As String, ByVal qty As Double)
            Me.UpdateKanbanLabelAsync(userName, kbCode, subType, qty, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateKanbanLabelAsync(ByVal userName As String, ByVal kbCode As String, ByVal subType As String, ByVal qty As Double, ByVal userState As Object)
            If (Me.UpdateKanbanLabelOperationCompleted Is Nothing) Then
                Me.UpdateKanbanLabelOperationCompleted = AddressOf Me.OnUpdateKanbanLabelOperationCompleted
            End If
            Me.InvokeAsync("UpdateKanbanLabel", New Object() {userName, kbCode, subType, qty}, Me.UpdateKanbanLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateKanbanLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateKanbanLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateKanbanLabelCompleted(Me, New UpdateKanbanLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/JobReadByProdLine", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function JobReadByProdLine(ByVal ProdLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("JobReadByProdLine", New Object() {ProdLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub JobReadByProdLineAsync(ByVal ProdLine As String)
            Me.JobReadByProdLineAsync(ProdLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub JobReadByProdLineAsync(ByVal ProdLine As String, ByVal userState As Object)
            If (Me.JobReadByProdLineOperationCompleted Is Nothing) Then
                Me.JobReadByProdLineOperationCompleted = AddressOf Me.OnJobReadByProdLineOperationCompleted
            End If
            Me.InvokeAsync("JobReadByProdLine", New Object() {ProdLine}, Me.JobReadByProdLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnJobReadByProdLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.JobReadByProdLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent JobReadByProdLineCompleted(Me, New JobReadByProdLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/StructureReadByPCBA", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StructureReadByPCBA(ByVal Model As String, ByVal PCBA As String, ByVal mode As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("StructureReadByPCBA", New Object() {Model, PCBA, mode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StructureReadByPCBAAsync(ByVal Model As String, ByVal PCBA As String, ByVal mode As Integer)
            Me.StructureReadByPCBAAsync(Model, PCBA, mode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StructureReadByPCBAAsync(ByVal Model As String, ByVal PCBA As String, ByVal mode As Integer, ByVal userState As Object)
            If (Me.StructureReadByPCBAOperationCompleted Is Nothing) Then
                Me.StructureReadByPCBAOperationCompleted = AddressOf Me.OnStructureReadByPCBAOperationCompleted
            End If
            Me.InvokeAsync("StructureReadByPCBA", New Object() {Model, PCBA, mode}, Me.StructureReadByPCBAOperationCompleted, userState)
        End Sub
        
        Private Sub OnStructureReadByPCBAOperationCompleted(ByVal arg As Object)
            If (Not (Me.StructureReadByPCBACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StructureReadByPCBACompleted(Me, New StructureReadByPCBACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/FamilyPCBAList", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FamilyPCBAList(ByVal Model As String, ByVal FamilyPanel As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FamilyPCBAList", New Object() {Model, FamilyPanel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FamilyPCBAListAsync(ByVal Model As String, ByVal FamilyPanel As String)
            Me.FamilyPCBAListAsync(Model, FamilyPanel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FamilyPCBAListAsync(ByVal Model As String, ByVal FamilyPanel As String, ByVal userState As Object)
            If (Me.FamilyPCBAListOperationCompleted Is Nothing) Then
                Me.FamilyPCBAListOperationCompleted = AddressOf Me.OnFamilyPCBAListOperationCompleted
            End If
            Me.InvokeAsync("FamilyPCBAList", New Object() {Model, FamilyPanel}, Me.FamilyPCBAListOperationCompleted, userState)
        End Sub
        
        Private Sub OnFamilyPCBAListOperationCompleted(ByVal arg As Object)
            If (Not (Me.FamilyPCBAListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FamilyPCBAListCompleted(Me, New FamilyPCBAListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/ChildISNIsValid", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChildISNIsValid(ByVal IntSN As String, ByVal ChildItem As String) As String
            Dim results() As Object = Me.Invoke("ChildISNIsValid", New Object() {IntSN, ChildItem})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChildISNIsValidAsync(ByVal IntSN As String, ByVal ChildItem As String)
            Me.ChildISNIsValidAsync(IntSN, ChildItem, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChildISNIsValidAsync(ByVal IntSN As String, ByVal ChildItem As String, ByVal userState As Object)
            If (Me.ChildISNIsValidOperationCompleted Is Nothing) Then
                Me.ChildISNIsValidOperationCompleted = AddressOf Me.OnChildISNIsValidOperationCompleted
            End If
            Me.InvokeAsync("ChildISNIsValid", New Object() {IntSN, ChildItem}, Me.ChildISNIsValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnChildISNIsValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChildISNIsValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChildISNIsValidCompleted(Me, New ChildISNIsValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CheckChildISNIsValid", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckChildISNIsValid(ByVal IntSN As String, ByVal ChildItem As String) As String
            Dim results() As Object = Me.Invoke("CheckChildISNIsValid", New Object() {IntSN, ChildItem})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckChildISNIsValidAsync(ByVal IntSN As String, ByVal ChildItem As String)
            Me.CheckChildISNIsValidAsync(IntSN, ChildItem, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckChildISNIsValidAsync(ByVal IntSN As String, ByVal ChildItem As String, ByVal userState As Object)
            If (Me.CheckChildISNIsValidOperationCompleted Is Nothing) Then
                Me.CheckChildISNIsValidOperationCompleted = AddressOf Me.OnCheckChildISNIsValidOperationCompleted
            End If
            Me.InvokeAsync("CheckChildISNIsValid", New Object() {IntSN, ChildItem}, Me.CheckChildISNIsValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckChildISNIsValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckChildISNIsValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckChildISNIsValidCompleted(Me, New CheckChildISNIsValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/MaterialInfoReadByCLID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MaterialInfoReadByCLID(ByVal CLID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MaterialInfoReadByCLID", New Object() {CLID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MaterialInfoReadByCLIDAsync(ByVal CLID As String)
            Me.MaterialInfoReadByCLIDAsync(CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MaterialInfoReadByCLIDAsync(ByVal CLID As String, ByVal userState As Object)
            If (Me.MaterialInfoReadByCLIDOperationCompleted Is Nothing) Then
                Me.MaterialInfoReadByCLIDOperationCompleted = AddressOf Me.OnMaterialInfoReadByCLIDOperationCompleted
            End If
            Me.InvokeAsync("MaterialInfoReadByCLID", New Object() {CLID}, Me.MaterialInfoReadByCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnMaterialInfoReadByCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.MaterialInfoReadByCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MaterialInfoReadByCLIDCompleted(Me, New MaterialInfoReadByCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/WIP121Matching", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIP121Matching(ByVal DSWIP As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WIP121Matching", New Object() {DSWIP})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIP121MatchingAsync(ByVal DSWIP As System.Data.DataSet)
            Me.WIP121MatchingAsync(DSWIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIP121MatchingAsync(ByVal DSWIP As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIP121MatchingOperationCompleted Is Nothing) Then
                Me.WIP121MatchingOperationCompleted = AddressOf Me.OnWIP121MatchingOperationCompleted
            End If
            Me.InvokeAsync("WIP121Matching", New Object() {DSWIP}, Me.WIP121MatchingOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIP121MatchingOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIP121MatchingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIP121MatchingCompleted(Me, New WIP121MatchingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CLIDCurrentQty", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CLIDCurrentQty(ByVal CLID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Component As String, ByVal Qty As Decimal, ByVal User As String) As Decimal
            Dim results() As Object = Me.Invoke("CLIDCurrentQty", New Object() {CLID, JobID, PCBA, Component, Qty, User})
            Return CType(results(0),Decimal)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CLIDCurrentQtyAsync(ByVal CLID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Component As String, ByVal Qty As Decimal, ByVal User As String)
            Me.CLIDCurrentQtyAsync(CLID, JobID, PCBA, Component, Qty, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CLIDCurrentQtyAsync(ByVal CLID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Component As String, ByVal Qty As Decimal, ByVal User As String, ByVal userState As Object)
            If (Me.CLIDCurrentQtyOperationCompleted Is Nothing) Then
                Me.CLIDCurrentQtyOperationCompleted = AddressOf Me.OnCLIDCurrentQtyOperationCompleted
            End If
            Me.InvokeAsync("CLIDCurrentQty", New Object() {CLID, JobID, PCBA, Component, Qty, User}, Me.CLIDCurrentQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnCLIDCurrentQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.CLIDCurrentQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CLIDCurrentQtyCompleted(Me, New CLIDCurrentQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PanelIDIsValid", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PanelIDIsValid(ByVal PanelID As String) As String
            Dim results() As Object = Me.Invoke("PanelIDIsValid", New Object() {PanelID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PanelIDIsValidAsync(ByVal PanelID As String)
            Me.PanelIDIsValidAsync(PanelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PanelIDIsValidAsync(ByVal PanelID As String, ByVal userState As Object)
            If (Me.PanelIDIsValidOperationCompleted Is Nothing) Then
                Me.PanelIDIsValidOperationCompleted = AddressOf Me.OnPanelIDIsValidOperationCompleted
            End If
            Me.InvokeAsync("PanelIDIsValid", New Object() {PanelID}, Me.PanelIDIsValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnPanelIDIsValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.PanelIDIsValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PanelIDIsValidCompleted(Me, New PanelIDIsValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetProductLineInfo", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductLineInfo() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProductLineInfo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductLineInfoAsync()
            Me.GetProductLineInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductLineInfoAsync(ByVal userState As Object)
            If (Me.GetProductLineInfoOperationCompleted Is Nothing) Then
                Me.GetProductLineInfoOperationCompleted = AddressOf Me.OnGetProductLineInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProductLineInfo", New Object(-1) {}, Me.GetProductLineInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductLineInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductLineInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductLineInfoCompleted(Me, New GetProductLineInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PCBListReadByPanelID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PCBListReadByPanelID(ByVal PanelID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PCBListReadByPanelID", New Object() {PanelID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PCBListReadByPanelIDAsync(ByVal PanelID As String)
            Me.PCBListReadByPanelIDAsync(PanelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PCBListReadByPanelIDAsync(ByVal PanelID As String, ByVal userState As Object)
            If (Me.PCBListReadByPanelIDOperationCompleted Is Nothing) Then
                Me.PCBListReadByPanelIDOperationCompleted = AddressOf Me.OnPCBListReadByPanelIDOperationCompleted
            End If
            Me.InvokeAsync("PCBListReadByPanelID", New Object() {PanelID}, Me.PCBListReadByPanelIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnPCBListReadByPanelIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.PCBListReadByPanelIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PCBListReadByPanelIDCompleted(Me, New PCBListReadByPanelIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CompReadOnMSL", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CompReadOnMSL(ByVal JobID As String, ByVal PCBA As String, ByVal Loc As String) As String
            Dim results() As Object = Me.Invoke("CompReadOnMSL", New Object() {JobID, PCBA, Loc})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CompReadOnMSLAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Loc As String)
            Me.CompReadOnMSLAsync(JobID, PCBA, Loc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CompReadOnMSLAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Loc As String, ByVal userState As Object)
            If (Me.CompReadOnMSLOperationCompleted Is Nothing) Then
                Me.CompReadOnMSLOperationCompleted = AddressOf Me.OnCompReadOnMSLOperationCompleted
            End If
            Me.InvokeAsync("CompReadOnMSL", New Object() {JobID, PCBA, Loc}, Me.CompReadOnMSLOperationCompleted, userState)
        End Sub
        
        Private Sub OnCompReadOnMSLOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompReadOnMSLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CompReadOnMSLCompleted(Me, New CompReadOnMSLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/WIP121PVI", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIP121PVI(ByVal dsResult As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WIP121PVI", New Object() {dsResult})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIP121PVIAsync(ByVal dsResult As System.Data.DataSet)
            Me.WIP121PVIAsync(dsResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIP121PVIAsync(ByVal dsResult As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIP121PVIOperationCompleted Is Nothing) Then
                Me.WIP121PVIOperationCompleted = AddressOf Me.OnWIP121PVIOperationCompleted
            End If
            Me.InvokeAsync("WIP121PVI", New Object() {dsResult}, Me.WIP121PVIOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIP121PVIOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIP121PVICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIP121PVICompleted(Me, New WIP121PVICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/UpdateDualFlag", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDualFlag(ByVal JobID As String, ByVal Flag As String) As String
            Dim results() As Object = Me.Invoke("UpdateDualFlag", New Object() {JobID, Flag})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDualFlagAsync(ByVal JobID As String, ByVal Flag As String)
            Me.UpdateDualFlagAsync(JobID, Flag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDualFlagAsync(ByVal JobID As String, ByVal Flag As String, ByVal userState As Object)
            If (Me.UpdateDualFlagOperationCompleted Is Nothing) Then
                Me.UpdateDualFlagOperationCompleted = AddressOf Me.OnUpdateDualFlagOperationCompleted
            End If
            Me.InvokeAsync("UpdateDualFlag", New Object() {JobID, Flag}, Me.UpdateDualFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDualFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDualFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDualFlagCompleted(Me, New UpdateDualFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/WIP121PVI_AOISPI1", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIP121PVI_AOISPI1(ByVal ds As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WIP121PVI_AOISPI1", New Object() {ds})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIP121PVI_AOISPI1Async(ByVal ds As System.Data.DataSet)
            Me.WIP121PVI_AOISPI1Async(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIP121PVI_AOISPI1Async(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIP121PVI_AOISPI1OperationCompleted Is Nothing) Then
                Me.WIP121PVI_AOISPI1OperationCompleted = AddressOf Me.OnWIP121PVI_AOISPI1OperationCompleted
            End If
            Me.InvokeAsync("WIP121PVI_AOISPI1", New Object() {ds}, Me.WIP121PVI_AOISPI1OperationCompleted, userState)
        End Sub
        
        Private Sub OnWIP121PVI_AOISPI1OperationCompleted(ByVal arg As Object)
            If (Not (Me.WIP121PVI_AOISPI1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIP121PVI_AOISPI1Completed(Me, New WIP121PVI_AOISPI1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/WIP121MI", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIP121MI(ByVal DSMI As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WIP121MI", New Object() {DSMI})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIP121MIAsync(ByVal DSMI As System.Data.DataSet)
            Me.WIP121MIAsync(DSMI, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIP121MIAsync(ByVal DSMI As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIP121MIOperationCompleted Is Nothing) Then
                Me.WIP121MIOperationCompleted = AddressOf Me.OnWIP121MIOperationCompleted
            End If
            Me.InvokeAsync("WIP121MI", New Object() {DSMI}, Me.WIP121MIOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIP121MIOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIP121MICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIP121MICompleted(Me, New WIP121MICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PanelIDSwop", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PanelIDSwop(ByVal OriID As String, ByVal NewID As String, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("PanelIDSwop", New Object() {OriID, NewID, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PanelIDSwopAsync(ByVal OriID As String, ByVal NewID As String, ByVal User As String)
            Me.PanelIDSwopAsync(OriID, NewID, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PanelIDSwopAsync(ByVal OriID As String, ByVal NewID As String, ByVal User As String, ByVal userState As Object)
            If (Me.PanelIDSwopOperationCompleted Is Nothing) Then
                Me.PanelIDSwopOperationCompleted = AddressOf Me.OnPanelIDSwopOperationCompleted
            End If
            Me.InvokeAsync("PanelIDSwop", New Object() {OriID, NewID, User}, Me.PanelIDSwopOperationCompleted, userState)
        End Sub
        
        Private Sub OnPanelIDSwopOperationCompleted(ByVal arg As Object)
            If (Not (Me.PanelIDSwopCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PanelIDSwopCompleted(Me, New PanelIDSwopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/MIJobReadByEqu", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MIJobReadByEqu(ByVal EquID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MIJobReadByEqu", New Object() {EquID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MIJobReadByEquAsync(ByVal EquID As String)
            Me.MIJobReadByEquAsync(EquID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MIJobReadByEquAsync(ByVal EquID As String, ByVal userState As Object)
            If (Me.MIJobReadByEquOperationCompleted Is Nothing) Then
                Me.MIJobReadByEquOperationCompleted = AddressOf Me.OnMIJobReadByEquOperationCompleted
            End If
            Me.InvokeAsync("MIJobReadByEqu", New Object() {EquID}, Me.MIJobReadByEquOperationCompleted, userState)
        End Sub
        
        Private Sub OnMIJobReadByEquOperationCompleted(ByVal arg As Object)
            If (Not (Me.MIJobReadByEquCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MIJobReadByEquCompleted(Me, New MIJobReadByEquCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/MIMatLoadList", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MIMatLoadList(ByVal JobID As String, ByVal PCBA As String, ByVal Proc As String, ByVal equ As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MIMatLoadList", New Object() {JobID, PCBA, Proc, equ})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MIMatLoadListAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Proc As String, ByVal equ As String)
            Me.MIMatLoadListAsync(JobID, PCBA, Proc, equ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MIMatLoadListAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Proc As String, ByVal equ As String, ByVal userState As Object)
            If (Me.MIMatLoadListOperationCompleted Is Nothing) Then
                Me.MIMatLoadListOperationCompleted = AddressOf Me.OnMIMatLoadListOperationCompleted
            End If
            Me.InvokeAsync("MIMatLoadList", New Object() {JobID, PCBA, Proc, equ}, Me.MIMatLoadListOperationCompleted, userState)
        End Sub
        
        Private Sub OnMIMatLoadListOperationCompleted(ByVal arg As Object)
            If (Not (Me.MIMatLoadListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MIMatLoadListCompleted(Me, New MIMatLoadListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/MIMatPendingList", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MIMatPendingList(ByVal JobID As String, ByVal PCBA As String, ByVal Proc As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MIMatPendingList", New Object() {JobID, PCBA, Proc})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MIMatPendingListAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Proc As String)
            Me.MIMatPendingListAsync(JobID, PCBA, Proc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MIMatPendingListAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Proc As String, ByVal userState As Object)
            If (Me.MIMatPendingListOperationCompleted Is Nothing) Then
                Me.MIMatPendingListOperationCompleted = AddressOf Me.OnMIMatPendingListOperationCompleted
            End If
            Me.InvokeAsync("MIMatPendingList", New Object() {JobID, PCBA, Proc}, Me.MIMatPendingListOperationCompleted, userState)
        End Sub
        
        Private Sub OnMIMatPendingListOperationCompleted(ByVal arg As Object)
            If (Not (Me.MIMatPendingListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MIMatPendingListCompleted(Me, New MIMatPendingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/MICompInfo", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MICompInfo(ByVal CompID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MICompInfo", New Object() {CompID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MICompInfoAsync(ByVal CompID As String)
            Me.MICompInfoAsync(CompID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MICompInfoAsync(ByVal CompID As String, ByVal userState As Object)
            If (Me.MICompInfoOperationCompleted Is Nothing) Then
                Me.MICompInfoOperationCompleted = AddressOf Me.OnMICompInfoOperationCompleted
            End If
            Me.InvokeAsync("MICompInfo", New Object() {CompID}, Me.MICompInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnMICompInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.MICompInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MICompInfoCompleted(Me, New MICompInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/MIPCBAInfo", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MIPCBAInfo(ByVal CompID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MIPCBAInfo", New Object() {CompID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MIPCBAInfoAsync(ByVal CompID As String)
            Me.MIPCBAInfoAsync(CompID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MIPCBAInfoAsync(ByVal CompID As String, ByVal userState As Object)
            If (Me.MIPCBAInfoOperationCompleted Is Nothing) Then
                Me.MIPCBAInfoOperationCompleted = AddressOf Me.OnMIPCBAInfoOperationCompleted
            End If
            Me.InvokeAsync("MIPCBAInfo", New Object() {CompID}, Me.MIPCBAInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnMIPCBAInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.MIPCBAInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MIPCBAInfoCompleted(Me, New MIPCBAInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/MILoadAndUnload", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MILoadAndUnload(ByVal CompID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal Circuit As String, ByVal Comp As String, ByVal equ As String, ByVal user As String, ByVal isMat As String, ByVal load As String) As String
            Dim results() As Object = Me.Invoke("MILoadAndUnload", New Object() {CompID, JobID, PCBA, Process, Circuit, Comp, equ, user, isMat, load})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MILoadAndUnloadAsync(ByVal CompID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal Circuit As String, ByVal Comp As String, ByVal equ As String, ByVal user As String, ByVal isMat As String, ByVal load As String)
            Me.MILoadAndUnloadAsync(CompID, JobID, PCBA, Process, Circuit, Comp, equ, user, isMat, load, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MILoadAndUnloadAsync(ByVal CompID As String, ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal Circuit As String, ByVal Comp As String, ByVal equ As String, ByVal user As String, ByVal isMat As String, ByVal load As String, ByVal userState As Object)
            If (Me.MILoadAndUnloadOperationCompleted Is Nothing) Then
                Me.MILoadAndUnloadOperationCompleted = AddressOf Me.OnMILoadAndUnloadOperationCompleted
            End If
            Me.InvokeAsync("MILoadAndUnload", New Object() {CompID, JobID, PCBA, Process, Circuit, Comp, equ, user, isMat, load}, Me.MILoadAndUnloadOperationCompleted, userState)
        End Sub
        
        Private Sub OnMILoadAndUnloadOperationCompleted(ByVal arg As Object)
            If (Not (Me.MILoadAndUnloadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MILoadAndUnloadCompleted(Me, New MILoadAndUnloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetPanelPCBA", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPanelPCBA(ByVal PanelID As String) As String
            Dim results() As Object = Me.Invoke("GetPanelPCBA", New Object() {PanelID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPanelPCBAAsync(ByVal PanelID As String)
            Me.GetPanelPCBAAsync(PanelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPanelPCBAAsync(ByVal PanelID As String, ByVal userState As Object)
            If (Me.GetPanelPCBAOperationCompleted Is Nothing) Then
                Me.GetPanelPCBAOperationCompleted = AddressOf Me.OnGetPanelPCBAOperationCompleted
            End If
            Me.InvokeAsync("GetPanelPCBA", New Object() {PanelID}, Me.GetPanelPCBAOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPanelPCBAOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPanelPCBACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPanelPCBACompleted(Me, New GetPanelPCBACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/ErrorLogging", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ErrorLogging(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ErrorLogging", New Object() {ModuleName, User, ErrMsg})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ErrorLoggingAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String)
            Me.ErrorLoggingAsync(ModuleName, User, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ErrorLoggingAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ErrorLoggingOperationCompleted Is Nothing) Then
                Me.ErrorLoggingOperationCompleted = AddressOf Me.OnErrorLoggingOperationCompleted
            End If
            Me.InvokeAsync("ErrorLogging", New Object() {ModuleName, User, ErrMsg}, Me.ErrorLoggingOperationCompleted, userState)
        End Sub
        
        Private Sub OnErrorLoggingOperationCompleted(ByVal arg As Object)
            If (Not (Me.ErrorLoggingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ErrorLoggingCompleted(Me, New ErrorLoggingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/ErrorLog", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ErrorLog(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal Category As String) As Boolean
            Dim results() As Object = Me.Invoke("ErrorLog", New Object() {ModuleName, User, ErrMsg, Category})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ErrorLogAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal Category As String)
            Me.ErrorLogAsync(ModuleName, User, ErrMsg, Category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ErrorLogAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal Category As String, ByVal userState As Object)
            If (Me.ErrorLogOperationCompleted Is Nothing) Then
                Me.ErrorLogOperationCompleted = AddressOf Me.OnErrorLogOperationCompleted
            End If
            Me.InvokeAsync("ErrorLog", New Object() {ModuleName, User, ErrMsg, Category}, Me.ErrorLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnErrorLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.ErrorLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ErrorLogCompleted(Me, New ErrorLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CheckJobStatus", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckJobStatus(ByVal JobID As String, ByVal Action As String, ByVal PCBA As String, ByVal Process As String, ByVal Equipment As String, ByVal lineType As String, ByVal ff As Integer, ByVal prodLine As String, ByVal processType As String, ByVal familyPanel As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckJobStatus", New Object() {JobID, Action, PCBA, Process, Equipment, lineType, ff, prodLine, processType, familyPanel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckJobStatusAsync(ByVal JobID As String, ByVal Action As String, ByVal PCBA As String, ByVal Process As String, ByVal Equipment As String, ByVal lineType As String, ByVal ff As Integer, ByVal prodLine As String, ByVal processType As String, ByVal familyPanel As Integer)
            Me.CheckJobStatusAsync(JobID, Action, PCBA, Process, Equipment, lineType, ff, prodLine, processType, familyPanel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckJobStatusAsync(ByVal JobID As String, ByVal Action As String, ByVal PCBA As String, ByVal Process As String, ByVal Equipment As String, ByVal lineType As String, ByVal ff As Integer, ByVal prodLine As String, ByVal processType As String, ByVal familyPanel As Integer, ByVal userState As Object)
            If (Me.CheckJobStatusOperationCompleted Is Nothing) Then
                Me.CheckJobStatusOperationCompleted = AddressOf Me.OnCheckJobStatusOperationCompleted
            End If
            Me.InvokeAsync("CheckJobStatus", New Object() {JobID, Action, PCBA, Process, Equipment, lineType, ff, prodLine, processType, familyPanel}, Me.CheckJobStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckJobStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckJobStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckJobStatusCompleted(Me, New CheckJobStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetComponentHeader", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetComponentHeader(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal equipment As String, ByVal circuitCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetComponentHeader", New Object() {jobID, pcba, process, equipment, circuitCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetComponentHeaderAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal equipment As String, ByVal circuitCode As String)
            Me.GetComponentHeaderAsync(jobID, pcba, process, equipment, circuitCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetComponentHeaderAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal equipment As String, ByVal circuitCode As String, ByVal userState As Object)
            If (Me.GetComponentHeaderOperationCompleted Is Nothing) Then
                Me.GetComponentHeaderOperationCompleted = AddressOf Me.OnGetComponentHeaderOperationCompleted
            End If
            Me.InvokeAsync("GetComponentHeader", New Object() {jobID, pcba, process, equipment, circuitCode}, Me.GetComponentHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetComponentHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetComponentHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetComponentHeaderCompleted(Me, New GetComponentHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetDJInfo", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDJInfo(ByVal DJ As String, ByVal orgCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDJInfo", New Object() {DJ, orgCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDJInfoAsync(ByVal DJ As String, ByVal orgCode As String)
            Me.GetDJInfoAsync(DJ, orgCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDJInfoAsync(ByVal DJ As String, ByVal orgCode As String, ByVal userState As Object)
            If (Me.GetDJInfoOperationCompleted Is Nothing) Then
                Me.GetDJInfoOperationCompleted = AddressOf Me.OnGetDJInfoOperationCompleted
            End If
            Me.InvokeAsync("GetDJInfo", New Object() {DJ, orgCode}, Me.GetDJInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDJInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDJInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDJInfoCompleted(Me, New GetDJInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetWIPHeaderInfoByDJ", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWIPHeaderInfoByDJ(ByVal DJ As String, ByVal orgCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWIPHeaderInfoByDJ", New Object() {DJ, orgCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWIPHeaderInfoByDJAsync(ByVal DJ As String, ByVal orgCode As String)
            Me.GetWIPHeaderInfoByDJAsync(DJ, orgCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWIPHeaderInfoByDJAsync(ByVal DJ As String, ByVal orgCode As String, ByVal userState As Object)
            If (Me.GetWIPHeaderInfoByDJOperationCompleted Is Nothing) Then
                Me.GetWIPHeaderInfoByDJOperationCompleted = AddressOf Me.OnGetWIPHeaderInfoByDJOperationCompleted
            End If
            Me.InvokeAsync("GetWIPHeaderInfoByDJ", New Object() {DJ, orgCode}, Me.GetWIPHeaderInfoByDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWIPHeaderInfoByDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWIPHeaderInfoByDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWIPHeaderInfoByDJCompleted(Me, New GetWIPHeaderInfoByDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetEquipment", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEquipment(ByVal equipmentID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEquipment", New Object() {equipmentID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEquipmentAsync(ByVal equipmentID As String)
            Me.GetEquipmentAsync(equipmentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEquipmentAsync(ByVal equipmentID As String, ByVal userState As Object)
            If (Me.GetEquipmentOperationCompleted Is Nothing) Then
                Me.GetEquipmentOperationCompleted = AddressOf Me.OnGetEquipmentOperationCompleted
            End If
            Me.InvokeAsync("GetEquipment", New Object() {equipmentID}, Me.GetEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEquipmentCompleted(Me, New GetEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetEquipmentsbyLine", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEquipmentsbyLine(ByVal ProdLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEquipmentsbyLine", New Object() {ProdLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEquipmentsbyLineAsync(ByVal ProdLine As String)
            Me.GetEquipmentsbyLineAsync(ProdLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEquipmentsbyLineAsync(ByVal ProdLine As String, ByVal userState As Object)
            If (Me.GetEquipmentsbyLineOperationCompleted Is Nothing) Then
                Me.GetEquipmentsbyLineOperationCompleted = AddressOf Me.OnGetEquipmentsbyLineOperationCompleted
            End If
            Me.InvokeAsync("GetEquipmentsbyLine", New Object() {ProdLine}, Me.GetEquipmentsbyLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEquipmentsbyLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEquipmentsbyLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEquipmentsbyLineCompleted(Me, New GetEquipmentsbyLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetEquipmentsbyCategory", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEquipmentsbyCategory(ByVal category As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEquipmentsbyCategory", New Object() {category})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEquipmentsbyCategoryAsync(ByVal category As String)
            Me.GetEquipmentsbyCategoryAsync(category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEquipmentsbyCategoryAsync(ByVal category As String, ByVal userState As Object)
            If (Me.GetEquipmentsbyCategoryOperationCompleted Is Nothing) Then
                Me.GetEquipmentsbyCategoryOperationCompleted = AddressOf Me.OnGetEquipmentsbyCategoryOperationCompleted
            End If
            Me.InvokeAsync("GetEquipmentsbyCategory", New Object() {category}, Me.GetEquipmentsbyCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEquipmentsbyCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEquipmentsbyCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEquipmentsbyCategoryCompleted(Me, New GetEquipmentsbyCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetAllEquipments", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllEquipments() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAllEquipments", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllEquipmentsAsync()
            Me.GetAllEquipmentsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllEquipmentsAsync(ByVal userState As Object)
            If (Me.GetAllEquipmentsOperationCompleted Is Nothing) Then
                Me.GetAllEquipmentsOperationCompleted = AddressOf Me.OnGetAllEquipmentsOperationCompleted
            End If
            Me.InvokeAsync("GetAllEquipments", New Object(-1) {}, Me.GetAllEquipmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllEquipmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllEquipmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllEquipmentsCompleted(Me, New GetAllEquipmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetStations", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStations(ByVal equipmentID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStations", New Object() {equipmentID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStationsAsync(ByVal equipmentID As String)
            Me.GetStationsAsync(equipmentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStationsAsync(ByVal equipmentID As String, ByVal userState As Object)
            If (Me.GetStationsOperationCompleted Is Nothing) Then
                Me.GetStationsOperationCompleted = AddressOf Me.OnGetStationsOperationCompleted
            End If
            Me.InvokeAsync("GetStations", New Object() {equipmentID}, Me.GetStationsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStationsCompleted(Me, New GetStationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetJobHeaders", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobHeaders(ByVal ProdLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobHeaders", New Object() {ProdLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobHeadersAsync(ByVal ProdLine As String)
            Me.GetJobHeadersAsync(ProdLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobHeadersAsync(ByVal ProdLine As String, ByVal userState As Object)
            If (Me.GetJobHeadersOperationCompleted Is Nothing) Then
                Me.GetJobHeadersOperationCompleted = AddressOf Me.OnGetJobHeadersOperationCompleted
            End If
            Me.InvokeAsync("GetJobHeaders", New Object() {ProdLine}, Me.GetJobHeadersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobHeadersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobHeadersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobHeadersCompleted(Me, New GetJobHeadersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetJobHeaders_CPLine", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobHeaders_CPLine(ByVal ProdLine As String, ByVal CPLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobHeaders_CPLine", New Object() {ProdLine, CPLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaders_CPLineAsync(ByVal ProdLine As String, ByVal CPLine As String)
            Me.GetJobHeaders_CPLineAsync(ProdLine, CPLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaders_CPLineAsync(ByVal ProdLine As String, ByVal CPLine As String, ByVal userState As Object)
            If (Me.GetJobHeaders_CPLineOperationCompleted Is Nothing) Then
                Me.GetJobHeaders_CPLineOperationCompleted = AddressOf Me.OnGetJobHeaders_CPLineOperationCompleted
            End If
            Me.InvokeAsync("GetJobHeaders_CPLine", New Object() {ProdLine, CPLine}, Me.GetJobHeaders_CPLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobHeaders_CPLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobHeaders_CPLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobHeaders_CPLineCompleted(Me, New GetJobHeaders_CPLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/SetupDJHeader", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetupDJHeader(ByVal orgCode As String, ByVal DJ As String, ByVal ProdLine As String, ByVal Model As String, ByVal PCBA As String, ByVal JobQty As Integer, ByVal DJQty As Integer, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("SetupDJHeader", New Object() {orgCode, DJ, ProdLine, Model, PCBA, JobQty, DJQty, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetupDJHeaderAsync(ByVal orgCode As String, ByVal DJ As String, ByVal ProdLine As String, ByVal Model As String, ByVal PCBA As String, ByVal JobQty As Integer, ByVal DJQty As Integer, ByVal User As String)
            Me.SetupDJHeaderAsync(orgCode, DJ, ProdLine, Model, PCBA, JobQty, DJQty, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetupDJHeaderAsync(ByVal orgCode As String, ByVal DJ As String, ByVal ProdLine As String, ByVal Model As String, ByVal PCBA As String, ByVal JobQty As Integer, ByVal DJQty As Integer, ByVal User As String, ByVal userState As Object)
            If (Me.SetupDJHeaderOperationCompleted Is Nothing) Then
                Me.SetupDJHeaderOperationCompleted = AddressOf Me.OnSetupDJHeaderOperationCompleted
            End If
            Me.InvokeAsync("SetupDJHeader", New Object() {orgCode, DJ, ProdLine, Model, PCBA, JobQty, DJQty, User}, Me.SetupDJHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetupDJHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetupDJHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetupDJHeaderCompleted(Me, New SetupDJHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/UpdateJobStatus", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateJobStatus(ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal Status As String, ByVal User As String, ByVal Equipment As String, ByVal prodLineType As String, ByVal lastStatus As String, ByVal isFF As Integer, ByVal processType As String, ByVal familyPanel As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("UpdateJobStatus", New Object() {JobID, PCBA, Process, Status, User, Equipment, prodLineType, lastStatus, isFF, processType, familyPanel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateJobStatusAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal Status As String, ByVal User As String, ByVal Equipment As String, ByVal prodLineType As String, ByVal lastStatus As String, ByVal isFF As Integer, ByVal processType As String, ByVal familyPanel As Integer)
            Me.UpdateJobStatusAsync(JobID, PCBA, Process, Status, User, Equipment, prodLineType, lastStatus, isFF, processType, familyPanel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateJobStatusAsync(ByVal JobID As String, ByVal PCBA As String, ByVal Process As String, ByVal Status As String, ByVal User As String, ByVal Equipment As String, ByVal prodLineType As String, ByVal lastStatus As String, ByVal isFF As Integer, ByVal processType As String, ByVal familyPanel As Integer, ByVal userState As Object)
            If (Me.UpdateJobStatusOperationCompleted Is Nothing) Then
                Me.UpdateJobStatusOperationCompleted = AddressOf Me.OnUpdateJobStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateJobStatus", New Object() {JobID, PCBA, Process, Status, User, Equipment, prodLineType, lastStatus, isFF, processType, familyPanel}, Me.UpdateJobStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateJobStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateJobStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateJobStatusCompleted(Me, New UpdateJobStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetJobItems", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobItems(ByVal JobID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobItems", New Object() {JobID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobItemsAsync(ByVal JobID As String)
            Me.GetJobItemsAsync(JobID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobItemsAsync(ByVal JobID As String, ByVal userState As Object)
            If (Me.GetJobItemsOperationCompleted Is Nothing) Then
                Me.GetJobItemsOperationCompleted = AddressOf Me.OnGetJobItemsOperationCompleted
            End If
            Me.InvokeAsync("GetJobItems", New Object() {JobID}, Me.GetJobItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobItemsCompleted(Me, New GetJobItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetJobItems_CPLine", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobItems_CPLine(ByVal JobID As String, ByVal CPLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobItems_CPLine", New Object() {JobID, CPLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobItems_CPLineAsync(ByVal JobID As String, ByVal CPLine As String)
            Me.GetJobItems_CPLineAsync(JobID, CPLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobItems_CPLineAsync(ByVal JobID As String, ByVal CPLine As String, ByVal userState As Object)
            If (Me.GetJobItems_CPLineOperationCompleted Is Nothing) Then
                Me.GetJobItems_CPLineOperationCompleted = AddressOf Me.OnGetJobItems_CPLineOperationCompleted
            End If
            Me.InvokeAsync("GetJobItems_CPLine", New Object() {JobID, CPLine}, Me.GetJobItems_CPLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobItems_CPLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobItems_CPLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobItems_CPLineCompleted(Me, New GetJobItems_CPLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/UpdateEquipment", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEquipment(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal equipment As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("UpdateEquipment", New Object() {jobID, pcba, process, equipment})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEquipmentAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal equipment As String)
            Me.UpdateEquipmentAsync(jobID, pcba, process, equipment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEquipmentAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal equipment As String, ByVal userState As Object)
            If (Me.UpdateEquipmentOperationCompleted Is Nothing) Then
                Me.UpdateEquipmentOperationCompleted = AddressOf Me.OnUpdateEquipmentOperationCompleted
            End If
            Me.InvokeAsync("UpdateEquipment", New Object() {jobID, pcba, process, equipment}, Me.UpdateEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEquipmentCompleted(Me, New UpdateEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CheckEquipment", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckEquipment(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal equipment As String, ByVal prodLineType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckEquipment", New Object() {jobID, pcba, process, equipment, prodLineType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckEquipmentAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal equipment As String, ByVal prodLineType As String)
            Me.CheckEquipmentAsync(jobID, pcba, process, equipment, prodLineType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckEquipmentAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal equipment As String, ByVal prodLineType As String, ByVal userState As Object)
            If (Me.CheckEquipmentOperationCompleted Is Nothing) Then
                Me.CheckEquipmentOperationCompleted = AddressOf Me.OnCheckEquipmentOperationCompleted
            End If
            Me.InvokeAsync("CheckEquipment", New Object() {jobID, pcba, process, equipment, prodLineType}, Me.CheckEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckEquipmentCompleted(Me, New CheckEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetMSL", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMSL(ByVal jobID As String, ByVal mode As Integer, ByVal model As String, ByVal pcba As String, ByVal process As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMSL", New Object() {jobID, mode, model, pcba, process})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMSLAsync(ByVal jobID As String, ByVal mode As Integer, ByVal model As String, ByVal pcba As String, ByVal process As String)
            Me.GetMSLAsync(jobID, mode, model, pcba, process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMSLAsync(ByVal jobID As String, ByVal mode As Integer, ByVal model As String, ByVal pcba As String, ByVal process As String, ByVal userState As Object)
            If (Me.GetMSLOperationCompleted Is Nothing) Then
                Me.GetMSLOperationCompleted = AddressOf Me.OnGetMSLOperationCompleted
            End If
            Me.InvokeAsync("GetMSL", New Object() {jobID, mode, model, pcba, process}, Me.GetMSLOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMSLOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMSLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMSLCompleted(Me, New GetMSLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/SaveMSL", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveMSL(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal user As String, ByVal prodLineType As String, ByVal xml As String, ByVal ff As Integer, ByVal processType As String, ByVal xmlDeletedMachines As String, ByVal xmlAddedMachines As String, ByVal familyPanel As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SaveMSL", New Object() {jobID, pcba, process, user, prodLineType, xml, ff, processType, xmlDeletedMachines, xmlAddedMachines, familyPanel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveMSLAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal user As String, ByVal prodLineType As String, ByVal xml As String, ByVal ff As Integer, ByVal processType As String, ByVal xmlDeletedMachines As String, ByVal xmlAddedMachines As String, ByVal familyPanel As Integer)
            Me.SaveMSLAsync(jobID, pcba, process, user, prodLineType, xml, ff, processType, xmlDeletedMachines, xmlAddedMachines, familyPanel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveMSLAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal user As String, ByVal prodLineType As String, ByVal xml As String, ByVal ff As Integer, ByVal processType As String, ByVal xmlDeletedMachines As String, ByVal xmlAddedMachines As String, ByVal familyPanel As Integer, ByVal userState As Object)
            If (Me.SaveMSLOperationCompleted Is Nothing) Then
                Me.SaveMSLOperationCompleted = AddressOf Me.OnSaveMSLOperationCompleted
            End If
            Me.InvokeAsync("SaveMSL", New Object() {jobID, pcba, process, user, prodLineType, xml, ff, processType, xmlDeletedMachines, xmlAddedMachines, familyPanel}, Me.SaveMSLOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveMSLOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveMSLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveMSLCompleted(Me, New SaveMSLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/SaveMSLforFF", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveMSLforFF(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal user As String, ByVal prodLineType As String, ByVal xml As String, ByVal ff As Integer, ByVal processType As String, ByVal xml2 As String, ByVal familyPanel As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SaveMSLforFF", New Object() {jobID, pcba, process, user, prodLineType, xml, ff, processType, xml2, familyPanel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveMSLforFFAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal user As String, ByVal prodLineType As String, ByVal xml As String, ByVal ff As Integer, ByVal processType As String, ByVal xml2 As String, ByVal familyPanel As Integer)
            Me.SaveMSLforFFAsync(jobID, pcba, process, user, prodLineType, xml, ff, processType, xml2, familyPanel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveMSLforFFAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal user As String, ByVal prodLineType As String, ByVal xml As String, ByVal ff As Integer, ByVal processType As String, ByVal xml2 As String, ByVal familyPanel As Integer, ByVal userState As Object)
            If (Me.SaveMSLforFFOperationCompleted Is Nothing) Then
                Me.SaveMSLforFFOperationCompleted = AddressOf Me.OnSaveMSLforFFOperationCompleted
            End If
            Me.InvokeAsync("SaveMSLforFF", New Object() {jobID, pcba, process, user, prodLineType, xml, ff, processType, xml2, familyPanel}, Me.SaveMSLforFFOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveMSLforFFOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveMSLforFFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveMSLforFFCompleted(Me, New SaveMSLforFFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CheckMSL", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckMSL(ByVal prodLineType As String, ByVal mode As Integer, ByVal xml As String, ByVal ff As Integer, ByVal prodLine As String, ByVal processType As String, ByVal jobID As String, ByVal pcba As String, ByVal process As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckMSL", New Object() {prodLineType, mode, xml, ff, prodLine, processType, jobID, pcba, process})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckMSLAsync(ByVal prodLineType As String, ByVal mode As Integer, ByVal xml As String, ByVal ff As Integer, ByVal prodLine As String, ByVal processType As String, ByVal jobID As String, ByVal pcba As String, ByVal process As String)
            Me.CheckMSLAsync(prodLineType, mode, xml, ff, prodLine, processType, jobID, pcba, process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckMSLAsync(ByVal prodLineType As String, ByVal mode As Integer, ByVal xml As String, ByVal ff As Integer, ByVal prodLine As String, ByVal processType As String, ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal userState As Object)
            If (Me.CheckMSLOperationCompleted Is Nothing) Then
                Me.CheckMSLOperationCompleted = AddressOf Me.OnCheckMSLOperationCompleted
            End If
            Me.InvokeAsync("CheckMSL", New Object() {prodLineType, mode, xml, ff, prodLine, processType, jobID, pcba, process}, Me.CheckMSLOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckMSLOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckMSLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckMSLCompleted(Me, New CheckMSLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CheckMSL_ForProcess", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckMSL_ForProcess(ByVal prodLineType As String, ByVal mode As Integer, ByVal jobID As String, ByVal pcba As String, ByVal process As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckMSL_ForProcess", New Object() {prodLineType, mode, jobID, pcba, process})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckMSL_ForProcessAsync(ByVal prodLineType As String, ByVal mode As Integer, ByVal jobID As String, ByVal pcba As String, ByVal process As String)
            Me.CheckMSL_ForProcessAsync(prodLineType, mode, jobID, pcba, process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckMSL_ForProcessAsync(ByVal prodLineType As String, ByVal mode As Integer, ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal userState As Object)
            If (Me.CheckMSL_ForProcessOperationCompleted Is Nothing) Then
                Me.CheckMSL_ForProcessOperationCompleted = AddressOf Me.OnCheckMSL_ForProcessOperationCompleted
            End If
            Me.InvokeAsync("CheckMSL_ForProcess", New Object() {prodLineType, mode, jobID, pcba, process}, Me.CheckMSL_ForProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckMSL_ForProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckMSL_ForProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckMSL_ForProcessCompleted(Me, New CheckMSL_ForProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetProdLine", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProdLine(ByVal ProdLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProdLine", New Object() {ProdLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProdLineAsync(ByVal ProdLine As String)
            Me.GetProdLineAsync(ProdLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProdLineAsync(ByVal ProdLine As String, ByVal userState As Object)
            If (Me.GetProdLineOperationCompleted Is Nothing) Then
                Me.GetProdLineOperationCompleted = AddressOf Me.OnGetProdLineOperationCompleted
            End If
            Me.InvokeAsync("GetProdLine", New Object() {ProdLine}, Me.GetProdLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProdLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProdLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProdLineCompleted(Me, New GetProdLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetProductStructureByModel", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductStructureByModel(ByVal Model As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProductStructureByModel", New Object() {Model})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductStructureByModelAsync(ByVal Model As String)
            Me.GetProductStructureByModelAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductStructureByModelAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.GetProductStructureByModelOperationCompleted Is Nothing) Then
                Me.GetProductStructureByModelOperationCompleted = AddressOf Me.OnGetProductStructureByModelOperationCompleted
            End If
            Me.InvokeAsync("GetProductStructureByModel", New Object() {Model}, Me.GetProductStructureByModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductStructureByModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductStructureByModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductStructureByModelCompleted(Me, New GetProductStructureByModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetProductStructureByPCBA", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductStructureByPCBA(ByVal PCBA As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProductStructureByPCBA", New Object() {PCBA})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductStructureByPCBAAsync(ByVal PCBA As String)
            Me.GetProductStructureByPCBAAsync(PCBA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductStructureByPCBAAsync(ByVal PCBA As String, ByVal userState As Object)
            If (Me.GetProductStructureByPCBAOperationCompleted Is Nothing) Then
                Me.GetProductStructureByPCBAOperationCompleted = AddressOf Me.OnGetProductStructureByPCBAOperationCompleted
            End If
            Me.InvokeAsync("GetProductStructureByPCBA", New Object() {PCBA}, Me.GetProductStructureByPCBAOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductStructureByPCBAOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductStructureByPCBACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductStructureByPCBACompleted(Me, New GetProductStructureByPCBACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetProductStructureByModelAndPCBA", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductStructureByModelAndPCBA(ByVal model As String, ByVal pcba As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProductStructureByModelAndPCBA", New Object() {model, pcba})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductStructureByModelAndPCBAAsync(ByVal model As String, ByVal pcba As String)
            Me.GetProductStructureByModelAndPCBAAsync(model, pcba, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductStructureByModelAndPCBAAsync(ByVal model As String, ByVal pcba As String, ByVal userState As Object)
            If (Me.GetProductStructureByModelAndPCBAOperationCompleted Is Nothing) Then
                Me.GetProductStructureByModelAndPCBAOperationCompleted = AddressOf Me.OnGetProductStructureByModelAndPCBAOperationCompleted
            End If
            Me.InvokeAsync("GetProductStructureByModelAndPCBA", New Object() {model, pcba}, Me.GetProductStructureByModelAndPCBAOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductStructureByModelAndPCBAOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductStructureByModelAndPCBACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductStructureByModelAndPCBACompleted(Me, New GetProductStructureByModelAndPCBACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetMSLbyCircuitCode", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMSLbyCircuitCode(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal circuitcode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMSLbyCircuitCode", New Object() {jobID, pcba, process, circuitcode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMSLbyCircuitCodeAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal circuitcode As String)
            Me.GetMSLbyCircuitCodeAsync(jobID, pcba, process, circuitcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMSLbyCircuitCodeAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal circuitcode As String, ByVal userState As Object)
            If (Me.GetMSLbyCircuitCodeOperationCompleted Is Nothing) Then
                Me.GetMSLbyCircuitCodeOperationCompleted = AddressOf Me.OnGetMSLbyCircuitCodeOperationCompleted
            End If
            Me.InvokeAsync("GetMSLbyCircuitCode", New Object() {jobID, pcba, process, circuitcode}, Me.GetMSLbyCircuitCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMSLbyCircuitCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMSLbyCircuitCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMSLbyCircuitCodeCompleted(Me, New GetMSLbyCircuitCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/SaveMSLItem", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveMSLItem(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal circuitcode As String, ByVal component As String, ByVal usage As Double, ByVal station As String, ByVal user As String, ByVal mode As Integer, ByVal machine As String, ByVal supplyType As String, ByVal batchinput As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SaveMSLItem", New Object() {jobID, pcba, process, circuitcode, component, usage, station, user, mode, machine, supplyType, batchinput})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveMSLItemAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal circuitcode As String, ByVal component As String, ByVal usage As Double, ByVal station As String, ByVal user As String, ByVal mode As Integer, ByVal machine As String, ByVal supplyType As String, ByVal batchinput As Integer)
            Me.SaveMSLItemAsync(jobID, pcba, process, circuitcode, component, usage, station, user, mode, machine, supplyType, batchinput, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveMSLItemAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal circuitcode As String, ByVal component As String, ByVal usage As Double, ByVal station As String, ByVal user As String, ByVal mode As Integer, ByVal machine As String, ByVal supplyType As String, ByVal batchinput As Integer, ByVal userState As Object)
            If (Me.SaveMSLItemOperationCompleted Is Nothing) Then
                Me.SaveMSLItemOperationCompleted = AddressOf Me.OnSaveMSLItemOperationCompleted
            End If
            Me.InvokeAsync("SaveMSLItem", New Object() {jobID, pcba, process, circuitcode, component, usage, station, user, mode, machine, supplyType, batchinput}, Me.SaveMSLItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveMSLItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveMSLItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveMSLItemCompleted(Me, New SaveMSLItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/UpdateJobQty", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateJobQty(ByVal JobID As String, ByVal qty As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("UpdateJobQty", New Object() {JobID, qty})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateJobQtyAsync(ByVal JobID As String, ByVal qty As Integer)
            Me.UpdateJobQtyAsync(JobID, qty, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateJobQtyAsync(ByVal JobID As String, ByVal qty As Integer, ByVal userState As Object)
            If (Me.UpdateJobQtyOperationCompleted Is Nothing) Then
                Me.UpdateJobQtyOperationCompleted = AddressOf Me.OnUpdateJobQtyOperationCompleted
            End If
            Me.InvokeAsync("UpdateJobQty", New Object() {JobID, qty}, Me.UpdateJobQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateJobQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateJobQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateJobQtyCompleted(Me, New UpdateJobQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetSABatchInput", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSABatchInput(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal circuitCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSABatchInput", New Object() {jobID, pcba, process, circuitCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSABatchInputAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal circuitCode As String)
            Me.GetSABatchInputAsync(jobID, pcba, process, circuitCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSABatchInputAsync(ByVal jobID As String, ByVal pcba As String, ByVal process As String, ByVal circuitCode As String, ByVal userState As Object)
            If (Me.GetSABatchInputOperationCompleted Is Nothing) Then
                Me.GetSABatchInputOperationCompleted = AddressOf Me.OnGetSABatchInputOperationCompleted
            End If
            Me.InvokeAsync("GetSABatchInput", New Object() {jobID, pcba, process, circuitCode}, Me.GetSABatchInputOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSABatchInputOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSABatchInputCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSABatchInputCompleted(Me, New GetSABatchInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CheckJobQty", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckJobQty(ByVal dj As String, ByVal model As String, ByVal pcba As String, ByVal jobQty As Integer, ByVal djQty As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckJobQty", New Object() {dj, model, pcba, jobQty, djQty})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckJobQtyAsync(ByVal dj As String, ByVal model As String, ByVal pcba As String, ByVal jobQty As Integer, ByVal djQty As Integer)
            Me.CheckJobQtyAsync(dj, model, pcba, jobQty, djQty, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckJobQtyAsync(ByVal dj As String, ByVal model As String, ByVal pcba As String, ByVal jobQty As Integer, ByVal djQty As Integer, ByVal userState As Object)
            If (Me.CheckJobQtyOperationCompleted Is Nothing) Then
                Me.CheckJobQtyOperationCompleted = AddressOf Me.OnCheckJobQtyOperationCompleted
            End If
            Me.InvokeAsync("CheckJobQty", New Object() {dj, model, pcba, jobQty, djQty}, Me.CheckJobQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckJobQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckJobQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckJobQtyCompleted(Me, New CheckJobQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetJobItems_AI", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobItems_AI(ByVal jobID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobItems_AI", New Object() {jobID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobItems_AIAsync(ByVal jobID As String)
            Me.GetJobItems_AIAsync(jobID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobItems_AIAsync(ByVal jobID As String, ByVal userState As Object)
            If (Me.GetJobItems_AIOperationCompleted Is Nothing) Then
                Me.GetJobItems_AIOperationCompleted = AddressOf Me.OnGetJobItems_AIOperationCompleted
            End If
            Me.InvokeAsync("GetJobItems_AI", New Object() {jobID}, Me.GetJobItems_AIOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobItems_AIOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobItems_AICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobItems_AICompleted(Me, New GetJobItems_AICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetJobHeaders_AI", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobHeaders_AI(ByVal ProdLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobHeaders_AI", New Object() {ProdLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaders_AIAsync(ByVal ProdLine As String)
            Me.GetJobHeaders_AIAsync(ProdLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaders_AIAsync(ByVal ProdLine As String, ByVal userState As Object)
            If (Me.GetJobHeaders_AIOperationCompleted Is Nothing) Then
                Me.GetJobHeaders_AIOperationCompleted = AddressOf Me.OnGetJobHeaders_AIOperationCompleted
            End If
            Me.InvokeAsync("GetJobHeaders_AI", New Object() {ProdLine}, Me.GetJobHeaders_AIOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobHeaders_AIOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobHeaders_AICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobHeaders_AICompleted(Me, New GetJobHeaders_AICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetJobHeaders_SM", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobHeaders_SM(ByVal ProdLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobHeaders_SM", New Object() {ProdLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaders_SMAsync(ByVal ProdLine As String)
            Me.GetJobHeaders_SMAsync(ProdLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaders_SMAsync(ByVal ProdLine As String, ByVal userState As Object)
            If (Me.GetJobHeaders_SMOperationCompleted Is Nothing) Then
                Me.GetJobHeaders_SMOperationCompleted = AddressOf Me.OnGetJobHeaders_SMOperationCompleted
            End If
            Me.InvokeAsync("GetJobHeaders_SM", New Object() {ProdLine}, Me.GetJobHeaders_SMOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobHeaders_SMOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobHeaders_SMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobHeaders_SMCompleted(Me, New GetJobHeaders_SMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/JobReadByEqt", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function JobReadByEqt(ByVal p_EquipmentID As String, ByVal p_Operate As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("JobReadByEqt", New Object() {p_EquipmentID, p_Operate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub JobReadByEqtAsync(ByVal p_EquipmentID As String, ByVal p_Operate As String)
            Me.JobReadByEqtAsync(p_EquipmentID, p_Operate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub JobReadByEqtAsync(ByVal p_EquipmentID As String, ByVal p_Operate As String, ByVal userState As Object)
            If (Me.JobReadByEqtOperationCompleted Is Nothing) Then
                Me.JobReadByEqtOperationCompleted = AddressOf Me.OnJobReadByEqtOperationCompleted
            End If
            Me.InvokeAsync("JobReadByEqt", New Object() {p_EquipmentID, p_Operate}, Me.JobReadByEqtOperationCompleted, userState)
        End Sub
        
        Private Sub OnJobReadByEqtOperationCompleted(ByVal arg As Object)
            If (Not (Me.JobReadByEqtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent JobReadByEqtCompleted(Me, New JobReadByEqtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/AICompLoad", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AICompLoad(ByVal p_EquipmentID As String, ByVal p_SeqID As String, ByVal p_Operate As String, ByVal p_Operator As String) As String
            Dim results() As Object = Me.Invoke("AICompLoad", New Object() {p_EquipmentID, p_SeqID, p_Operate, p_Operator})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AICompLoadAsync(ByVal p_EquipmentID As String, ByVal p_SeqID As String, ByVal p_Operate As String, ByVal p_Operator As String)
            Me.AICompLoadAsync(p_EquipmentID, p_SeqID, p_Operate, p_Operator, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AICompLoadAsync(ByVal p_EquipmentID As String, ByVal p_SeqID As String, ByVal p_Operate As String, ByVal p_Operator As String, ByVal userState As Object)
            If (Me.AICompLoadOperationCompleted Is Nothing) Then
                Me.AICompLoadOperationCompleted = AddressOf Me.OnAICompLoadOperationCompleted
            End If
            Me.InvokeAsync("AICompLoad", New Object() {p_EquipmentID, p_SeqID, p_Operate, p_Operator}, Me.AICompLoadOperationCompleted, userState)
        End Sub
        
        Private Sub OnAICompLoadOperationCompleted(ByVal arg As Object)
            If (Not (Me.AICompLoadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AICompLoadCompleted(Me, New AICompLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/WIPout121", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPout121(ByVal p_Operator As String, ByVal p_EquipmentID As String, ByVal p_IntSN As String, ByVal p_CompID As String, ByVal p_IsFirstProcess As String) As String
            Dim results() As Object = Me.Invoke("WIPout121", New Object() {p_Operator, p_EquipmentID, p_IntSN, p_CompID, p_IsFirstProcess})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPout121Async(ByVal p_Operator As String, ByVal p_EquipmentID As String, ByVal p_IntSN As String, ByVal p_CompID As String, ByVal p_IsFirstProcess As String)
            Me.WIPout121Async(p_Operator, p_EquipmentID, p_IntSN, p_CompID, p_IsFirstProcess, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPout121Async(ByVal p_Operator As String, ByVal p_EquipmentID As String, ByVal p_IntSN As String, ByVal p_CompID As String, ByVal p_IsFirstProcess As String, ByVal userState As Object)
            If (Me.WIPout121OperationCompleted Is Nothing) Then
                Me.WIPout121OperationCompleted = AddressOf Me.OnWIPout121OperationCompleted
            End If
            Me.InvokeAsync("WIPout121", New Object() {p_Operator, p_EquipmentID, p_IntSN, p_CompID, p_IsFirstProcess}, Me.WIPout121OperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPout121OperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPout121CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPout121Completed(Me, New WIPout121CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GeneratedSEQListByEqt", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GeneratedSEQListByEqt(ByVal p_EquipmentID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GeneratedSEQListByEqt", New Object() {p_EquipmentID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GeneratedSEQListByEqtAsync(ByVal p_EquipmentID As String)
            Me.GeneratedSEQListByEqtAsync(p_EquipmentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GeneratedSEQListByEqtAsync(ByVal p_EquipmentID As String, ByVal userState As Object)
            If (Me.GeneratedSEQListByEqtOperationCompleted Is Nothing) Then
                Me.GeneratedSEQListByEqtOperationCompleted = AddressOf Me.OnGeneratedSEQListByEqtOperationCompleted
            End If
            Me.InvokeAsync("GeneratedSEQListByEqt", New Object() {p_EquipmentID}, Me.GeneratedSEQListByEqtOperationCompleted, userState)
        End Sub
        
        Private Sub OnGeneratedSEQListByEqtOperationCompleted(ByVal arg As Object)
            If (Not (Me.GeneratedSEQListByEqtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GeneratedSEQListByEqtCompleted(Me, New GeneratedSEQListByEqtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetRemainCompCount", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRemainCompCount(ByVal p_Model As String, ByVal p_JobID As String, ByVal p_PCBA As String, ByVal p_Process As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRemainCompCount", New Object() {p_Model, p_JobID, p_PCBA, p_Process})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRemainCompCountAsync(ByVal p_Model As String, ByVal p_JobID As String, ByVal p_PCBA As String, ByVal p_Process As String)
            Me.GetRemainCompCountAsync(p_Model, p_JobID, p_PCBA, p_Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRemainCompCountAsync(ByVal p_Model As String, ByVal p_JobID As String, ByVal p_PCBA As String, ByVal p_Process As String, ByVal userState As Object)
            If (Me.GetRemainCompCountOperationCompleted Is Nothing) Then
                Me.GetRemainCompCountOperationCompleted = AddressOf Me.OnGetRemainCompCountOperationCompleted
            End If
            Me.InvokeAsync("GetRemainCompCount", New Object() {p_Model, p_JobID, p_PCBA, p_Process}, Me.GetRemainCompCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRemainCompCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRemainCompCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRemainCompCountCompleted(Me, New GetRemainCompCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/SequenceGeneration", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SequenceGeneration(ByVal p_EquipmentID As String, ByVal p_AccessCardID As String, ByVal p_JobID As String, ByVal p_PCBA As String, ByVal p_Process As String, ByVal p_dtSeq As System.Data.DataTable) As String
            Dim results() As Object = Me.Invoke("SequenceGeneration", New Object() {p_EquipmentID, p_AccessCardID, p_JobID, p_PCBA, p_Process, p_dtSeq})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SequenceGenerationAsync(ByVal p_EquipmentID As String, ByVal p_AccessCardID As String, ByVal p_JobID As String, ByVal p_PCBA As String, ByVal p_Process As String, ByVal p_dtSeq As System.Data.DataTable)
            Me.SequenceGenerationAsync(p_EquipmentID, p_AccessCardID, p_JobID, p_PCBA, p_Process, p_dtSeq, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SequenceGenerationAsync(ByVal p_EquipmentID As String, ByVal p_AccessCardID As String, ByVal p_JobID As String, ByVal p_PCBA As String, ByVal p_Process As String, ByVal p_dtSeq As System.Data.DataTable, ByVal userState As Object)
            If (Me.SequenceGenerationOperationCompleted Is Nothing) Then
                Me.SequenceGenerationOperationCompleted = AddressOf Me.OnSequenceGenerationOperationCompleted
            End If
            Me.InvokeAsync("SequenceGeneration", New Object() {p_EquipmentID, p_AccessCardID, p_JobID, p_PCBA, p_Process, p_dtSeq}, Me.SequenceGenerationOperationCompleted, userState)
        End Sub
        
        Private Sub OnSequenceGenerationOperationCompleted(ByVal arg As Object)
            If (Not (Me.SequenceGenerationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SequenceGenerationCompleted(Me, New SequenceGenerationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PrintSEQs", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintSEQs(ByVal SEQs As System.Data.DataSet, ByVal strPCBA As String, ByVal DJ As String, ByVal JOBID As String, ByVal JOBSize As String, ByVal OrgCode As String, ByVal Process As String, ByVal Printer As String, ByVal intOldSeqCount As Integer) As Boolean
            Dim results() As Object = Me.Invoke("PrintSEQs", New Object() {SEQs, strPCBA, DJ, JOBID, JOBSize, OrgCode, Process, Printer, intOldSeqCount})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintSEQsAsync(ByVal SEQs As System.Data.DataSet, ByVal strPCBA As String, ByVal DJ As String, ByVal JOBID As String, ByVal JOBSize As String, ByVal OrgCode As String, ByVal Process As String, ByVal Printer As String, ByVal intOldSeqCount As Integer)
            Me.PrintSEQsAsync(SEQs, strPCBA, DJ, JOBID, JOBSize, OrgCode, Process, Printer, intOldSeqCount, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintSEQsAsync(ByVal SEQs As System.Data.DataSet, ByVal strPCBA As String, ByVal DJ As String, ByVal JOBID As String, ByVal JOBSize As String, ByVal OrgCode As String, ByVal Process As String, ByVal Printer As String, ByVal intOldSeqCount As Integer, ByVal userState As Object)
            If (Me.PrintSEQsOperationCompleted Is Nothing) Then
                Me.PrintSEQsOperationCompleted = AddressOf Me.OnPrintSEQsOperationCompleted
            End If
            Me.InvokeAsync("PrintSEQs", New Object() {SEQs, strPCBA, DJ, JOBID, JOBSize, OrgCode, Process, Printer, intOldSeqCount}, Me.PrintSEQsOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintSEQsOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintSEQsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintSEQsCompleted(Me, New PrintSEQsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PrintSEQ", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintSEQ(ByVal p_strSEQ As String, ByVal p_strPCBA As String, ByVal p_strDJ As String, ByVal p_strJOBID As String, ByVal p_strJOBSize As String, ByVal p_strOrgCode As String, ByVal p_strQty As String, ByVal p_strProcess As String, ByVal p_strPrinter As String, ByVal p_strRecDate As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintSEQ", New Object() {p_strSEQ, p_strPCBA, p_strDJ, p_strJOBID, p_strJOBSize, p_strOrgCode, p_strQty, p_strProcess, p_strPrinter, p_strRecDate})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintSEQAsync(ByVal p_strSEQ As String, ByVal p_strPCBA As String, ByVal p_strDJ As String, ByVal p_strJOBID As String, ByVal p_strJOBSize As String, ByVal p_strOrgCode As String, ByVal p_strQty As String, ByVal p_strProcess As String, ByVal p_strPrinter As String, ByVal p_strRecDate As String)
            Me.PrintSEQAsync(p_strSEQ, p_strPCBA, p_strDJ, p_strJOBID, p_strJOBSize, p_strOrgCode, p_strQty, p_strProcess, p_strPrinter, p_strRecDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintSEQAsync(ByVal p_strSEQ As String, ByVal p_strPCBA As String, ByVal p_strDJ As String, ByVal p_strJOBID As String, ByVal p_strJOBSize As String, ByVal p_strOrgCode As String, ByVal p_strQty As String, ByVal p_strProcess As String, ByVal p_strPrinter As String, ByVal p_strRecDate As String, ByVal userState As Object)
            If (Me.PrintSEQOperationCompleted Is Nothing) Then
                Me.PrintSEQOperationCompleted = AddressOf Me.OnPrintSEQOperationCompleted
            End If
            Me.InvokeAsync("PrintSEQ", New Object() {p_strSEQ, p_strPCBA, p_strDJ, p_strJOBID, p_strJOBSize, p_strOrgCode, p_strQty, p_strProcess, p_strPrinter, p_strRecDate}, Me.PrintSEQOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintSEQOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintSEQCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintSEQCompleted(Me, New PrintSEQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetStationByEqt", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStationByEqt(ByVal p_EqtID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStationByEqt", New Object() {p_EqtID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStationByEqtAsync(ByVal p_EqtID As String)
            Me.GetStationByEqtAsync(p_EqtID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStationByEqtAsync(ByVal p_EqtID As String, ByVal userState As Object)
            If (Me.GetStationByEqtOperationCompleted Is Nothing) Then
                Me.GetStationByEqtOperationCompleted = AddressOf Me.OnGetStationByEqtOperationCompleted
            End If
            Me.InvokeAsync("GetStationByEqt", New Object() {p_EqtID}, Me.GetStationByEqtOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStationByEqtOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStationByEqtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStationByEqtCompleted(Me, New GetStationByEqtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/CompLoad", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CompLoad(ByVal p_Operator As String, ByVal p_EquipmentID As String, ByVal p_dt As System.Data.DataTable) As String
            Dim results() As Object = Me.Invoke("CompLoad", New Object() {p_Operator, p_EquipmentID, p_dt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CompLoadAsync(ByVal p_Operator As String, ByVal p_EquipmentID As String, ByVal p_dt As System.Data.DataTable)
            Me.CompLoadAsync(p_Operator, p_EquipmentID, p_dt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CompLoadAsync(ByVal p_Operator As String, ByVal p_EquipmentID As String, ByVal p_dt As System.Data.DataTable, ByVal userState As Object)
            If (Me.CompLoadOperationCompleted Is Nothing) Then
                Me.CompLoadOperationCompleted = AddressOf Me.OnCompLoadOperationCompleted
            End If
            Me.InvokeAsync("CompLoad", New Object() {p_Operator, p_EquipmentID, p_dt}, Me.CompLoadOperationCompleted, userState)
        End Sub
        
        Private Sub OnCompLoadOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompLoadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CompLoadCompleted(Me, New CompLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/getMessageList", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMessageList(ByVal MessageCodeList As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMessageList", New Object() {MessageCodeList})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMessageListAsync(ByVal MessageCodeList As String)
            Me.getMessageListAsync(MessageCodeList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMessageListAsync(ByVal MessageCodeList As String, ByVal userState As Object)
            If (Me.getMessageListOperationCompleted Is Nothing) Then
                Me.getMessageListOperationCompleted = AddressOf Me.OngetMessageListOperationCompleted
            End If
            Me.InvokeAsync("getMessageList", New Object() {MessageCodeList}, Me.getMessageListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMessageListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMessageListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMessageListCompleted(Me, New getMessageListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PrevStationReadByProcess", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrevStationReadByProcess(ByVal Process As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PrevStationReadByProcess", New Object() {Process})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrevStationReadByProcessAsync(ByVal Process As String)
            Me.PrevStationReadByProcessAsync(Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrevStationReadByProcessAsync(ByVal Process As String, ByVal userState As Object)
            If (Me.PrevStationReadByProcessOperationCompleted Is Nothing) Then
                Me.PrevStationReadByProcessOperationCompleted = AddressOf Me.OnPrevStationReadByProcessOperationCompleted
            End If
            Me.InvokeAsync("PrevStationReadByProcess", New Object() {Process}, Me.PrevStationReadByProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrevStationReadByProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrevStationReadByProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrevStationReadByProcessCompleted(Me, New PrevStationReadByProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PublishPropertys", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PublishPropertys(ByVal ERPLogin As ERPLogin, ByVal LabelSEQ As LabelSEQ, ByVal UserData As UserData, ByVal AccessCard As AccessCard) As String
            Dim results() As Object = Me.Invoke("PublishPropertys", New Object() {ERPLogin, LabelSEQ, UserData, AccessCard})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PublishPropertysAsync(ByVal ERPLogin As ERPLogin, ByVal LabelSEQ As LabelSEQ, ByVal UserData As UserData, ByVal AccessCard As AccessCard)
            Me.PublishPropertysAsync(ERPLogin, LabelSEQ, UserData, AccessCard, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PublishPropertysAsync(ByVal ERPLogin As ERPLogin, ByVal LabelSEQ As LabelSEQ, ByVal UserData As UserData, ByVal AccessCard As AccessCard, ByVal userState As Object)
            If (Me.PublishPropertysOperationCompleted Is Nothing) Then
                Me.PublishPropertysOperationCompleted = AddressOf Me.OnPublishPropertysOperationCompleted
            End If
            Me.InvokeAsync("PublishPropertys", New Object() {ERPLogin, LabelSEQ, UserData, AccessCard}, Me.PublishPropertysOperationCompleted, userState)
        End Sub
        
        Private Sub OnPublishPropertysOperationCompleted(ByVal arg As Object)
            If (Not (Me.PublishPropertysCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PublishPropertysCompleted(Me, New PublishPropertysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/SMTCompTrace", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SMTCompTrace(ByVal PanelID As String, ByVal DJ As String, ByVal ProLine As String, ByVal InvOrg As String, ByVal ChangBy As String, ByVal OldPanelID As String) As String
            Dim results() As Object = Me.Invoke("SMTCompTrace", New Object() {PanelID, DJ, ProLine, InvOrg, ChangBy, OldPanelID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SMTCompTraceAsync(ByVal PanelID As String, ByVal DJ As String, ByVal ProLine As String, ByVal InvOrg As String, ByVal ChangBy As String, ByVal OldPanelID As String)
            Me.SMTCompTraceAsync(PanelID, DJ, ProLine, InvOrg, ChangBy, OldPanelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SMTCompTraceAsync(ByVal PanelID As String, ByVal DJ As String, ByVal ProLine As String, ByVal InvOrg As String, ByVal ChangBy As String, ByVal OldPanelID As String, ByVal userState As Object)
            If (Me.SMTCompTraceOperationCompleted Is Nothing) Then
                Me.SMTCompTraceOperationCompleted = AddressOf Me.OnSMTCompTraceOperationCompleted
            End If
            Me.InvokeAsync("SMTCompTrace", New Object() {PanelID, DJ, ProLine, InvOrg, ChangBy, OldPanelID}, Me.SMTCompTraceOperationCompleted, userState)
        End Sub
        
        Private Sub OnSMTCompTraceOperationCompleted(ByVal arg As Object)
            If (Not (Me.SMTCompTraceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SMTCompTraceCompleted(Me, New SMTCompTraceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/SMTCompTraceV2", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SMTCompTraceV2(ByVal p_PCBName As String, ByVal p_TraceID As String, ByVal DJ As String, ByVal ProLine As String, ByVal InvOrg As String, ByVal ChangBy As String, ByVal p_OldPanelName As String) As String
            Dim results() As Object = Me.Invoke("SMTCompTraceV2", New Object() {p_PCBName, p_TraceID, DJ, ProLine, InvOrg, ChangBy, p_OldPanelName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SMTCompTraceV2Async(ByVal p_PCBName As String, ByVal p_TraceID As String, ByVal DJ As String, ByVal ProLine As String, ByVal InvOrg As String, ByVal ChangBy As String, ByVal p_OldPanelName As String)
            Me.SMTCompTraceV2Async(p_PCBName, p_TraceID, DJ, ProLine, InvOrg, ChangBy, p_OldPanelName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SMTCompTraceV2Async(ByVal p_PCBName As String, ByVal p_TraceID As String, ByVal DJ As String, ByVal ProLine As String, ByVal InvOrg As String, ByVal ChangBy As String, ByVal p_OldPanelName As String, ByVal userState As Object)
            If (Me.SMTCompTraceV2OperationCompleted Is Nothing) Then
                Me.SMTCompTraceV2OperationCompleted = AddressOf Me.OnSMTCompTraceV2OperationCompleted
            End If
            Me.InvokeAsync("SMTCompTraceV2", New Object() {p_PCBName, p_TraceID, DJ, ProLine, InvOrg, ChangBy, p_OldPanelName}, Me.SMTCompTraceV2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSMTCompTraceV2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SMTCompTraceV2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SMTCompTraceV2Completed(Me, New SMTCompTraceV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetPCBTraceByCLID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPCBTraceByCLID(ByVal p_CLID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPCBTraceByCLID", New Object() {p_CLID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPCBTraceByCLIDAsync(ByVal p_CLID As String)
            Me.GetPCBTraceByCLIDAsync(p_CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPCBTraceByCLIDAsync(ByVal p_CLID As String, ByVal userState As Object)
            If (Me.GetPCBTraceByCLIDOperationCompleted Is Nothing) Then
                Me.GetPCBTraceByCLIDOperationCompleted = AddressOf Me.OnGetPCBTraceByCLIDOperationCompleted
            End If
            Me.InvokeAsync("GetPCBTraceByCLID", New Object() {p_CLID}, Me.GetPCBTraceByCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPCBTraceByCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPCBTraceByCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPCBTraceByCLIDCompleted(Me, New GetPCBTraceByCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/UpdatePCBTrace", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePCBTrace(ByVal Operation As String, ByVal Component As String, ByVal CLID As String, ByVal ChangedBy As String, ByVal p_dtTabel As System.Data.DataTable) As String
            Dim results() As Object = Me.Invoke("UpdatePCBTrace", New Object() {Operation, Component, CLID, ChangedBy, p_dtTabel})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePCBTraceAsync(ByVal Operation As String, ByVal Component As String, ByVal CLID As String, ByVal ChangedBy As String, ByVal p_dtTabel As System.Data.DataTable)
            Me.UpdatePCBTraceAsync(Operation, Component, CLID, ChangedBy, p_dtTabel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePCBTraceAsync(ByVal Operation As String, ByVal Component As String, ByVal CLID As String, ByVal ChangedBy As String, ByVal p_dtTabel As System.Data.DataTable, ByVal userState As Object)
            If (Me.UpdatePCBTraceOperationCompleted Is Nothing) Then
                Me.UpdatePCBTraceOperationCompleted = AddressOf Me.OnUpdatePCBTraceOperationCompleted
            End If
            Me.InvokeAsync("UpdatePCBTrace", New Object() {Operation, Component, CLID, ChangedBy, p_dtTabel}, Me.UpdatePCBTraceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePCBTraceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePCBTraceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePCBTraceCompleted(Me, New UpdatePCBTraceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetAllTBACLID", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllTBACLID() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAllTBACLID", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllTBACLIDAsync()
            Me.GetAllTBACLIDAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllTBACLIDAsync(ByVal userState As Object)
            If (Me.GetAllTBACLIDOperationCompleted Is Nothing) Then
                Me.GetAllTBACLIDOperationCompleted = AddressOf Me.OnGetAllTBACLIDOperationCompleted
            End If
            Me.InvokeAsync("GetAllTBACLID", New Object(-1) {}, Me.GetAllTBACLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllTBACLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllTBACLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllTBACLIDCompleted(Me, New GetAllTBACLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetPdtStureByChildItem", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPdtStureByChildItem(ByVal p_Operation As String, ByVal p_ChildItem As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPdtStureByChildItem", New Object() {p_Operation, p_ChildItem})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPdtStureByChildItemAsync(ByVal p_Operation As String, ByVal p_ChildItem As String)
            Me.GetPdtStureByChildItemAsync(p_Operation, p_ChildItem, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPdtStureByChildItemAsync(ByVal p_Operation As String, ByVal p_ChildItem As String, ByVal userState As Object)
            If (Me.GetPdtStureByChildItemOperationCompleted Is Nothing) Then
                Me.GetPdtStureByChildItemOperationCompleted = AddressOf Me.OnGetPdtStureByChildItemOperationCompleted
            End If
            Me.InvokeAsync("GetPdtStureByChildItem", New Object() {p_Operation, p_ChildItem}, Me.GetPdtStureByChildItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPdtStureByChildItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPdtStureByChildItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPdtStureByChildItemCompleted(Me, New GetPdtStureByChildItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/PCBTraceReadByPCB", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PCBTraceReadByPCB(ByVal p_PCB As String, ByVal p_DateFrom As Date, ByVal p_DateTo As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PCBTraceReadByPCB", New Object() {p_PCB, p_DateFrom, p_DateTo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PCBTraceReadByPCBAsync(ByVal p_PCB As String, ByVal p_DateFrom As Date, ByVal p_DateTo As Date)
            Me.PCBTraceReadByPCBAsync(p_PCB, p_DateFrom, p_DateTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PCBTraceReadByPCBAsync(ByVal p_PCB As String, ByVal p_DateFrom As Date, ByVal p_DateTo As Date, ByVal userState As Object)
            If (Me.PCBTraceReadByPCBOperationCompleted Is Nothing) Then
                Me.PCBTraceReadByPCBOperationCompleted = AddressOf Me.OnPCBTraceReadByPCBOperationCompleted
            End If
            Me.InvokeAsync("PCBTraceReadByPCB", New Object() {p_PCB, p_DateFrom, p_DateTo}, Me.PCBTraceReadByPCBOperationCompleted, userState)
        End Sub
        
        Private Sub OnPCBTraceReadByPCBOperationCompleted(ByVal arg As Object)
            If (Not (Me.PCBTraceReadByPCBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PCBTraceReadByPCBCompleted(Me, New PCBTraceReadByPCBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOTOService.org/GetFixscanByPdLine", RequestNamespace:="http://eTraceOTOService.org/", ResponseNamespace:="http://eTraceOTOService.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFixscanByPdLine(ByVal ProdLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFixscanByPdLine", New Object() {ProdLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFixscanByPdLineAsync(ByVal ProdLine As String)
            Me.GetFixscanByPdLineAsync(ProdLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFixscanByPdLineAsync(ByVal ProdLine As String, ByVal userState As Object)
            If (Me.GetFixscanByPdLineOperationCompleted Is Nothing) Then
                Me.GetFixscanByPdLineOperationCompleted = AddressOf Me.OnGetFixscanByPdLineOperationCompleted
            End If
            Me.InvokeAsync("GetFixscanByPdLine", New Object() {ProdLine}, Me.GetFixscanByPdLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFixscanByPdLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFixscanByPdLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFixscanByPdLineCompleted(Me, New GetFixscanByPdLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOTOService.org/")>  _
    Partial Public Class Sa_Rst
        
        Private headerField As System.Data.DataSet
        
        Private dsSAField As System.Data.DataSet
        
        '''<remarks/>
        Public Property Header() As System.Data.DataSet
            Get
                Return Me.headerField
            End Get
            Set
                Me.headerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsSA() As System.Data.DataSet
            Get
                Return Me.dsSAField
            End Get
            Set
                Me.dsSAField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOTOService.org/")>  _
    Partial Public Class UserData
        
        Private userField As String
        
        Private firstNameField As String
        
        Private lastNameField As String
        
        Private orgIDField As String
        
        Private userIDField As String
        
        Private userTypeField As String
        
        Private userDeptField As String
        
        Private resetFlagField As Boolean
        
        Private appID_POField As String
        
        Private respID_POField As String
        
        Private appID_InvField As String
        
        Private respID_InvField As String
        
        Private appID_WIPField As String
        
        Private respID_WIPField As String
        
        Private appID_KBField As String
        
        Private respID_KBField As String
        
        Private printerField As String
        
        Private serverField As String
        
        Private propVersionField As String
        
        Private minClientVersionField As String
        
        Private recClientVersionField As String
        
        Private transactionIDField As System.Data.DataSet
        
        Private errorMsgField As String
        
        Private productionLineField As String
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrgID() As String
            Get
                Return Me.orgIDField
            End Get
            Set
                Me.orgIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserDept() As String
            Get
                Return Me.userDeptField
            End Get
            Set
                Me.userDeptField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ResetFlag() As Boolean
            Get
                Return Me.resetFlagField
            End Get
            Set
                Me.resetFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_PO() As String
            Get
                Return Me.appID_POField
            End Get
            Set
                Me.appID_POField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_PO() As String
            Get
                Return Me.respID_POField
            End Get
            Set
                Me.respID_POField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_Inv() As String
            Get
                Return Me.appID_InvField
            End Get
            Set
                Me.appID_InvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_Inv() As String
            Get
                Return Me.respID_InvField
            End Get
            Set
                Me.respID_InvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_WIP() As String
            Get
                Return Me.appID_WIPField
            End Get
            Set
                Me.appID_WIPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_WIP() As String
            Get
                Return Me.respID_WIPField
            End Get
            Set
                Me.respID_WIPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_KB() As String
            Get
                Return Me.appID_KBField
            End Get
            Set
                Me.appID_KBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_KB() As String
            Get
                Return Me.respID_KBField
            End Get
            Set
                Me.respID_KBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Printer() As String
            Get
                Return Me.printerField
            End Get
            Set
                Me.printerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Server() As String
            Get
                Return Me.serverField
            End Get
            Set
                Me.serverField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PropVersion() As String
            Get
                Return Me.propVersionField
            End Get
            Set
                Me.propVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MinClientVersion() As String
            Get
                Return Me.minClientVersionField
            End Get
            Set
                Me.minClientVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RecClientVersion() As String
            Get
                Return Me.recClientVersionField
            End Get
            Set
                Me.recClientVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TransactionID() As System.Data.DataSet
            Get
                Return Me.transactionIDField
            End Get
            Set
                Me.transactionIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorMsg() As String
            Get
                Return Me.errorMsgField
            End Get
            Set
                Me.errorMsgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProductionLine() As String
            Get
                Return Me.productionLineField
            End Get
            Set
                Me.productionLineField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOTOService.org/")>  _
    Partial Public Class LabelSEQ
        
        Private sEQIDField As String
        
        Private aSSYField As String
        
        Private djField As String
        
        Private jOBIDField As String
        
        Private jOBSizeField As String
        
        Private orgCodeField As String
        
        Private processField As String
        
        Private qtyField As String
        
        Private recDateField As String
        
        '''<remarks/>
        Public Property SEQID() As String
            Get
                Return Me.sEQIDField
            End Get
            Set
                Me.sEQIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ASSY() As String
            Get
                Return Me.aSSYField
            End Get
            Set
                Me.aSSYField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DJ() As String
            Get
                Return Me.djField
            End Get
            Set
                Me.djField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property JOBID() As String
            Get
                Return Me.jOBIDField
            End Get
            Set
                Me.jOBIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property JOBSize() As String
            Get
                Return Me.jOBSizeField
            End Get
            Set
                Me.jOBSizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrgCode() As String
            Get
                Return Me.orgCodeField
            End Get
            Set
                Me.orgCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Process() As String
            Get
                Return Me.processField
            End Get
            Set
                Me.processField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Qty() As String
            Get
                Return Me.qtyField
            End Get
            Set
                Me.qtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RecDate() As String
            Get
                Return Me.recDateField
            End Get
            Set
                Me.recDateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOTOService.org/")>  _
    Partial Public Class ERPLogin
        
        Private serverField As String
        
        Private userField As String
        
        Private pWDField As String
        
        Private orgCodeField As String
        
        Private orgIDField As String
        
        Private applicationField As String
        
        Private userIDField As String
        
        Private userTypeField As String
        
        Private userDeptField As String
        
        Private resetFlagField As Boolean
        
        Private printerField As String
        
        Private errorMsgField As String
        
        Private appID_POField As String
        
        Private respID_POField As String
        
        Private appID_InvField As String
        
        Private respID_InvField As String
        
        Private appID_WIPField As String
        
        Private respID_WIPField As String
        
        Private appID_KBField As String
        
        Private respID_KBField As String
        
        Private clientVersionField As String
        
        Private productionLineField As String
        
        '''<remarks/>
        Public Property Server() As String
            Get
                Return Me.serverField
            End Get
            Set
                Me.serverField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PWD() As String
            Get
                Return Me.pWDField
            End Get
            Set
                Me.pWDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrgCode() As String
            Get
                Return Me.orgCodeField
            End Get
            Set
                Me.orgCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrgID() As String
            Get
                Return Me.orgIDField
            End Get
            Set
                Me.orgIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Application() As String
            Get
                Return Me.applicationField
            End Get
            Set
                Me.applicationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserDept() As String
            Get
                Return Me.userDeptField
            End Get
            Set
                Me.userDeptField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ResetFlag() As Boolean
            Get
                Return Me.resetFlagField
            End Get
            Set
                Me.resetFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Printer() As String
            Get
                Return Me.printerField
            End Get
            Set
                Me.printerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorMsg() As String
            Get
                Return Me.errorMsgField
            End Get
            Set
                Me.errorMsgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_PO() As String
            Get
                Return Me.appID_POField
            End Get
            Set
                Me.appID_POField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_PO() As String
            Get
                Return Me.respID_POField
            End Get
            Set
                Me.respID_POField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_Inv() As String
            Get
                Return Me.appID_InvField
            End Get
            Set
                Me.appID_InvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_Inv() As String
            Get
                Return Me.respID_InvField
            End Get
            Set
                Me.respID_InvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_WIP() As String
            Get
                Return Me.appID_WIPField
            End Get
            Set
                Me.appID_WIPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_WIP() As String
            Get
                Return Me.respID_WIPField
            End Get
            Set
                Me.respID_WIPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_KB() As String
            Get
                Return Me.appID_KBField
            End Get
            Set
                Me.appID_KBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_KB() As String
            Get
                Return Me.respID_KBField
            End Get
            Set
                Me.respID_KBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ClientVersion() As String
            Get
                Return Me.clientVersionField
            End Get
            Set
                Me.clientVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProductionLine() As String
            Get
                Return Me.productionLineField
            End Get
            Set
                Me.productionLineField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOTOService.org/")>  _
    Partial Public Class AccessCard
        
        Private accessCardIDField As String
        
        Private emplogeeIDField As String
        
        Private nameField As String
        
        Private deptField As String
        
        Private clientVersionField As String
        
        Private minClientVersionField As String
        
        '''<remarks/>
        Public Property AccessCardID() As String
            Get
                Return Me.accessCardIDField
            End Get
            Set
                Me.accessCardIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmplogeeID() As String
            Get
                Return Me.emplogeeIDField
            End Get
            Set
                Me.emplogeeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Dept() As String
            Get
                Return Me.deptField
            End Get
            Set
                Me.deptField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ClientVersion() As String
            Get
                Return Me.clientVersionField
            End Get
            Set
                Me.clientVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MinClientVersion() As String
            Get
                Return Me.minClientVersionField
            End Get
            Set
                Me.minClientVersionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOTOService.org/")>  _
    Partial Public Class TrayPost_Rst
        
        Private errMsgField As String
        
        Private intSNField As String
        
        Private cntField As Integer
        
        '''<remarks/>
        Public Property ErrMsg() As String
            Get
                Return Me.errMsgField
            End Get
            Set
                Me.errMsgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IntSN() As String
            Get
                Return Me.intSNField
            End Get
            Set
                Me.intSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Cnt() As Integer
            Get
                Return Me.cntField
            End Get
            Set
                Me.cntField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOTOService.org/")>  _
    Partial Public Class IntSNInform
        
        Private dsIntSNField As System.Data.DataSet
        
        Private dsTrayIDField As System.Data.DataSet
        
        Private errMsgField As Integer
        
        '''<remarks/>
        Public Property dsIntSN() As System.Data.DataSet
            Get
                Return Me.dsIntSNField
            End Get
            Set
                Me.dsIntSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsTrayID() As System.Data.DataSet
            Get
                Return Me.dsTrayIDField
            End Get
            Set
                Me.dsTrayIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrMsg() As Integer
            Get
                Return Me.errMsgField
            End Get
            Set
                Me.errMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetManualPlacementUnitByDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetManualPlacementUnitByDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetManualPlacementUnitByDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ManualPlacementCompletedEventHandler(ByVal sender As Object, ByVal e As ManualPlacementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ManualPlacementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMaterialInfoReadByCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaterialInfoReadByCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaterialInfoReadByCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ShowMessageCompletedEventHandler(ByVal sender As Object, ByVal e As ShowMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShowMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobHeaderByProdLineCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobHeaderByProdLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobHeaderByProdLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateCompHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCompHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCompHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetComploadStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetComploadStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetComploadStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetComploadStatusByCompIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetComploadStatusByCompIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetComploadStatusByCompIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetStatusByProductLineCompletedEventHandler(ByVal sender As Object, ByVal e As GetStatusByProductLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStatusByProductLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetConsumedQtyOfCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetConsumedQtyOfCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConsumedQtyOfCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMiStationInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMiStationInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMiStationInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Sa_Rst
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Sa_Rst)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckIntSN_LoadStatusCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIntSN_LoadStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIntSN_LoadStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetIntSNInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetIntSNInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIntSNInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As IntSNInform
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),IntSNInform)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetTrayInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetTrayInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTrayInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Tray_BatchInput_ChangeJobIDCompletedEventHandler(ByVal sender As Object, ByVal e As Tray_BatchInput_ChangeJobIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Tray_BatchInput_ChangeJobIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TrayPost_Rst
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TrayPost_Rst)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Valid_Save_BatchInput_ChangeJobIDCompletedEventHandler(ByVal sender As Object, ByVal e As Valid_Save_BatchInput_ChangeJobIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Valid_Save_BatchInput_ChangeJobIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UnloadIntSNCompletedEventHandler(ByVal sender As Object, ByVal e As UnloadIntSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnloadIntSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobHeaderByDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobHeaderByDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobHeaderByDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IsAuthMatchingFileCompletedEventHandler(ByVal sender As Object, ByVal e As IsAuthMatchingFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsAuthMatchingFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BoardsOnPCBByProcCompletedEventHandler(ByVal sender As Object, ByVal e As BoardsOnPCBByProcCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BoardsOnPCBByProcCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetOrgListsCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrgListsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrgListsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetLoginWayCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoginWayCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoginWayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As AccessCard
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),AccessCard)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAccessCardUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccessCardUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccessCardUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As AccessCard
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),AccessCard)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSysMessageCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrinterCheckCompletedEventHandler(ByVal sender As Object, ByVal e As PrinterCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrinterCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIP121DepanellingCompletedEventHandler(ByVal sender As Object, ByVal e As WIP121DepanellingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIP121DepanellingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateFeederCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFeederCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFeederCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetFeederInfoByIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetFeederInfoByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFeederInfoByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub TEGetPartDataCompletedEventHandler(ByVal sender As Object, ByVal e As TEGetPartDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TEGetPartDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAegisDataByDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetAegisDataByDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAegisDataByDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAegisDataToTempTableByDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetAegisDataToTempTableByDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAegisDataToTempTableByDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAegisDataToTempTableByDateSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetAegisDataToTempTableByDateSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAegisDataToTempTableByDateSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAegisDataFromTempTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetAegisDataFromTempTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAegisDataFromTempTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAegisDataToTempTableByDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetAegisDataToTempTableByDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAegisDataToTempTableByDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAegisDataToTempTableBySNCompletedEventHandler(ByVal sender As Object, ByVal e As GetAegisDataToTempTableBySNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAegisDataToTempTableBySNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetConfigValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetConfigValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConfigValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateConfigValueCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateConfigValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateConfigValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetWipHeaderByIntSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetWipHeaderByIntSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWipHeaderByIntSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CopyDataByIntSNCompletedEventHandler(ByVal sender As Object, ByVal e As CopyDataByIntSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyDataByIntSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPout121_SMTCompletedEventHandler(ByVal sender As Object, ByVal e As WIPout121_SMTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPout121_SMTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SplIDGenerationCompletedEventHandler(ByVal sender As Object, ByVal e As SplIDGenerationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SplIDGenerationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SplReadByIDCompletedEventHandler(ByVal sender As Object, ByVal e As SplReadByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SplReadByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintSPLCompletedEventHandler(ByVal sender As Object, ByVal e As PrintSPLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintSPLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProcessByTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetProcessByTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProcessByTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub TrayIDSwopCompletedEventHandler(ByVal sender As Object, ByVal e As TrayIDSwopCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TrayIDSwopCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PCBListReadByTrayIDCompletedEventHandler(ByVal sender As Object, ByVal e As PCBListReadByTrayIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PCBListReadByTrayIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MIPreLoadReadByWIPIDCompletedEventHandler(ByVal sender As Object, ByVal e As MIPreLoadReadByWIPIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MIPreLoadReadByWIPIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MILoadByTrayCompletedEventHandler(ByVal sender As Object, ByVal e As MILoadByTrayCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MILoadByTrayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ProcessedQtyCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessedQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessedQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub JobItemQtyCompletedEventHandler(ByVal sender As Object, ByVal e As JobItemQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class JobItemQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetWIPFlowCompletedEventHandler(ByVal sender As Object, ByVal e As GetWIPFlowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWIPFlowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetWIPTDHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As GetWIPTDHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWIPTDHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIP121PVI_SiplaceCompletedEventHandler(ByVal sender As Object, ByVal e As WIP121PVI_SiplaceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIP121PVI_SiplaceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckPanelIDOrPCBIDforSealingCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPanelIDOrPCBIDforSealingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPanelIDOrPCBIDforSealingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckPanelIDOrPCBIDForUnsealingCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPanelIDOrPCBIDForUnsealingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPanelIDOrPCBIDForUnsealingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckPanelIDOrPCBIDForExtensionCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPanelIDOrPCBIDForExtensionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPanelIDOrPCBIDForExtensionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PCBFloorLifeExtensionCompletedEventHandler(ByVal sender As Object, ByVal e As PCBFloorLifeExtensionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PCBFloorLifeExtensionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PCBSealingCompletedEventHandler(ByVal sender As Object, ByVal e As PCBSealingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PCBSealingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveFileCompletedEventHandler(ByVal sender As Object, ByVal e As SaveFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property success() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PCBUnsealingCompletedEventHandler(ByVal sender As Object, ByVal e As PCBUnsealingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PCBUnsealingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSMTPanelInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMTPanelInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMTPanelInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IsAuthorizedPCBCompletedEventHandler(ByVal sender As Object, ByVal e As IsAuthorizedPCBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsAuthorizedPCBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateKanbanLabelCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateKanbanLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateKanbanLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub JobReadByProdLineCompletedEventHandler(ByVal sender As Object, ByVal e As JobReadByProdLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class JobReadByProdLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub StructureReadByPCBACompletedEventHandler(ByVal sender As Object, ByVal e As StructureReadByPCBACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StructureReadByPCBACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub FamilyPCBAListCompletedEventHandler(ByVal sender As Object, ByVal e As FamilyPCBAListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FamilyPCBAListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ChildISNIsValidCompletedEventHandler(ByVal sender As Object, ByVal e As ChildISNIsValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChildISNIsValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckChildISNIsValidCompletedEventHandler(ByVal sender As Object, ByVal e As CheckChildISNIsValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckChildISNIsValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MaterialInfoReadByCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As MaterialInfoReadByCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MaterialInfoReadByCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIP121MatchingCompletedEventHandler(ByVal sender As Object, ByVal e As WIP121MatchingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIP121MatchingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CLIDCurrentQtyCompletedEventHandler(ByVal sender As Object, ByVal e As CLIDCurrentQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CLIDCurrentQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PanelIDIsValidCompletedEventHandler(ByVal sender As Object, ByVal e As PanelIDIsValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PanelIDIsValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProductLineInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProductLineInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductLineInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PCBListReadByPanelIDCompletedEventHandler(ByVal sender As Object, ByVal e As PCBListReadByPanelIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PCBListReadByPanelIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CompReadOnMSLCompletedEventHandler(ByVal sender As Object, ByVal e As CompReadOnMSLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CompReadOnMSLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIP121PVICompletedEventHandler(ByVal sender As Object, ByVal e As WIP121PVICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIP121PVICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateDualFlagCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDualFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDualFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIP121PVI_AOISPI1CompletedEventHandler(ByVal sender As Object, ByVal e As WIP121PVI_AOISPI1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIP121PVI_AOISPI1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIP121MICompletedEventHandler(ByVal sender As Object, ByVal e As WIP121MICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIP121MICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PanelIDSwopCompletedEventHandler(ByVal sender As Object, ByVal e As PanelIDSwopCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PanelIDSwopCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MIJobReadByEquCompletedEventHandler(ByVal sender As Object, ByVal e As MIJobReadByEquCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MIJobReadByEquCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MIMatLoadListCompletedEventHandler(ByVal sender As Object, ByVal e As MIMatLoadListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MIMatLoadListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MIMatPendingListCompletedEventHandler(ByVal sender As Object, ByVal e As MIMatPendingListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MIMatPendingListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MICompInfoCompletedEventHandler(ByVal sender As Object, ByVal e As MICompInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MICompInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MIPCBAInfoCompletedEventHandler(ByVal sender As Object, ByVal e As MIPCBAInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MIPCBAInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MILoadAndUnloadCompletedEventHandler(ByVal sender As Object, ByVal e As MILoadAndUnloadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MILoadAndUnloadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPanelPCBACompletedEventHandler(ByVal sender As Object, ByVal e As GetPanelPCBACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPanelPCBACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ErrorLoggingCompletedEventHandler(ByVal sender As Object, ByVal e As ErrorLoggingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ErrorLoggingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ErrorLogCompletedEventHandler(ByVal sender As Object, ByVal e As ErrorLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ErrorLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckJobStatusCompletedEventHandler(ByVal sender As Object, ByVal e As CheckJobStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckJobStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetComponentHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As GetComponentHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetComponentHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDJInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetDJInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDJInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetWIPHeaderInfoByDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetWIPHeaderInfoByDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWIPHeaderInfoByDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As GetEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetEquipmentsbyLineCompletedEventHandler(ByVal sender As Object, ByVal e As GetEquipmentsbyLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEquipmentsbyLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetEquipmentsbyCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetEquipmentsbyCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEquipmentsbyCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAllEquipmentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllEquipmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllEquipmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetStationsCompletedEventHandler(ByVal sender As Object, ByVal e As GetStationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobHeadersCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobHeadersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobHeadersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobHeaders_CPLineCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobHeaders_CPLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobHeaders_CPLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SetupDJHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As SetupDJHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetupDJHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateJobStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateJobStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateJobStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobItems_CPLineCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobItems_CPLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobItems_CPLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As CheckEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMSLCompletedEventHandler(ByVal sender As Object, ByVal e As GetMSLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMSLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveMSLCompletedEventHandler(ByVal sender As Object, ByVal e As SaveMSLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveMSLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveMSLforFFCompletedEventHandler(ByVal sender As Object, ByVal e As SaveMSLforFFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveMSLforFFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckMSLCompletedEventHandler(ByVal sender As Object, ByVal e As CheckMSLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckMSLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckMSL_ForProcessCompletedEventHandler(ByVal sender As Object, ByVal e As CheckMSL_ForProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckMSL_ForProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProdLineCompletedEventHandler(ByVal sender As Object, ByVal e As GetProdLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProdLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProductStructureByModelCompletedEventHandler(ByVal sender As Object, ByVal e As GetProductStructureByModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductStructureByModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProductStructureByPCBACompletedEventHandler(ByVal sender As Object, ByVal e As GetProductStructureByPCBACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductStructureByPCBACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProductStructureByModelAndPCBACompletedEventHandler(ByVal sender As Object, ByVal e As GetProductStructureByModelAndPCBACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductStructureByModelAndPCBACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMSLbyCircuitCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetMSLbyCircuitCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMSLbyCircuitCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveMSLItemCompletedEventHandler(ByVal sender As Object, ByVal e As SaveMSLItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveMSLItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateJobQtyCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateJobQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateJobQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSABatchInputCompletedEventHandler(ByVal sender As Object, ByVal e As GetSABatchInputCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSABatchInputCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckJobQtyCompletedEventHandler(ByVal sender As Object, ByVal e As CheckJobQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckJobQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobItems_AICompletedEventHandler(ByVal sender As Object, ByVal e As GetJobItems_AICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobItems_AICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobHeaders_AICompletedEventHandler(ByVal sender As Object, ByVal e As GetJobHeaders_AICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobHeaders_AICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobHeaders_SMCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobHeaders_SMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobHeaders_SMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub JobReadByEqtCompletedEventHandler(ByVal sender As Object, ByVal e As JobReadByEqtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class JobReadByEqtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AICompLoadCompletedEventHandler(ByVal sender As Object, ByVal e As AICompLoadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AICompLoadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPout121CompletedEventHandler(ByVal sender As Object, ByVal e As WIPout121CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPout121CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GeneratedSEQListByEqtCompletedEventHandler(ByVal sender As Object, ByVal e As GeneratedSEQListByEqtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GeneratedSEQListByEqtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetRemainCompCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetRemainCompCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRemainCompCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SequenceGenerationCompletedEventHandler(ByVal sender As Object, ByVal e As SequenceGenerationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SequenceGenerationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintSEQsCompletedEventHandler(ByVal sender As Object, ByVal e As PrintSEQsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintSEQsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintSEQCompletedEventHandler(ByVal sender As Object, ByVal e As PrintSEQCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintSEQCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetStationByEqtCompletedEventHandler(ByVal sender As Object, ByVal e As GetStationByEqtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStationByEqtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CompLoadCompletedEventHandler(ByVal sender As Object, ByVal e As CompLoadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CompLoadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getMessageListCompletedEventHandler(ByVal sender As Object, ByVal e As getMessageListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMessageListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrevStationReadByProcessCompletedEventHandler(ByVal sender As Object, ByVal e As PrevStationReadByProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrevStationReadByProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PublishPropertysCompletedEventHandler(ByVal sender As Object, ByVal e As PublishPropertysCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PublishPropertysCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SMTCompTraceCompletedEventHandler(ByVal sender As Object, ByVal e As SMTCompTraceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SMTCompTraceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SMTCompTraceV2CompletedEventHandler(ByVal sender As Object, ByVal e As SMTCompTraceV2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SMTCompTraceV2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPCBTraceByCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetPCBTraceByCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPCBTraceByCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdatePCBTraceCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePCBTraceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePCBTraceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAllTBACLIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllTBACLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllTBACLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPdtStureByChildItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetPdtStureByChildItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPdtStureByChildItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PCBTraceReadByPCBCompletedEventHandler(ByVal sender As Object, ByVal e As PCBTraceReadByPCBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PCBTraceReadByPCBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetFixscanByPdLineCompletedEventHandler(ByVal sender As Object, ByVal e As GetFixscanByPdLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFixscanByPdLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace eTraceTDCService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="eTraceTDCServiceSoap", [Namespace]:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService")>  _
    Partial Public Class eTraceTDCService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadTestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderInfoFromSAPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderInfoFromOracleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubAmountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPoQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveTestResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SerialNoInUseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddlDataInUseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModelDefinedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCardInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccessCardUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadSerialNoFromDBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProductReworkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTestResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetModelInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ErrorLoggingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updateIDSwopOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadProductInfoByCPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRuleFromDBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private postProdMasterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelProdMasterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRepairCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveTDCRepairCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRepairDataBySerialNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBomFromSAPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSpecifySeatItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveRepairDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MatchingNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SerialNoIsAccessCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MatchingAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBoxQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBoxInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPalletInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPalletQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BoxExesistInPalletOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BoxInOtherPalletOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BoxHasOtherProdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadSDCartonsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadCartonIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveCartonIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveCartonIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipInfoBySNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipInfoByBoxIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveFlatFileMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveFlatFileSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckFlatFileSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePalletOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFlatfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFlatFilePropertiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setFlatFilePropertiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonInputOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExistsModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonActualQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonActualQtyofProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonFailedPercentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonFailedQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonLineStopTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonLineStopFreqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAndonProdScheOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAndonProdScheOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonProjectedQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private KillLargeReportsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TimeToGMTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintMacAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReprintMacAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPreMacAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLengthMacAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.eTrace_SFCFunction_.My.MySettings.Default.eTrace_SFCFunction__eTraceTDCService_eTraceTDCService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetResultCompleted As GetResultCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadTestDataCompleted As ReadTestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderInfoFromSAPCompleted As GetOrderInfoFromSAPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderInfoFromOracleCompleted As GetOrderInfoFromOracleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubAmountCompleted As GetSubAmountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPoQtyCompleted As GetPoQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveTestResultCompleted As SaveTestResultCompletedEventHandler
        
        '''<remarks/>
        Public Event SerialNoInUseCompleted As SerialNoInUseCompletedEventHandler
        
        '''<remarks/>
        Public Event AddlDataInUseCompleted As AddlDataInUseCompletedEventHandler
        
        '''<remarks/>
        Public Event ModelDefinedCompleted As ModelDefinedCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCardInfoCompleted As CopyCardInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccessCardUserInfoCompleted As GetAccessCardUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadSerialNoFromDBCompleted As ReadSerialNoFromDBCompletedEventHandler
        
        '''<remarks/>
        Public Event ProductReworkCompleted As ProductReworkCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTestResultCompleted As DeleteTestResultCompletedEventHandler
        
        '''<remarks/>
        Public Event GetModelInfoCompleted As GetModelInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ErrorLoggingCompleted As ErrorLoggingCompletedEventHandler
        
        '''<remarks/>
        Public Event updateIDSwopCompleted As updateIDSwopCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadProductInfoByCPNCompleted As ReadProductInfoByCPNCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRuleFromDBCompleted As ReadRuleFromDBCompletedEventHandler
        
        '''<remarks/>
        Public Event postProdMasterCompleted As postProdMasterCompletedEventHandler
        
        '''<remarks/>
        Public Event DelProdMasterCompleted As DelProdMasterCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRepairCodeCompleted As ReadRepairCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveTDCRepairCodeCompleted As SaveTDCRepairCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRepairDataBySerialNoCompleted As ReadRepairDataBySerialNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBomFromSAPCompleted As GetBomFromSAPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSpecifySeatItemCompleted As GetSpecifySeatItemCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveRepairDataCompleted As SaveRepairDataCompletedEventHandler
        
        '''<remarks/>
        Public Event MatchingNoCompleted As MatchingNoCompletedEventHandler
        
        '''<remarks/>
        Public Event SerialNoIsAccessCardCompleted As SerialNoIsAccessCardCompletedEventHandler
        
        '''<remarks/>
        Public Event MatchingAccountCompleted As MatchingAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBoxQtyCompleted As GetBoxQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBoxInfoCompleted As GetBoxInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPalletInfoCompleted As GetPalletInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPalletQtyCompleted As GetPalletQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event BoxExesistInPalletCompleted As BoxExesistInPalletCompletedEventHandler
        
        '''<remarks/>
        Public Event BoxInOtherPalletCompleted As BoxInOtherPalletCompletedEventHandler
        
        '''<remarks/>
        Public Event BoxHasOtherProdCompleted As BoxHasOtherProdCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadSDCartonsCompleted As ReadSDCartonsCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadCartonIDCompleted As ReadCartonIDCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCartonIDCompleted As SaveCartonIDCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveCartonIDCompleted As RemoveCartonIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipInfoBySNCompleted As GetShipInfoBySNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipInfoByBoxIDCompleted As GetShipInfoByBoxIDCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeBoxCompleted As ChangeBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveFlatFileMessageCompleted As SaveFlatFileMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event saveFlatFileSNCompleted As saveFlatFileSNCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckFlatFileSNCompleted As CheckFlatFileSNCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePalletCompleted As ChangePalletCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFlatfileCompleted As GetFlatfileCompletedEventHandler
        
        '''<remarks/>
        Public Event getFlatFilePropertiesCompleted As getFlatFilePropertiesCompletedEventHandler
        
        '''<remarks/>
        Public Event setFlatFilePropertiesCompleted As setFlatFilePropertiesCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonInputCompleted As AndonInputCompletedEventHandler
        
        '''<remarks/>
        Public Event ExistsModelCompleted As ExistsModelCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonActualQtyCompleted As AndonActualQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonActualQtyofProcessCompleted As AndonActualQtyofProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonFailedPercentCompleted As AndonFailedPercentCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonFailedQtyCompleted As AndonFailedQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonLineStopTimeCompleted As AndonLineStopTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonLineStopFreqCompleted As AndonLineStopFreqCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAndonProdScheCompleted As GetAndonProdScheCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAndonProdScheCompleted As UpdateAndonProdScheCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonProjectedQtyCompleted As AndonProjectedQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event KillLargeReportsCompleted As KillLargeReportsCompletedEventHandler
        
        '''<remarks/>
        Public Event TimeToGMTCompleted As TimeToGMTCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintMacAddressCompleted As PrintMacAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event ReprintMacAddressCompleted As ReprintMacAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPreMacAddressCompleted As GetPreMacAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLengthMacAddressCompleted As GetLengthMacAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabelsCompleted As OpenPrintLabelsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetResult", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetResult(ByVal SCID As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("GetResult", New Object() {SCID, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetResultAsync(ByVal SCID As String, ByVal Process As String)
            Me.GetResultAsync(SCID, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetResultAsync(ByVal SCID As String, ByVal Process As String, ByVal userState As Object)
            If (Me.GetResultOperationCompleted Is Nothing) Then
                Me.GetResultOperationCompleted = AddressOf Me.OnGetResultOperationCompleted
            End If
            Me.InvokeAsync("GetResult", New Object() {SCID, Process}, Me.GetResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetResultCompleted(Me, New GetResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ReadTestData", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadTestData(ByVal TDSel As TDSelectionStructure) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadTestData", New Object() {TDSel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadTestDataAsync(ByVal TDSel As TDSelectionStructure)
            Me.ReadTestDataAsync(TDSel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadTestDataAsync(ByVal TDSel As TDSelectionStructure, ByVal userState As Object)
            If (Me.ReadTestDataOperationCompleted Is Nothing) Then
                Me.ReadTestDataOperationCompleted = AddressOf Me.OnReadTestDataOperationCompleted
            End If
            Me.InvokeAsync("ReadTestData", New Object() {TDSel}, Me.ReadTestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadTestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadTestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadTestDataCompleted(Me, New ReadTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetOrderInfoFromSAP"& _ 
            "", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderInfoFromSAP(ByVal OrderNo As String) As OrderInfo
            Dim results() As Object = Me.Invoke("GetOrderInfoFromSAP", New Object() {OrderNo})
            Return CType(results(0),OrderInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderInfoFromSAPAsync(ByVal OrderNo As String)
            Me.GetOrderInfoFromSAPAsync(OrderNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderInfoFromSAPAsync(ByVal OrderNo As String, ByVal userState As Object)
            If (Me.GetOrderInfoFromSAPOperationCompleted Is Nothing) Then
                Me.GetOrderInfoFromSAPOperationCompleted = AddressOf Me.OnGetOrderInfoFromSAPOperationCompleted
            End If
            Me.InvokeAsync("GetOrderInfoFromSAP", New Object() {OrderNo}, Me.GetOrderInfoFromSAPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderInfoFromSAPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderInfoFromSAPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderInfoFromSAPCompleted(Me, New GetOrderInfoFromSAPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetOrderInfoFromOra"& _ 
            "cle", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderInfoFromOracle(ByVal OrderNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOrderInfoFromOracle", New Object() {OrderNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderInfoFromOracleAsync(ByVal OrderNo As String)
            Me.GetOrderInfoFromOracleAsync(OrderNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderInfoFromOracleAsync(ByVal OrderNo As String, ByVal userState As Object)
            If (Me.GetOrderInfoFromOracleOperationCompleted Is Nothing) Then
                Me.GetOrderInfoFromOracleOperationCompleted = AddressOf Me.OnGetOrderInfoFromOracleOperationCompleted
            End If
            Me.InvokeAsync("GetOrderInfoFromOracle", New Object() {OrderNo}, Me.GetOrderInfoFromOracleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderInfoFromOracleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderInfoFromOracleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderInfoFromOracleCompleted(Me, New GetOrderInfoFromOracleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetSubAmount", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubAmount(ByVal tla As String, ByVal subp As String) As Double
            Dim results() As Object = Me.Invoke("GetSubAmount", New Object() {tla, subp})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubAmountAsync(ByVal tla As String, ByVal subp As String)
            Me.GetSubAmountAsync(tla, subp, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubAmountAsync(ByVal tla As String, ByVal subp As String, ByVal userState As Object)
            If (Me.GetSubAmountOperationCompleted Is Nothing) Then
                Me.GetSubAmountOperationCompleted = AddressOf Me.OnGetSubAmountOperationCompleted
            End If
            Me.InvokeAsync("GetSubAmount", New Object() {tla, subp}, Me.GetSubAmountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubAmountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubAmountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubAmountCompleted(Me, New GetSubAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetPoQty", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPoQty(ByVal PO As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Double) As Boolean
            Dim results() As Object = Me.Invoke("GetPoQty", New Object() {PO, Model, PCBA, Qty})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPoQtyAsync(ByVal PO As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Double)
            Me.GetPoQtyAsync(PO, Model, PCBA, Qty, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPoQtyAsync(ByVal PO As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Double, ByVal userState As Object)
            If (Me.GetPoQtyOperationCompleted Is Nothing) Then
                Me.GetPoQtyOperationCompleted = AddressOf Me.OnGetPoQtyOperationCompleted
            End If
            Me.InvokeAsync("GetPoQty", New Object() {PO, Model, PCBA, Qty}, Me.GetPoQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPoQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPoQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPoQtyCompleted(Me, New GetPoQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/SaveTestResult", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveTestResult(ByVal StatusHeader As StatusHeaderStructure, ByVal dsResultItem As System.Data.DataSet, ByVal ProdLine As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveTestResult", New Object() {StatusHeader, dsResultItem, ProdLine})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveTestResultAsync(ByVal StatusHeader As StatusHeaderStructure, ByVal dsResultItem As System.Data.DataSet, ByVal ProdLine As String)
            Me.SaveTestResultAsync(StatusHeader, dsResultItem, ProdLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveTestResultAsync(ByVal StatusHeader As StatusHeaderStructure, ByVal dsResultItem As System.Data.DataSet, ByVal ProdLine As String, ByVal userState As Object)
            If (Me.SaveTestResultOperationCompleted Is Nothing) Then
                Me.SaveTestResultOperationCompleted = AddressOf Me.OnSaveTestResultOperationCompleted
            End If
            Me.InvokeAsync("SaveTestResult", New Object() {StatusHeader, dsResultItem, ProdLine}, Me.SaveTestResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveTestResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveTestResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveTestResultCompleted(Me, New SaveTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/SerialNoInUse", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SerialNoInUse(ByVal ExtSerialNo As String) As Boolean
            Dim results() As Object = Me.Invoke("SerialNoInUse", New Object() {ExtSerialNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SerialNoInUseAsync(ByVal ExtSerialNo As String)
            Me.SerialNoInUseAsync(ExtSerialNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SerialNoInUseAsync(ByVal ExtSerialNo As String, ByVal userState As Object)
            If (Me.SerialNoInUseOperationCompleted Is Nothing) Then
                Me.SerialNoInUseOperationCompleted = AddressOf Me.OnSerialNoInUseOperationCompleted
            End If
            Me.InvokeAsync("SerialNoInUse", New Object() {ExtSerialNo}, Me.SerialNoInUseOperationCompleted, userState)
        End Sub
        
        Private Sub OnSerialNoInUseOperationCompleted(ByVal arg As Object)
            If (Not (Me.SerialNoInUseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SerialNoInUseCompleted(Me, New SerialNoInUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/AddlDataInUse", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddlDataInUse(ByVal column As String, ByVal SN As String) As Boolean
            Dim results() As Object = Me.Invoke("AddlDataInUse", New Object() {column, SN})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddlDataInUseAsync(ByVal column As String, ByVal SN As String)
            Me.AddlDataInUseAsync(column, SN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddlDataInUseAsync(ByVal column As String, ByVal SN As String, ByVal userState As Object)
            If (Me.AddlDataInUseOperationCompleted Is Nothing) Then
                Me.AddlDataInUseOperationCompleted = AddressOf Me.OnAddlDataInUseOperationCompleted
            End If
            Me.InvokeAsync("AddlDataInUse", New Object() {column, SN}, Me.AddlDataInUseOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddlDataInUseOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddlDataInUseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddlDataInUseCompleted(Me, New AddlDataInUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ModelDefined", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModelDefined(ByVal ModelNo As String) As Boolean
            Dim results() As Object = Me.Invoke("ModelDefined", New Object() {ModelNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModelDefinedAsync(ByVal ModelNo As String)
            Me.ModelDefinedAsync(ModelNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModelDefinedAsync(ByVal ModelNo As String, ByVal userState As Object)
            If (Me.ModelDefinedOperationCompleted Is Nothing) Then
                Me.ModelDefinedOperationCompleted = AddressOf Me.OnModelDefinedOperationCompleted
            End If
            Me.InvokeAsync("ModelDefined", New Object() {ModelNo}, Me.ModelDefinedOperationCompleted, userState)
        End Sub
        
        Private Sub OnModelDefinedOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModelDefinedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModelDefinedCompleted(Me, New ModelDefinedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/CopyCardInfo", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyCardInfo() As Boolean
            Dim results() As Object = Me.Invoke("CopyCardInfo", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyCardInfoAsync()
            Me.CopyCardInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCardInfoAsync(ByVal userState As Object)
            If (Me.CopyCardInfoOperationCompleted Is Nothing) Then
                Me.CopyCardInfoOperationCompleted = AddressOf Me.OnCopyCardInfoOperationCompleted
            End If
            Me.InvokeAsync("CopyCardInfo", New Object(-1) {}, Me.CopyCardInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCardInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCardInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCardInfoCompleted(Me, New CopyCardInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetAccessCardUserIn"& _ 
            "fo", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccessCardUserInfo(ByVal AccessCardID As String) As AccessCard
            Dim results() As Object = Me.Invoke("GetAccessCardUserInfo", New Object() {AccessCardID})
            Return CType(results(0),AccessCard)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccessCardUserInfoAsync(ByVal AccessCardID As String)
            Me.GetAccessCardUserInfoAsync(AccessCardID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccessCardUserInfoAsync(ByVal AccessCardID As String, ByVal userState As Object)
            If (Me.GetAccessCardUserInfoOperationCompleted Is Nothing) Then
                Me.GetAccessCardUserInfoOperationCompleted = AddressOf Me.OnGetAccessCardUserInfoOperationCompleted
            End If
            Me.InvokeAsync("GetAccessCardUserInfo", New Object() {AccessCardID}, Me.GetAccessCardUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccessCardUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccessCardUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccessCardUserInfoCompleted(Me, New GetAccessCardUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ReadSerialNoFromDB", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadSerialNoFromDB(ByVal ExtSerialNo As String) As String
            Dim results() As Object = Me.Invoke("ReadSerialNoFromDB", New Object() {ExtSerialNo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadSerialNoFromDBAsync(ByVal ExtSerialNo As String)
            Me.ReadSerialNoFromDBAsync(ExtSerialNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadSerialNoFromDBAsync(ByVal ExtSerialNo As String, ByVal userState As Object)
            If (Me.ReadSerialNoFromDBOperationCompleted Is Nothing) Then
                Me.ReadSerialNoFromDBOperationCompleted = AddressOf Me.OnReadSerialNoFromDBOperationCompleted
            End If
            Me.InvokeAsync("ReadSerialNoFromDB", New Object() {ExtSerialNo}, Me.ReadSerialNoFromDBOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadSerialNoFromDBOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadSerialNoFromDBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadSerialNoFromDBCompleted(Me, New ReadSerialNoFromDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ProductRework", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProductRework(ByVal frSerial As String, ByVal toSerial As String, ByVal bolDel As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("ProductRework", New Object() {frSerial, toSerial, bolDel})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProductReworkAsync(ByVal frSerial As String, ByVal toSerial As String, ByVal bolDel As Boolean)
            Me.ProductReworkAsync(frSerial, toSerial, bolDel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProductReworkAsync(ByVal frSerial As String, ByVal toSerial As String, ByVal bolDel As Boolean, ByVal userState As Object)
            If (Me.ProductReworkOperationCompleted Is Nothing) Then
                Me.ProductReworkOperationCompleted = AddressOf Me.OnProductReworkOperationCompleted
            End If
            Me.InvokeAsync("ProductRework", New Object() {frSerial, toSerial, bolDel}, Me.ProductReworkOperationCompleted, userState)
        End Sub
        
        Private Sub OnProductReworkOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProductReworkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProductReworkCompleted(Me, New ProductReworkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/DeleteTestResult", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteTestResult(ByVal ExtSerialNo As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteTestResult", New Object() {ExtSerialNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteTestResultAsync(ByVal ExtSerialNo As String)
            Me.DeleteTestResultAsync(ExtSerialNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTestResultAsync(ByVal ExtSerialNo As String, ByVal userState As Object)
            If (Me.DeleteTestResultOperationCompleted Is Nothing) Then
                Me.DeleteTestResultOperationCompleted = AddressOf Me.OnDeleteTestResultOperationCompleted
            End If
            Me.InvokeAsync("DeleteTestResult", New Object() {ExtSerialNo}, Me.DeleteTestResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTestResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTestResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTestResultCompleted(Me, New DeleteTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetModelInfo", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetModelInfo(ByVal ProcessName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetModelInfo", New Object() {ProcessName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetModelInfoAsync(ByVal ProcessName As String)
            Me.GetModelInfoAsync(ProcessName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetModelInfoAsync(ByVal ProcessName As String, ByVal userState As Object)
            If (Me.GetModelInfoOperationCompleted Is Nothing) Then
                Me.GetModelInfoOperationCompleted = AddressOf Me.OnGetModelInfoOperationCompleted
            End If
            Me.InvokeAsync("GetModelInfo", New Object() {ProcessName}, Me.GetModelInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetModelInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetModelInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModelInfoCompleted(Me, New GetModelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ErrorLogging", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ErrorLogging(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ErrorLogging", New Object() {ModuleName, User, ErrMsg})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ErrorLoggingAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String)
            Me.ErrorLoggingAsync(ModuleName, User, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ErrorLoggingAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ErrorLoggingOperationCompleted Is Nothing) Then
                Me.ErrorLoggingOperationCompleted = AddressOf Me.OnErrorLoggingOperationCompleted
            End If
            Me.InvokeAsync("ErrorLogging", New Object() {ModuleName, User, ErrMsg}, Me.ErrorLoggingOperationCompleted, userState)
        End Sub
        
        Private Sub OnErrorLoggingOperationCompleted(ByVal arg As Object)
            If (Not (Me.ErrorLoggingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ErrorLoggingCompleted(Me, New ErrorLoggingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/updateIDSwop", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function updateIDSwop(ByVal BarcodeNo As String, ByVal SCRNo As String) As Boolean
            Dim results() As Object = Me.Invoke("updateIDSwop", New Object() {BarcodeNo, SCRNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updateIDSwopAsync(ByVal BarcodeNo As String, ByVal SCRNo As String)
            Me.updateIDSwopAsync(BarcodeNo, SCRNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updateIDSwopAsync(ByVal BarcodeNo As String, ByVal SCRNo As String, ByVal userState As Object)
            If (Me.updateIDSwopOperationCompleted Is Nothing) Then
                Me.updateIDSwopOperationCompleted = AddressOf Me.OnupdateIDSwopOperationCompleted
            End If
            Me.InvokeAsync("updateIDSwop", New Object() {BarcodeNo, SCRNo}, Me.updateIDSwopOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdateIDSwopOperationCompleted(ByVal arg As Object)
            If (Not (Me.updateIDSwopCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updateIDSwopCompleted(Me, New updateIDSwopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ReadProductInfoByCP"& _ 
            "N", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadProductInfoByCPN(ByVal CPN As String) As ProductData
            Dim results() As Object = Me.Invoke("ReadProductInfoByCPN", New Object() {CPN})
            Return CType(results(0),ProductData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadProductInfoByCPNAsync(ByVal CPN As String)
            Me.ReadProductInfoByCPNAsync(CPN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadProductInfoByCPNAsync(ByVal CPN As String, ByVal userState As Object)
            If (Me.ReadProductInfoByCPNOperationCompleted Is Nothing) Then
                Me.ReadProductInfoByCPNOperationCompleted = AddressOf Me.OnReadProductInfoByCPNOperationCompleted
            End If
            Me.InvokeAsync("ReadProductInfoByCPN", New Object() {CPN}, Me.ReadProductInfoByCPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadProductInfoByCPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadProductInfoByCPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadProductInfoByCPNCompleted(Me, New ReadProductInfoByCPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ReadRuleFromDB", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRuleFromDB() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRuleFromDB", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRuleFromDBAsync()
            Me.ReadRuleFromDBAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRuleFromDBAsync(ByVal userState As Object)
            If (Me.ReadRuleFromDBOperationCompleted Is Nothing) Then
                Me.ReadRuleFromDBOperationCompleted = AddressOf Me.OnReadRuleFromDBOperationCompleted
            End If
            Me.InvokeAsync("ReadRuleFromDB", New Object(-1) {}, Me.ReadRuleFromDBOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRuleFromDBOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRuleFromDBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRuleFromDBCompleted(Me, New ReadRuleFromDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/postProdMaster", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function postProdMaster(ByVal pordMaster As RuleDetail, ByVal ProdStructure As System.Data.DataSet, ByVal SAPLoginData As SAPLogin) As String
            Dim results() As Object = Me.Invoke("postProdMaster", New Object() {pordMaster, ProdStructure, SAPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub postProdMasterAsync(ByVal pordMaster As RuleDetail, ByVal ProdStructure As System.Data.DataSet, ByVal SAPLoginData As SAPLogin)
            Me.postProdMasterAsync(pordMaster, ProdStructure, SAPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub postProdMasterAsync(ByVal pordMaster As RuleDetail, ByVal ProdStructure As System.Data.DataSet, ByVal SAPLoginData As SAPLogin, ByVal userState As Object)
            If (Me.postProdMasterOperationCompleted Is Nothing) Then
                Me.postProdMasterOperationCompleted = AddressOf Me.OnpostProdMasterOperationCompleted
            End If
            Me.InvokeAsync("postProdMaster", New Object() {pordMaster, ProdStructure, SAPLoginData}, Me.postProdMasterOperationCompleted, userState)
        End Sub
        
        Private Sub OnpostProdMasterOperationCompleted(ByVal arg As Object)
            If (Not (Me.postProdMasterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent postProdMasterCompleted(Me, New postProdMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/DelProdMaster", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DelProdMaster(ByVal Model As String) As Boolean
            Dim results() As Object = Me.Invoke("DelProdMaster", New Object() {Model})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DelProdMasterAsync(ByVal Model As String)
            Me.DelProdMasterAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelProdMasterAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.DelProdMasterOperationCompleted Is Nothing) Then
                Me.DelProdMasterOperationCompleted = AddressOf Me.OnDelProdMasterOperationCompleted
            End If
            Me.InvokeAsync("DelProdMaster", New Object() {Model}, Me.DelProdMasterOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelProdMasterOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelProdMasterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelProdMasterCompleted(Me, New DelProdMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ReadRepairCode", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRepairCode(ByVal Category As String, ByVal Site As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRepairCode", New Object() {Category, Site})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRepairCodeAsync(ByVal Category As String, ByVal Site As String)
            Me.ReadRepairCodeAsync(Category, Site, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRepairCodeAsync(ByVal Category As String, ByVal Site As String, ByVal userState As Object)
            If (Me.ReadRepairCodeOperationCompleted Is Nothing) Then
                Me.ReadRepairCodeOperationCompleted = AddressOf Me.OnReadRepairCodeOperationCompleted
            End If
            Me.InvokeAsync("ReadRepairCode", New Object() {Category, Site}, Me.ReadRepairCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRepairCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRepairCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRepairCodeCompleted(Me, New ReadRepairCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/SaveTDCRepairCode", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveTDCRepairCode(ByVal RepairCode As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("SaveTDCRepairCode", New Object() {RepairCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveTDCRepairCodeAsync(ByVal RepairCode As System.Data.DataSet)
            Me.SaveTDCRepairCodeAsync(RepairCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveTDCRepairCodeAsync(ByVal RepairCode As System.Data.DataSet, ByVal userState As Object)
            If (Me.SaveTDCRepairCodeOperationCompleted Is Nothing) Then
                Me.SaveTDCRepairCodeOperationCompleted = AddressOf Me.OnSaveTDCRepairCodeOperationCompleted
            End If
            Me.InvokeAsync("SaveTDCRepairCode", New Object() {RepairCode}, Me.SaveTDCRepairCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveTDCRepairCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveTDCRepairCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveTDCRepairCodeCompleted(Me, New SaveTDCRepairCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ReadRepairDataBySer"& _ 
            "ialNo", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRepairDataBySerialNo(ByVal ProdOrder As String, ByVal SerialNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRepairDataBySerialNo", New Object() {ProdOrder, SerialNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRepairDataBySerialNoAsync(ByVal ProdOrder As String, ByVal SerialNo As String)
            Me.ReadRepairDataBySerialNoAsync(ProdOrder, SerialNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRepairDataBySerialNoAsync(ByVal ProdOrder As String, ByVal SerialNo As String, ByVal userState As Object)
            If (Me.ReadRepairDataBySerialNoOperationCompleted Is Nothing) Then
                Me.ReadRepairDataBySerialNoOperationCompleted = AddressOf Me.OnReadRepairDataBySerialNoOperationCompleted
            End If
            Me.InvokeAsync("ReadRepairDataBySerialNo", New Object() {ProdOrder, SerialNo}, Me.ReadRepairDataBySerialNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRepairDataBySerialNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRepairDataBySerialNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRepairDataBySerialNoCompleted(Me, New ReadRepairDataBySerialNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetBomFromSAP", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBomFromSAP(ByVal PCB As String, ByVal RefD As String) As String
            Dim results() As Object = Me.Invoke("GetBomFromSAP", New Object() {PCB, RefD})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBomFromSAPAsync(ByVal PCB As String, ByVal RefD As String)
            Me.GetBomFromSAPAsync(PCB, RefD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBomFromSAPAsync(ByVal PCB As String, ByVal RefD As String, ByVal userState As Object)
            If (Me.GetBomFromSAPOperationCompleted Is Nothing) Then
                Me.GetBomFromSAPOperationCompleted = AddressOf Me.OnGetBomFromSAPOperationCompleted
            End If
            Me.InvokeAsync("GetBomFromSAP", New Object() {PCB, RefD}, Me.GetBomFromSAPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBomFromSAPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBomFromSAPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBomFromSAPCompleted(Me, New GetBomFromSAPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetSpecifySeatItem", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSpecifySeatItem(ByVal PCB As String, ByVal RefD As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSpecifySeatItem", New Object() {PCB, RefD})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSpecifySeatItemAsync(ByVal PCB As String, ByVal RefD As String)
            Me.GetSpecifySeatItemAsync(PCB, RefD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSpecifySeatItemAsync(ByVal PCB As String, ByVal RefD As String, ByVal userState As Object)
            If (Me.GetSpecifySeatItemOperationCompleted Is Nothing) Then
                Me.GetSpecifySeatItemOperationCompleted = AddressOf Me.OnGetSpecifySeatItemOperationCompleted
            End If
            Me.InvokeAsync("GetSpecifySeatItem", New Object() {PCB, RefD}, Me.GetSpecifySeatItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSpecifySeatItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSpecifySeatItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSpecifySeatItemCompleted(Me, New GetSpecifySeatItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/SaveRepairData", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveRepairData(ByVal Type As String, ByVal RepData As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("SaveRepairData", New Object() {Type, RepData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveRepairDataAsync(ByVal Type As String, ByVal RepData As System.Data.DataSet)
            Me.SaveRepairDataAsync(Type, RepData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveRepairDataAsync(ByVal Type As String, ByVal RepData As System.Data.DataSet, ByVal userState As Object)
            If (Me.SaveRepairDataOperationCompleted Is Nothing) Then
                Me.SaveRepairDataOperationCompleted = AddressOf Me.OnSaveRepairDataOperationCompleted
            End If
            Me.InvokeAsync("SaveRepairData", New Object() {Type, RepData}, Me.SaveRepairDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveRepairDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveRepairDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveRepairDataCompleted(Me, New SaveRepairDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/MatchingNo", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MatchingNo(ByVal PO As String, ByVal PCBA As String) As Integer
            Dim results() As Object = Me.Invoke("MatchingNo", New Object() {PO, PCBA})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MatchingNoAsync(ByVal PO As String, ByVal PCBA As String)
            Me.MatchingNoAsync(PO, PCBA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MatchingNoAsync(ByVal PO As String, ByVal PCBA As String, ByVal userState As Object)
            If (Me.MatchingNoOperationCompleted Is Nothing) Then
                Me.MatchingNoOperationCompleted = AddressOf Me.OnMatchingNoOperationCompleted
            End If
            Me.InvokeAsync("MatchingNo", New Object() {PO, PCBA}, Me.MatchingNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnMatchingNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.MatchingNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MatchingNoCompleted(Me, New MatchingNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/SerialNoIsAccessCar"& _ 
            "d", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SerialNoIsAccessCard(ByVal SerialNo As String) As Boolean
            Dim results() As Object = Me.Invoke("SerialNoIsAccessCard", New Object() {SerialNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SerialNoIsAccessCardAsync(ByVal SerialNo As String)
            Me.SerialNoIsAccessCardAsync(SerialNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SerialNoIsAccessCardAsync(ByVal SerialNo As String, ByVal userState As Object)
            If (Me.SerialNoIsAccessCardOperationCompleted Is Nothing) Then
                Me.SerialNoIsAccessCardOperationCompleted = AddressOf Me.OnSerialNoIsAccessCardOperationCompleted
            End If
            Me.InvokeAsync("SerialNoIsAccessCard", New Object() {SerialNo}, Me.SerialNoIsAccessCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnSerialNoIsAccessCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.SerialNoIsAccessCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SerialNoIsAccessCardCompleted(Me, New SerialNoIsAccessCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/MatchingAccount", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MatchingAccount(ByVal Header As StatusHeaderStructure, ByVal Allow As Integer) As Boolean
            Dim results() As Object = Me.Invoke("MatchingAccount", New Object() {Header, Allow})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MatchingAccountAsync(ByVal Header As StatusHeaderStructure, ByVal Allow As Integer)
            Me.MatchingAccountAsync(Header, Allow, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MatchingAccountAsync(ByVal Header As StatusHeaderStructure, ByVal Allow As Integer, ByVal userState As Object)
            If (Me.MatchingAccountOperationCompleted Is Nothing) Then
                Me.MatchingAccountOperationCompleted = AddressOf Me.OnMatchingAccountOperationCompleted
            End If
            Me.InvokeAsync("MatchingAccount", New Object() {Header, Allow}, Me.MatchingAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnMatchingAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.MatchingAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MatchingAccountCompleted(Me, New MatchingAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetBoxQty", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBoxQty(ByVal BoxID As String) As Integer
            Dim results() As Object = Me.Invoke("GetBoxQty", New Object() {BoxID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBoxQtyAsync(ByVal BoxID As String)
            Me.GetBoxQtyAsync(BoxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBoxQtyAsync(ByVal BoxID As String, ByVal userState As Object)
            If (Me.GetBoxQtyOperationCompleted Is Nothing) Then
                Me.GetBoxQtyOperationCompleted = AddressOf Me.OnGetBoxQtyOperationCompleted
            End If
            Me.InvokeAsync("GetBoxQty", New Object() {BoxID}, Me.GetBoxQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBoxQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBoxQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBoxQtyCompleted(Me, New GetBoxQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetBoxInfo", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBoxInfo(ByVal BoxID As String) As BoxInfo
            Dim results() As Object = Me.Invoke("GetBoxInfo", New Object() {BoxID})
            Return CType(results(0),BoxInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBoxInfoAsync(ByVal BoxID As String)
            Me.GetBoxInfoAsync(BoxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBoxInfoAsync(ByVal BoxID As String, ByVal userState As Object)
            If (Me.GetBoxInfoOperationCompleted Is Nothing) Then
                Me.GetBoxInfoOperationCompleted = AddressOf Me.OnGetBoxInfoOperationCompleted
            End If
            Me.InvokeAsync("GetBoxInfo", New Object() {BoxID}, Me.GetBoxInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBoxInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBoxInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBoxInfoCompleted(Me, New GetBoxInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetPalletInfo", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPalletInfo(ByVal PalletID As String) As BoxInfo
            Dim results() As Object = Me.Invoke("GetPalletInfo", New Object() {PalletID})
            Return CType(results(0),BoxInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPalletInfoAsync(ByVal PalletID As String)
            Me.GetPalletInfoAsync(PalletID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPalletInfoAsync(ByVal PalletID As String, ByVal userState As Object)
            If (Me.GetPalletInfoOperationCompleted Is Nothing) Then
                Me.GetPalletInfoOperationCompleted = AddressOf Me.OnGetPalletInfoOperationCompleted
            End If
            Me.InvokeAsync("GetPalletInfo", New Object() {PalletID}, Me.GetPalletInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPalletInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPalletInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPalletInfoCompleted(Me, New GetPalletInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetPalletQty", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPalletQty(ByVal PalletID As String) As Integer
            Dim results() As Object = Me.Invoke("GetPalletQty", New Object() {PalletID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPalletQtyAsync(ByVal PalletID As String)
            Me.GetPalletQtyAsync(PalletID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPalletQtyAsync(ByVal PalletID As String, ByVal userState As Object)
            If (Me.GetPalletQtyOperationCompleted Is Nothing) Then
                Me.GetPalletQtyOperationCompleted = AddressOf Me.OnGetPalletQtyOperationCompleted
            End If
            Me.InvokeAsync("GetPalletQty", New Object() {PalletID}, Me.GetPalletQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPalletQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPalletQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPalletQtyCompleted(Me, New GetPalletQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/BoxExesistInPallet", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BoxExesistInPallet(ByVal BoxID As String, ByVal PalletID As String) As Boolean
            Dim results() As Object = Me.Invoke("BoxExesistInPallet", New Object() {BoxID, PalletID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BoxExesistInPalletAsync(ByVal BoxID As String, ByVal PalletID As String)
            Me.BoxExesistInPalletAsync(BoxID, PalletID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BoxExesistInPalletAsync(ByVal BoxID As String, ByVal PalletID As String, ByVal userState As Object)
            If (Me.BoxExesistInPalletOperationCompleted Is Nothing) Then
                Me.BoxExesistInPalletOperationCompleted = AddressOf Me.OnBoxExesistInPalletOperationCompleted
            End If
            Me.InvokeAsync("BoxExesistInPallet", New Object() {BoxID, PalletID}, Me.BoxExesistInPalletOperationCompleted, userState)
        End Sub
        
        Private Sub OnBoxExesistInPalletOperationCompleted(ByVal arg As Object)
            If (Not (Me.BoxExesistInPalletCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BoxExesistInPalletCompleted(Me, New BoxExesistInPalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/BoxInOtherPallet", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BoxInOtherPallet(ByVal BoxID As String, ByVal PalletID As String) As Boolean
            Dim results() As Object = Me.Invoke("BoxInOtherPallet", New Object() {BoxID, PalletID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BoxInOtherPalletAsync(ByVal BoxID As String, ByVal PalletID As String)
            Me.BoxInOtherPalletAsync(BoxID, PalletID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BoxInOtherPalletAsync(ByVal BoxID As String, ByVal PalletID As String, ByVal userState As Object)
            If (Me.BoxInOtherPalletOperationCompleted Is Nothing) Then
                Me.BoxInOtherPalletOperationCompleted = AddressOf Me.OnBoxInOtherPalletOperationCompleted
            End If
            Me.InvokeAsync("BoxInOtherPallet", New Object() {BoxID, PalletID}, Me.BoxInOtherPalletOperationCompleted, userState)
        End Sub
        
        Private Sub OnBoxInOtherPalletOperationCompleted(ByVal arg As Object)
            If (Not (Me.BoxInOtherPalletCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BoxInOtherPalletCompleted(Me, New BoxInOtherPalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/BoxHasOtherProd", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BoxHasOtherProd(ByVal BoxID As String, ByVal CPN As String) As Boolean
            Dim results() As Object = Me.Invoke("BoxHasOtherProd", New Object() {BoxID, CPN})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BoxHasOtherProdAsync(ByVal BoxID As String, ByVal CPN As String)
            Me.BoxHasOtherProdAsync(BoxID, CPN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BoxHasOtherProdAsync(ByVal BoxID As String, ByVal CPN As String, ByVal userState As Object)
            If (Me.BoxHasOtherProdOperationCompleted Is Nothing) Then
                Me.BoxHasOtherProdOperationCompleted = AddressOf Me.OnBoxHasOtherProdOperationCompleted
            End If
            Me.InvokeAsync("BoxHasOtherProd", New Object() {BoxID, CPN}, Me.BoxHasOtherProdOperationCompleted, userState)
        End Sub
        
        Private Sub OnBoxHasOtherProdOperationCompleted(ByVal arg As Object)
            If (Not (Me.BoxHasOtherProdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BoxHasOtherProdCompleted(Me, New BoxHasOtherProdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ReadSDCartons", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadSDCartons(ByVal SaleOrder As String, ByVal DeliveryNote As String, ByVal SAPLoginData As SAPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadSDCartons", New Object() {SaleOrder, DeliveryNote, SAPLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadSDCartonsAsync(ByVal SaleOrder As String, ByVal DeliveryNote As String, ByVal SAPLoginData As SAPLogin)
            Me.ReadSDCartonsAsync(SaleOrder, DeliveryNote, SAPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadSDCartonsAsync(ByVal SaleOrder As String, ByVal DeliveryNote As String, ByVal SAPLoginData As SAPLogin, ByVal userState As Object)
            If (Me.ReadSDCartonsOperationCompleted Is Nothing) Then
                Me.ReadSDCartonsOperationCompleted = AddressOf Me.OnReadSDCartonsOperationCompleted
            End If
            Me.InvokeAsync("ReadSDCartons", New Object() {SaleOrder, DeliveryNote, SAPLoginData}, Me.ReadSDCartonsOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadSDCartonsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadSDCartonsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadSDCartonsCompleted(Me, New ReadSDCartonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ReadCartonID", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadCartonID(ByVal ScanData As String, ByVal Model As String, ByVal Temp As String, ByVal SAPLoginData As SAPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadCartonID", New Object() {ScanData, Model, Temp, SAPLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadCartonIDAsync(ByVal ScanData As String, ByVal Model As String, ByVal Temp As String, ByVal SAPLoginData As SAPLogin)
            Me.ReadCartonIDAsync(ScanData, Model, Temp, SAPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadCartonIDAsync(ByVal ScanData As String, ByVal Model As String, ByVal Temp As String, ByVal SAPLoginData As SAPLogin, ByVal userState As Object)
            If (Me.ReadCartonIDOperationCompleted Is Nothing) Then
                Me.ReadCartonIDOperationCompleted = AddressOf Me.OnReadCartonIDOperationCompleted
            End If
            Me.InvokeAsync("ReadCartonID", New Object() {ScanData, Model, Temp, SAPLoginData}, Me.ReadCartonIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadCartonIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadCartonIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadCartonIDCompleted(Me, New ReadCartonIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/SaveCartonID", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveCartonID(ByVal SaleOrder As String, ByVal DeliveryNote As String, ByVal myDataSet As System.Data.DataSet, ByVal SAPLoginData As SAPLogin) As String
            Dim results() As Object = Me.Invoke("SaveCartonID", New Object() {SaleOrder, DeliveryNote, myDataSet, SAPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveCartonIDAsync(ByVal SaleOrder As String, ByVal DeliveryNote As String, ByVal myDataSet As System.Data.DataSet, ByVal SAPLoginData As SAPLogin)
            Me.SaveCartonIDAsync(SaleOrder, DeliveryNote, myDataSet, SAPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveCartonIDAsync(ByVal SaleOrder As String, ByVal DeliveryNote As String, ByVal myDataSet As System.Data.DataSet, ByVal SAPLoginData As SAPLogin, ByVal userState As Object)
            If (Me.SaveCartonIDOperationCompleted Is Nothing) Then
                Me.SaveCartonIDOperationCompleted = AddressOf Me.OnSaveCartonIDOperationCompleted
            End If
            Me.InvokeAsync("SaveCartonID", New Object() {SaleOrder, DeliveryNote, myDataSet, SAPLoginData}, Me.SaveCartonIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveCartonIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCartonIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCartonIDCompleted(Me, New SaveCartonIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/RemoveCartonID", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveCartonID(ByVal CartonID As String, ByVal SAPLoginData As SAPLogin) As String
            Dim results() As Object = Me.Invoke("RemoveCartonID", New Object() {CartonID, SAPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveCartonIDAsync(ByVal CartonID As String, ByVal SAPLoginData As SAPLogin)
            Me.RemoveCartonIDAsync(CartonID, SAPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveCartonIDAsync(ByVal CartonID As String, ByVal SAPLoginData As SAPLogin, ByVal userState As Object)
            If (Me.RemoveCartonIDOperationCompleted Is Nothing) Then
                Me.RemoveCartonIDOperationCompleted = AddressOf Me.OnRemoveCartonIDOperationCompleted
            End If
            Me.InvokeAsync("RemoveCartonID", New Object() {CartonID, SAPLoginData}, Me.RemoveCartonIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveCartonIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveCartonIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveCartonIDCompleted(Me, New RemoveCartonIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetShipInfoBySN", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipInfoBySN(ByVal SerialNo As String) As ShipInfo
            Dim results() As Object = Me.Invoke("GetShipInfoBySN", New Object() {SerialNo})
            Return CType(results(0),ShipInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoBySNAsync(ByVal SerialNo As String)
            Me.GetShipInfoBySNAsync(SerialNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoBySNAsync(ByVal SerialNo As String, ByVal userState As Object)
            If (Me.GetShipInfoBySNOperationCompleted Is Nothing) Then
                Me.GetShipInfoBySNOperationCompleted = AddressOf Me.OnGetShipInfoBySNOperationCompleted
            End If
            Me.InvokeAsync("GetShipInfoBySN", New Object() {SerialNo}, Me.GetShipInfoBySNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipInfoBySNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipInfoBySNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipInfoBySNCompleted(Me, New GetShipInfoBySNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetShipInfoByBoxID", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipInfoByBoxID(ByVal BoxID As String) As ShipInfo
            Dim results() As Object = Me.Invoke("GetShipInfoByBoxID", New Object() {BoxID})
            Return CType(results(0),ShipInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoByBoxIDAsync(ByVal BoxID As String)
            Me.GetShipInfoByBoxIDAsync(BoxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoByBoxIDAsync(ByVal BoxID As String, ByVal userState As Object)
            If (Me.GetShipInfoByBoxIDOperationCompleted Is Nothing) Then
                Me.GetShipInfoByBoxIDOperationCompleted = AddressOf Me.OnGetShipInfoByBoxIDOperationCompleted
            End If
            Me.InvokeAsync("GetShipInfoByBoxID", New Object() {BoxID}, Me.GetShipInfoByBoxIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipInfoByBoxIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipInfoByBoxIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipInfoByBoxIDCompleted(Me, New GetShipInfoByBoxIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ChangeBox", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeBox(ByVal SerialNo As String, ByVal BoxID As String, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("ChangeBox", New Object() {SerialNo, BoxID, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeBoxAsync(ByVal SerialNo As String, ByVal BoxID As String, ByVal user As String)
            Me.ChangeBoxAsync(SerialNo, BoxID, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeBoxAsync(ByVal SerialNo As String, ByVal BoxID As String, ByVal user As String, ByVal userState As Object)
            If (Me.ChangeBoxOperationCompleted Is Nothing) Then
                Me.ChangeBoxOperationCompleted = AddressOf Me.OnChangeBoxOperationCompleted
            End If
            Me.InvokeAsync("ChangeBox", New Object() {SerialNo, BoxID, user}, Me.ChangeBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeBoxCompleted(Me, New ChangeBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/SaveFlatFileMessage"& _ 
            "", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveFlatFileMessage(ByVal model As String, ByVal boxid As String, ByVal palletid As String, ByVal serialno As String, ByVal flatfile As String, ByVal sentby As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveFlatFileMessage", New Object() {model, boxid, palletid, serialno, flatfile, sentby})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveFlatFileMessageAsync(ByVal model As String, ByVal boxid As String, ByVal palletid As String, ByVal serialno As String, ByVal flatfile As String, ByVal sentby As String)
            Me.SaveFlatFileMessageAsync(model, boxid, palletid, serialno, flatfile, sentby, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveFlatFileMessageAsync(ByVal model As String, ByVal boxid As String, ByVal palletid As String, ByVal serialno As String, ByVal flatfile As String, ByVal sentby As String, ByVal userState As Object)
            If (Me.SaveFlatFileMessageOperationCompleted Is Nothing) Then
                Me.SaveFlatFileMessageOperationCompleted = AddressOf Me.OnSaveFlatFileMessageOperationCompleted
            End If
            Me.InvokeAsync("SaveFlatFileMessage", New Object() {model, boxid, palletid, serialno, flatfile, sentby}, Me.SaveFlatFileMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveFlatFileMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveFlatFileMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveFlatFileMessageCompleted(Me, New SaveFlatFileMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/saveFlatFileSN", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveFlatFileSN(ByVal FlatfileDS As System.Data.DataSet, ByVal parmsArray() As String) As Boolean
            Dim results() As Object = Me.Invoke("saveFlatFileSN", New Object() {FlatfileDS, parmsArray})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveFlatFileSNAsync(ByVal FlatfileDS As System.Data.DataSet, ByVal parmsArray() As String)
            Me.saveFlatFileSNAsync(FlatfileDS, parmsArray, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveFlatFileSNAsync(ByVal FlatfileDS As System.Data.DataSet, ByVal parmsArray() As String, ByVal userState As Object)
            If (Me.saveFlatFileSNOperationCompleted Is Nothing) Then
                Me.saveFlatFileSNOperationCompleted = AddressOf Me.OnsaveFlatFileSNOperationCompleted
            End If
            Me.InvokeAsync("saveFlatFileSN", New Object() {FlatfileDS, parmsArray}, Me.saveFlatFileSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveFlatFileSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveFlatFileSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveFlatFileSNCompleted(Me, New saveFlatFileSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/CheckFlatFileSN", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckFlatFileSN(ByVal FlatfileDS As System.Data.DataSet, ByVal username As String) As String
            Dim results() As Object = Me.Invoke("CheckFlatFileSN", New Object() {FlatfileDS, username})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckFlatFileSNAsync(ByVal FlatfileDS As System.Data.DataSet, ByVal username As String)
            Me.CheckFlatFileSNAsync(FlatfileDS, username, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckFlatFileSNAsync(ByVal FlatfileDS As System.Data.DataSet, ByVal username As String, ByVal userState As Object)
            If (Me.CheckFlatFileSNOperationCompleted Is Nothing) Then
                Me.CheckFlatFileSNOperationCompleted = AddressOf Me.OnCheckFlatFileSNOperationCompleted
            End If
            Me.InvokeAsync("CheckFlatFileSN", New Object() {FlatfileDS, username}, Me.CheckFlatFileSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckFlatFileSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckFlatFileSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckFlatFileSNCompleted(Me, New CheckFlatFileSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ChangePallet", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangePallet(ByVal BoxID As String, ByVal PalletID As String, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("ChangePallet", New Object() {BoxID, PalletID, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangePalletAsync(ByVal BoxID As String, ByVal PalletID As String, ByVal user As String)
            Me.ChangePalletAsync(BoxID, PalletID, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePalletAsync(ByVal BoxID As String, ByVal PalletID As String, ByVal user As String, ByVal userState As Object)
            If (Me.ChangePalletOperationCompleted Is Nothing) Then
                Me.ChangePalletOperationCompleted = AddressOf Me.OnChangePalletOperationCompleted
            End If
            Me.InvokeAsync("ChangePallet", New Object() {BoxID, PalletID, user}, Me.ChangePalletOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePalletOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePalletCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePalletCompleted(Me, New ChangePalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetFlatfile", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFlatfile(ByVal model As String, ByVal BoxID As String, ByVal PalletID As String, ByVal SerialNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFlatfile", New Object() {model, BoxID, PalletID, SerialNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFlatfileAsync(ByVal model As String, ByVal BoxID As String, ByVal PalletID As String, ByVal SerialNo As String)
            Me.GetFlatfileAsync(model, BoxID, PalletID, SerialNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFlatfileAsync(ByVal model As String, ByVal BoxID As String, ByVal PalletID As String, ByVal SerialNo As String, ByVal userState As Object)
            If (Me.GetFlatfileOperationCompleted Is Nothing) Then
                Me.GetFlatfileOperationCompleted = AddressOf Me.OnGetFlatfileOperationCompleted
            End If
            Me.InvokeAsync("GetFlatfile", New Object() {model, BoxID, PalletID, SerialNo}, Me.GetFlatfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFlatfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFlatfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFlatfileCompleted(Me, New GetFlatfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/getFlatFileProperti"& _ 
            "es", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getFlatFileProperties(ByVal type As String, ByVal attribute As String) As String
            Dim results() As Object = Me.Invoke("getFlatFileProperties", New Object() {type, attribute})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getFlatFilePropertiesAsync(ByVal type As String, ByVal attribute As String)
            Me.getFlatFilePropertiesAsync(type, attribute, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getFlatFilePropertiesAsync(ByVal type As String, ByVal attribute As String, ByVal userState As Object)
            If (Me.getFlatFilePropertiesOperationCompleted Is Nothing) Then
                Me.getFlatFilePropertiesOperationCompleted = AddressOf Me.OngetFlatFilePropertiesOperationCompleted
            End If
            Me.InvokeAsync("getFlatFileProperties", New Object() {type, attribute}, Me.getFlatFilePropertiesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFlatFilePropertiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getFlatFilePropertiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFlatFilePropertiesCompleted(Me, New getFlatFilePropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/setFlatFileProperti"& _ 
            "es", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setFlatFileProperties(ByVal type As String, ByVal attribute As String, ByVal value As String) As Boolean
            Dim results() As Object = Me.Invoke("setFlatFileProperties", New Object() {type, attribute, value})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub setFlatFilePropertiesAsync(ByVal type As String, ByVal attribute As String, ByVal value As String)
            Me.setFlatFilePropertiesAsync(type, attribute, value, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setFlatFilePropertiesAsync(ByVal type As String, ByVal attribute As String, ByVal value As String, ByVal userState As Object)
            If (Me.setFlatFilePropertiesOperationCompleted Is Nothing) Then
                Me.setFlatFilePropertiesOperationCompleted = AddressOf Me.OnsetFlatFilePropertiesOperationCompleted
            End If
            Me.InvokeAsync("setFlatFileProperties", New Object() {type, attribute, value}, Me.setFlatFilePropertiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetFlatFilePropertiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.setFlatFilePropertiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setFlatFilePropertiesCompleted(Me, New setFlatFilePropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/AndonInput", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonInput(ByVal Model As String, ByVal Line As String, ByVal Station As String, ByVal status As String) As String
            Dim results() As Object = Me.Invoke("AndonInput", New Object() {Model, Line, Station, status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonInputAsync(ByVal Model As String, ByVal Line As String, ByVal Station As String, ByVal status As String)
            Me.AndonInputAsync(Model, Line, Station, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonInputAsync(ByVal Model As String, ByVal Line As String, ByVal Station As String, ByVal status As String, ByVal userState As Object)
            If (Me.AndonInputOperationCompleted Is Nothing) Then
                Me.AndonInputOperationCompleted = AddressOf Me.OnAndonInputOperationCompleted
            End If
            Me.InvokeAsync("AndonInput", New Object() {Model, Line, Station, status}, Me.AndonInputOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonInputOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonInputCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonInputCompleted(Me, New AndonInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ExistsModel", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExistsModel(ByVal Model As String) As Integer
            Dim results() As Object = Me.Invoke("ExistsModel", New Object() {Model})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExistsModelAsync(ByVal Model As String)
            Me.ExistsModelAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExistsModelAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.ExistsModelOperationCompleted Is Nothing) Then
                Me.ExistsModelOperationCompleted = AddressOf Me.OnExistsModelOperationCompleted
            End If
            Me.InvokeAsync("ExistsModel", New Object() {Model}, Me.ExistsModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnExistsModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExistsModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExistsModelCompleted(Me, New ExistsModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/AndonActualQty", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonActualQty(ByVal Model As String, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("AndonActualQty", New Object() {Model, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonActualQtyAsync(ByVal Model As String, ByVal Line As String)
            Me.AndonActualQtyAsync(Model, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonActualQtyAsync(ByVal Model As String, ByVal Line As String, ByVal userState As Object)
            If (Me.AndonActualQtyOperationCompleted Is Nothing) Then
                Me.AndonActualQtyOperationCompleted = AddressOf Me.OnAndonActualQtyOperationCompleted
            End If
            Me.InvokeAsync("AndonActualQty", New Object() {Model, Line}, Me.AndonActualQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonActualQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonActualQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonActualQtyCompleted(Me, New AndonActualQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/AndonActualQtyofPro"& _ 
            "cess", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonActualQtyofProcess(ByVal Model As String, ByVal Line As String, ByVal process As String) As String
            Dim results() As Object = Me.Invoke("AndonActualQtyofProcess", New Object() {Model, Line, process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonActualQtyofProcessAsync(ByVal Model As String, ByVal Line As String, ByVal process As String)
            Me.AndonActualQtyofProcessAsync(Model, Line, process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonActualQtyofProcessAsync(ByVal Model As String, ByVal Line As String, ByVal process As String, ByVal userState As Object)
            If (Me.AndonActualQtyofProcessOperationCompleted Is Nothing) Then
                Me.AndonActualQtyofProcessOperationCompleted = AddressOf Me.OnAndonActualQtyofProcessOperationCompleted
            End If
            Me.InvokeAsync("AndonActualQtyofProcess", New Object() {Model, Line, process}, Me.AndonActualQtyofProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonActualQtyofProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonActualQtyofProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonActualQtyofProcessCompleted(Me, New AndonActualQtyofProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/AndonFailedPercent", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonFailedPercent(ByVal Model As String, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("AndonFailedPercent", New Object() {Model, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonFailedPercentAsync(ByVal Model As String, ByVal Line As String)
            Me.AndonFailedPercentAsync(Model, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonFailedPercentAsync(ByVal Model As String, ByVal Line As String, ByVal userState As Object)
            If (Me.AndonFailedPercentOperationCompleted Is Nothing) Then
                Me.AndonFailedPercentOperationCompleted = AddressOf Me.OnAndonFailedPercentOperationCompleted
            End If
            Me.InvokeAsync("AndonFailedPercent", New Object() {Model, Line}, Me.AndonFailedPercentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonFailedPercentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonFailedPercentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonFailedPercentCompleted(Me, New AndonFailedPercentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/AndonFailedQty", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonFailedQty(ByVal Model As String, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("AndonFailedQty", New Object() {Model, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonFailedQtyAsync(ByVal Model As String, ByVal Line As String)
            Me.AndonFailedQtyAsync(Model, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonFailedQtyAsync(ByVal Model As String, ByVal Line As String, ByVal userState As Object)
            If (Me.AndonFailedQtyOperationCompleted Is Nothing) Then
                Me.AndonFailedQtyOperationCompleted = AddressOf Me.OnAndonFailedQtyOperationCompleted
            End If
            Me.InvokeAsync("AndonFailedQty", New Object() {Model, Line}, Me.AndonFailedQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonFailedQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonFailedQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonFailedQtyCompleted(Me, New AndonFailedQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/AndonLineStopTime", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonLineStopTime(ByVal Model As String, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("AndonLineStopTime", New Object() {Model, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonLineStopTimeAsync(ByVal Model As String, ByVal Line As String)
            Me.AndonLineStopTimeAsync(Model, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonLineStopTimeAsync(ByVal Model As String, ByVal Line As String, ByVal userState As Object)
            If (Me.AndonLineStopTimeOperationCompleted Is Nothing) Then
                Me.AndonLineStopTimeOperationCompleted = AddressOf Me.OnAndonLineStopTimeOperationCompleted
            End If
            Me.InvokeAsync("AndonLineStopTime", New Object() {Model, Line}, Me.AndonLineStopTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonLineStopTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonLineStopTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonLineStopTimeCompleted(Me, New AndonLineStopTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/AndonLineStopFreq", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonLineStopFreq(ByVal Model As String, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("AndonLineStopFreq", New Object() {Model, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonLineStopFreqAsync(ByVal Model As String, ByVal Line As String)
            Me.AndonLineStopFreqAsync(Model, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonLineStopFreqAsync(ByVal Model As String, ByVal Line As String, ByVal userState As Object)
            If (Me.AndonLineStopFreqOperationCompleted Is Nothing) Then
                Me.AndonLineStopFreqOperationCompleted = AddressOf Me.OnAndonLineStopFreqOperationCompleted
            End If
            Me.InvokeAsync("AndonLineStopFreq", New Object() {Model, Line}, Me.AndonLineStopFreqOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonLineStopFreqOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonLineStopFreqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonLineStopFreqCompleted(Me, New AndonLineStopFreqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetAndonProdSche", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAndonProdSche(ByVal Line As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAndonProdSche", New Object() {Line})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAndonProdScheAsync(ByVal Line As String)
            Me.GetAndonProdScheAsync(Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAndonProdScheAsync(ByVal Line As String, ByVal userState As Object)
            If (Me.GetAndonProdScheOperationCompleted Is Nothing) Then
                Me.GetAndonProdScheOperationCompleted = AddressOf Me.OnGetAndonProdScheOperationCompleted
            End If
            Me.InvokeAsync("GetAndonProdSche", New Object() {Line}, Me.GetAndonProdScheOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAndonProdScheOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAndonProdScheCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAndonProdScheCompleted(Me, New GetAndonProdScheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/UpdateAndonProdSche"& _ 
            "", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAndonProdSche(ByVal ds As System.Data.DataSet, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("UpdateAndonProdSche", New Object() {ds, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAndonProdScheAsync(ByVal ds As System.Data.DataSet, ByVal Line As String)
            Me.UpdateAndonProdScheAsync(ds, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAndonProdScheAsync(ByVal ds As System.Data.DataSet, ByVal Line As String, ByVal userState As Object)
            If (Me.UpdateAndonProdScheOperationCompleted Is Nothing) Then
                Me.UpdateAndonProdScheOperationCompleted = AddressOf Me.OnUpdateAndonProdScheOperationCompleted
            End If
            Me.InvokeAsync("UpdateAndonProdSche", New Object() {ds, Line}, Me.UpdateAndonProdScheOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAndonProdScheOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAndonProdScheCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAndonProdScheCompleted(Me, New UpdateAndonProdScheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/AndonProjectedQty", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonProjectedQty(ByVal Line As String, ByVal Target As Integer) As Integer
            Dim results() As Object = Me.Invoke("AndonProjectedQty", New Object() {Line, Target})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonProjectedQtyAsync(ByVal Line As String, ByVal Target As Integer)
            Me.AndonProjectedQtyAsync(Line, Target, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonProjectedQtyAsync(ByVal Line As String, ByVal Target As Integer, ByVal userState As Object)
            If (Me.AndonProjectedQtyOperationCompleted Is Nothing) Then
                Me.AndonProjectedQtyOperationCompleted = AddressOf Me.OnAndonProjectedQtyOperationCompleted
            End If
            Me.InvokeAsync("AndonProjectedQty", New Object() {Line, Target}, Me.AndonProjectedQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonProjectedQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonProjectedQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonProjectedQtyCompleted(Me, New AndonProjectedQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/KillLargeReports", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function KillLargeReports() As String
            Dim results() As Object = Me.Invoke("KillLargeReports", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub KillLargeReportsAsync()
            Me.KillLargeReportsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub KillLargeReportsAsync(ByVal userState As Object)
            If (Me.KillLargeReportsOperationCompleted Is Nothing) Then
                Me.KillLargeReportsOperationCompleted = AddressOf Me.OnKillLargeReportsOperationCompleted
            End If
            Me.InvokeAsync("KillLargeReports", New Object(-1) {}, Me.KillLargeReportsOperationCompleted, userState)
        End Sub
        
        Private Sub OnKillLargeReportsOperationCompleted(ByVal arg As Object)
            If (Not (Me.KillLargeReportsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent KillLargeReportsCompleted(Me, New KillLargeReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/TimeToGMT", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TimeToGMT(ByVal dt As Date) As String
            Dim results() As Object = Me.Invoke("TimeToGMT", New Object() {dt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TimeToGMTAsync(ByVal dt As Date)
            Me.TimeToGMTAsync(dt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TimeToGMTAsync(ByVal dt As Date, ByVal userState As Object)
            If (Me.TimeToGMTOperationCompleted Is Nothing) Then
                Me.TimeToGMTOperationCompleted = AddressOf Me.OnTimeToGMTOperationCompleted
            End If
            Me.InvokeAsync("TimeToGMT", New Object() {dt}, Me.TimeToGMTOperationCompleted, userState)
        End Sub
        
        Private Sub OnTimeToGMTOperationCompleted(ByVal arg As Object)
            If (Not (Me.TimeToGMTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TimeToGMTCompleted(Me, New TimeToGMTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/PrintMacAddress", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintMacAddress(ByVal macType As String, ByVal addressTotal As Integer, ByVal user As String, ByVal printerName As String) As String
            Dim results() As Object = Me.Invoke("PrintMacAddress", New Object() {macType, addressTotal, user, printerName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintMacAddressAsync(ByVal macType As String, ByVal addressTotal As Integer, ByVal user As String, ByVal printerName As String)
            Me.PrintMacAddressAsync(macType, addressTotal, user, printerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintMacAddressAsync(ByVal macType As String, ByVal addressTotal As Integer, ByVal user As String, ByVal printerName As String, ByVal userState As Object)
            If (Me.PrintMacAddressOperationCompleted Is Nothing) Then
                Me.PrintMacAddressOperationCompleted = AddressOf Me.OnPrintMacAddressOperationCompleted
            End If
            Me.InvokeAsync("PrintMacAddress", New Object() {macType, addressTotal, user, printerName}, Me.PrintMacAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintMacAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintMacAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintMacAddressCompleted(Me, New PrintMacAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/ReprintMacAddress", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReprintMacAddress(ByVal macType As String, ByVal startAddress As String, ByVal endAddress As String, ByVal user As String, ByVal printerName As String) As String
            Dim results() As Object = Me.Invoke("ReprintMacAddress", New Object() {macType, startAddress, endAddress, user, printerName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReprintMacAddressAsync(ByVal macType As String, ByVal startAddress As String, ByVal endAddress As String, ByVal user As String, ByVal printerName As String)
            Me.ReprintMacAddressAsync(macType, startAddress, endAddress, user, printerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReprintMacAddressAsync(ByVal macType As String, ByVal startAddress As String, ByVal endAddress As String, ByVal user As String, ByVal printerName As String, ByVal userState As Object)
            If (Me.ReprintMacAddressOperationCompleted Is Nothing) Then
                Me.ReprintMacAddressOperationCompleted = AddressOf Me.OnReprintMacAddressOperationCompleted
            End If
            Me.InvokeAsync("ReprintMacAddress", New Object() {macType, startAddress, endAddress, user, printerName}, Me.ReprintMacAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnReprintMacAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReprintMacAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReprintMacAddressCompleted(Me, New ReprintMacAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetPreMacAddress", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPreMacAddress(ByVal AddressType As String) As String
            Dim results() As Object = Me.Invoke("GetPreMacAddress", New Object() {AddressType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPreMacAddressAsync(ByVal AddressType As String)
            Me.GetPreMacAddressAsync(AddressType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPreMacAddressAsync(ByVal AddressType As String, ByVal userState As Object)
            If (Me.GetPreMacAddressOperationCompleted Is Nothing) Then
                Me.GetPreMacAddressOperationCompleted = AddressOf Me.OnGetPreMacAddressOperationCompleted
            End If
            Me.InvokeAsync("GetPreMacAddress", New Object() {AddressType}, Me.GetPreMacAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPreMacAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPreMacAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPreMacAddressCompleted(Me, New GetPreMacAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/GetLengthMacAddress"& _ 
            "", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLengthMacAddress(ByVal Category As String) As String
            Dim results() As Object = Me.Invoke("GetLengthMacAddress", New Object() {Category})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLengthMacAddressAsync(ByVal Category As String)
            Me.GetLengthMacAddressAsync(Category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLengthMacAddressAsync(ByVal Category As String, ByVal userState As Object)
            If (Me.GetLengthMacAddressOperationCompleted Is Nothing) Then
                Me.GetLengthMacAddressOperationCompleted = AddressOf Me.OnGetLengthMacAddressOperationCompleted
            End If
            Me.InvokeAsync("GetLengthMacAddress", New Object() {Category}, Me.GetLengthMacAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLengthMacAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLengthMacAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLengthMacAddressCompleted(Me, New GetLengthMacAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService/OpenPrintLabels", RequestNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", ResponseNamespace:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabels(ByVal boxid As String, ByVal printer As String) As Boolean
            Dim results() As Object = Me.Invoke("OpenPrintLabels", New Object() {boxid, printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelsAsync(ByVal boxid As String, ByVal printer As String)
            Me.OpenPrintLabelsAsync(boxid, printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelsAsync(ByVal boxid As String, ByVal printer As String, ByVal userState As Object)
            If (Me.OpenPrintLabelsOperationCompleted Is Nothing) Then
                Me.OpenPrintLabelsOperationCompleted = AddressOf Me.OnOpenPrintLabelsOperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabels", New Object() {boxid, printer}, Me.OpenPrintLabelsOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabelsCompleted(Me, New OpenPrintLabelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService")>  _
    Partial Public Class TDSelectionStructure
        
        Private serialNoField As String
        
        Private frProdDateField As Date
        
        Private toProdDateField As Date
        
        Private processField As String
        
        '''<remarks/>
        Public Property SerialNo() As String
            Get
                Return Me.serialNoField
            End Get
            Set
                Me.serialNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property frProdDate() As Date
            Get
                Return Me.frProdDateField
            End Get
            Set
                Me.frProdDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property toProdDate() As Date
            Get
                Return Me.toProdDateField
            End Get
            Set
                Me.toProdDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Process() As String
            Get
                Return Me.processField
            End Get
            Set
                Me.processField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService")>  _
    Partial Public Class ShipInfo
        
        Private customerPNField As String
        
        Private boxIDField As String
        
        Private palletIDField As String
        
        Private modelField As String
        
        '''<remarks/>
        Public Property CustomerPN() As String
            Get
                Return Me.customerPNField
            End Get
            Set
                Me.customerPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BoxID() As String
            Get
                Return Me.boxIDField
            End Get
            Set
                Me.boxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PalletID() As String
            Get
                Return Me.palletIDField
            End Get
            Set
                Me.palletIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService")>  _
    Partial Public Class BoxInfo
        
        Private customerPNField As String
        
        Private boxQtyField As Integer
        
        Private palletIDField As String
        
        Private palletQtyField As Integer
        
        '''<remarks/>
        Public Property CustomerPN() As String
            Get
                Return Me.customerPNField
            End Get
            Set
                Me.customerPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BoxQty() As Integer
            Get
                Return Me.boxQtyField
            End Get
            Set
                Me.boxQtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PalletID() As String
            Get
                Return Me.palletIDField
            End Get
            Set
                Me.palletIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PalletQty() As Integer
            Get
                Return Me.palletQtyField
            End Get
            Set
                Me.palletQtyField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService")>  _
    Partial Public Class SAPLogin
        
        Private serverField As String
        
        Private userField As String
        
        Private pWDField As String
        
        '''<remarks/>
        Public Property Server() As String
            Get
                Return Me.serverField
            End Get
            Set
                Me.serverField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PWD() As String
            Get
                Return Me.pWDField
            End Get
            Set
                Me.pWDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService")>  _
    Partial Public Class RuleDetail
        
        Private modelField As String
        
        Private descField As String
        
        Private buField As String
        
        Private customerField As String
        
        Private cPNField As String
        
        Private sNpatternField As String
        
        Private sN2patternField As String
        
        Private sN3patternField As String
        
        Private sN4patternField As String
        
        Private voltageTypeField As String
        
        Private powerField As String
        
        Private mainboardField As String
        
        Private specialRequirementField As String
        
        Private boxsizeField As Integer
        
        Private palletsizeField As Integer
        
        Private revisionField As String
        
        Private remarksField As String
        
        Private extSNSameIntSNField As Boolean
        
        Private confirmSNField As Boolean
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Desc() As String
            Get
                Return Me.descField
            End Get
            Set
                Me.descField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BU() As String
            Get
                Return Me.buField
            End Get
            Set
                Me.buField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Customer() As String
            Get
                Return Me.customerField
            End Get
            Set
                Me.customerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CPN() As String
            Get
                Return Me.cPNField
            End Get
            Set
                Me.cPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SNpattern() As String
            Get
                Return Me.sNpatternField
            End Get
            Set
                Me.sNpatternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN2pattern() As String
            Get
                Return Me.sN2patternField
            End Get
            Set
                Me.sN2patternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN3pattern() As String
            Get
                Return Me.sN3patternField
            End Get
            Set
                Me.sN3patternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN4pattern() As String
            Get
                Return Me.sN4patternField
            End Get
            Set
                Me.sN4patternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VoltageType() As String
            Get
                Return Me.voltageTypeField
            End Get
            Set
                Me.voltageTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Power() As String
            Get
                Return Me.powerField
            End Get
            Set
                Me.powerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mainboard() As String
            Get
                Return Me.mainboardField
            End Get
            Set
                Me.mainboardField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecialRequirement() As String
            Get
                Return Me.specialRequirementField
            End Get
            Set
                Me.specialRequirementField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Boxsize() As Integer
            Get
                Return Me.boxsizeField
            End Get
            Set
                Me.boxsizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Palletsize() As Integer
            Get
                Return Me.palletsizeField
            End Get
            Set
                Me.palletsizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As String
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Remarks() As String
            Get
                Return Me.remarksField
            End Get
            Set
                Me.remarksField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExtSNSameIntSN() As Boolean
            Get
                Return Me.extSNSameIntSNField
            End Get
            Set
                Me.extSNSameIntSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConfirmSN() As Boolean
            Get
                Return Me.confirmSNField
            End Get
            Set
                Me.confirmSNField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService")>  _
    Partial Public Class ProductData
        
        Private modelField As String
        
        Private descField As String
        
        Private buField As String
        
        Private customerField As String
        
        Private cPNField As String
        
        Private extSerialPatternField As String
        
        Private sN2patternField As String
        
        Private sN3patternField As String
        
        Private sN4patternField As String
        
        Private mainBoardField As String
        
        Private specialReqField As String
        
        Private boxsizeField As Integer
        
        Private palletsizeField As Integer
        
        Private revisionField As String
        
        Private extSNSameIntSNField As Boolean
        
        Private confirmSNField As Boolean
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Desc() As String
            Get
                Return Me.descField
            End Get
            Set
                Me.descField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BU() As String
            Get
                Return Me.buField
            End Get
            Set
                Me.buField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Customer() As String
            Get
                Return Me.customerField
            End Get
            Set
                Me.customerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CPN() As String
            Get
                Return Me.cPNField
            End Get
            Set
                Me.cPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExtSerialPattern() As String
            Get
                Return Me.extSerialPatternField
            End Get
            Set
                Me.extSerialPatternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN2pattern() As String
            Get
                Return Me.sN2patternField
            End Get
            Set
                Me.sN2patternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN3pattern() As String
            Get
                Return Me.sN3patternField
            End Get
            Set
                Me.sN3patternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN4pattern() As String
            Get
                Return Me.sN4patternField
            End Get
            Set
                Me.sN4patternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MainBoard() As String
            Get
                Return Me.mainBoardField
            End Get
            Set
                Me.mainBoardField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecialReq() As String
            Get
                Return Me.specialReqField
            End Get
            Set
                Me.specialReqField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Boxsize() As Integer
            Get
                Return Me.boxsizeField
            End Get
            Set
                Me.boxsizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Palletsize() As Integer
            Get
                Return Me.palletsizeField
            End Get
            Set
                Me.palletsizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As String
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExtSNSameIntSN() As Boolean
            Get
                Return Me.extSNSameIntSNField
            End Get
            Set
                Me.extSNSameIntSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConfirmSN() As Boolean
            Get
                Return Me.confirmSNField
            End Get
            Set
                Me.confirmSNField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService")>  _
    Partial Public Class AccessCard
        
        Private accessCardIDField As String
        
        Private emplogeeIDField As String
        
        Private nameField As String
        
        Private deptField As String
        
        '''<remarks/>
        Public Property AccessCardID() As String
            Get
                Return Me.accessCardIDField
            End Get
            Set
                Me.accessCardIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmplogeeID() As String
            Get
                Return Me.emplogeeIDField
            End Get
            Set
                Me.emplogeeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Dept() As String
            Get
                Return Me.deptField
            End Get
            Set
                Me.deptField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService")>  _
    Partial Public Class StatusHeaderStructure
        
        Private modelField As String
        
        Private pCBAField As String
        
        Private poField As String
        
        Private processField As String
        
        Private resultField As String
        
        Private intSerialField As String
        
        Private extSerialField As String
        
        Private operatorNameField As String
        
        Private currDateField As Date
        
        Private testerField As String
        
        Private programNameField As String
        
        Private programVersionField As String
        
        Private iPSNoField As String
        
        Private iPSVersionField As String
        
        Private salesOrderField As String
        
        Private custPNField As String
        
        Private custRevField As String
        
        Private sN2Field As String
        
        Private sN3Field As String
        
        Private sN4Field As String
        
        Private boxIDField As String
        
        Private palletIDField As String
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PCBA() As String
            Get
                Return Me.pCBAField
            End Get
            Set
                Me.pCBAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PO() As String
            Get
                Return Me.poField
            End Get
            Set
                Me.poField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Process() As String
            Get
                Return Me.processField
            End Get
            Set
                Me.processField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IntSerial() As String
            Get
                Return Me.intSerialField
            End Get
            Set
                Me.intSerialField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExtSerial() As String
            Get
                Return Me.extSerialField
            End Get
            Set
                Me.extSerialField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OperatorName() As String
            Get
                Return Me.operatorNameField
            End Get
            Set
                Me.operatorNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CurrDate() As Date
            Get
                Return Me.currDateField
            End Get
            Set
                Me.currDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tester() As String
            Get
                Return Me.testerField
            End Get
            Set
                Me.testerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProgramName() As String
            Get
                Return Me.programNameField
            End Get
            Set
                Me.programNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProgramVersion() As String
            Get
                Return Me.programVersionField
            End Get
            Set
                Me.programVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IPSNo() As String
            Get
                Return Me.iPSNoField
            End Get
            Set
                Me.iPSNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IPSVersion() As String
            Get
                Return Me.iPSVersionField
            End Get
            Set
                Me.iPSVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SalesOrder() As String
            Get
                Return Me.salesOrderField
            End Get
            Set
                Me.salesOrderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustPN() As String
            Get
                Return Me.custPNField
            End Get
            Set
                Me.custPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustRev() As String
            Get
                Return Me.custRevField
            End Get
            Set
                Me.custRevField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN2() As String
            Get
                Return Me.sN2Field
            End Get
            Set
                Me.sN2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN3() As String
            Get
                Return Me.sN3Field
            End Get
            Set
                Me.sN3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN4() As String
            Get
                Return Me.sN4Field
            End Get
            Set
                Me.sN4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BoxID() As String
            Get
                Return Me.boxIDField
            End Get
            Set
                Me.boxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PalletID() As String
            Get
                Return Me.palletIDField
            End Get
            Set
                Me.palletIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/eTrace_TestDataCollection/eTraceTDCService")>  _
    Partial Public Class OrderInfo
        
        Private matlNoField As String
        
        Private matlDescField As String
        
        Private orderQtyField As Double
        
        Private openQtyField As Double
        
        Private startDateField As Date
        
        Private errorMsgField As String
        
        '''<remarks/>
        Public Property MatlNo() As String
            Get
                Return Me.matlNoField
            End Get
            Set
                Me.matlNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MatlDesc() As String
            Get
                Return Me.matlDescField
            End Get
            Set
                Me.matlDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrderQty() As Double
            Get
                Return Me.orderQtyField
            End Get
            Set
                Me.orderQtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OpenQty() As Double
            Get
                Return Me.openQtyField
            End Get
            Set
                Me.openQtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StartDate() As Date
            Get
                Return Me.startDateField
            End Get
            Set
                Me.startDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorMsg() As String
            Get
                Return Me.errorMsgField
            End Get
            Set
                Me.errorMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetResultCompletedEventHandler(ByVal sender As Object, ByVal e As GetResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadTestDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReadTestDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadTestDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetOrderInfoFromSAPCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderInfoFromSAPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderInfoFromSAPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As OrderInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),OrderInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetOrderInfoFromOracleCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderInfoFromOracleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderInfoFromOracleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSubAmountCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubAmountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubAmountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPoQtyCompletedEventHandler(ByVal sender As Object, ByVal e As GetPoQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPoQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveTestResultCompletedEventHandler(ByVal sender As Object, ByVal e As SaveTestResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveTestResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SerialNoInUseCompletedEventHandler(ByVal sender As Object, ByVal e As SerialNoInUseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SerialNoInUseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AddlDataInUseCompletedEventHandler(ByVal sender As Object, ByVal e As AddlDataInUseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddlDataInUseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ModelDefinedCompletedEventHandler(ByVal sender As Object, ByVal e As ModelDefinedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModelDefinedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CopyCardInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CopyCardInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyCardInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAccessCardUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccessCardUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccessCardUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As AccessCard
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),AccessCard)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadSerialNoFromDBCompletedEventHandler(ByVal sender As Object, ByVal e As ReadSerialNoFromDBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadSerialNoFromDBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ProductReworkCompletedEventHandler(ByVal sender As Object, ByVal e As ProductReworkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProductReworkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DeleteTestResultCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteTestResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteTestResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetModelInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetModelInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetModelInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ErrorLoggingCompletedEventHandler(ByVal sender As Object, ByVal e As ErrorLoggingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ErrorLoggingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub updateIDSwopCompletedEventHandler(ByVal sender As Object, ByVal e As updateIDSwopCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updateIDSwopCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadProductInfoByCPNCompletedEventHandler(ByVal sender As Object, ByVal e As ReadProductInfoByCPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadProductInfoByCPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProductData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProductData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRuleFromDBCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRuleFromDBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRuleFromDBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub postProdMasterCompletedEventHandler(ByVal sender As Object, ByVal e As postProdMasterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class postProdMasterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DelProdMasterCompletedEventHandler(ByVal sender As Object, ByVal e As DelProdMasterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelProdMasterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRepairCodeCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRepairCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRepairCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveTDCRepairCodeCompletedEventHandler(ByVal sender As Object, ByVal e As SaveTDCRepairCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveTDCRepairCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRepairDataBySerialNoCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRepairDataBySerialNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRepairDataBySerialNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetBomFromSAPCompletedEventHandler(ByVal sender As Object, ByVal e As GetBomFromSAPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBomFromSAPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSpecifySeatItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetSpecifySeatItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSpecifySeatItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveRepairDataCompletedEventHandler(ByVal sender As Object, ByVal e As SaveRepairDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveRepairDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MatchingNoCompletedEventHandler(ByVal sender As Object, ByVal e As MatchingNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MatchingNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SerialNoIsAccessCardCompletedEventHandler(ByVal sender As Object, ByVal e As SerialNoIsAccessCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SerialNoIsAccessCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MatchingAccountCompletedEventHandler(ByVal sender As Object, ByVal e As MatchingAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MatchingAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetBoxQtyCompletedEventHandler(ByVal sender As Object, ByVal e As GetBoxQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBoxQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetBoxInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetBoxInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBoxInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BoxInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BoxInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPalletInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetPalletInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPalletInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BoxInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BoxInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPalletQtyCompletedEventHandler(ByVal sender As Object, ByVal e As GetPalletQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPalletQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BoxExesistInPalletCompletedEventHandler(ByVal sender As Object, ByVal e As BoxExesistInPalletCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BoxExesistInPalletCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BoxInOtherPalletCompletedEventHandler(ByVal sender As Object, ByVal e As BoxInOtherPalletCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BoxInOtherPalletCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BoxHasOtherProdCompletedEventHandler(ByVal sender As Object, ByVal e As BoxHasOtherProdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BoxHasOtherProdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadSDCartonsCompletedEventHandler(ByVal sender As Object, ByVal e As ReadSDCartonsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadSDCartonsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadCartonIDCompletedEventHandler(ByVal sender As Object, ByVal e As ReadCartonIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadCartonIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveCartonIDCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCartonIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCartonIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RemoveCartonIDCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveCartonIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveCartonIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetShipInfoBySNCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipInfoBySNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipInfoBySNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ShipInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ShipInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetShipInfoByBoxIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipInfoByBoxIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipInfoByBoxIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ShipInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ShipInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ChangeBoxCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveFlatFileMessageCompletedEventHandler(ByVal sender As Object, ByVal e As SaveFlatFileMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveFlatFileMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub saveFlatFileSNCompletedEventHandler(ByVal sender As Object, ByVal e As saveFlatFileSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveFlatFileSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckFlatFileSNCompletedEventHandler(ByVal sender As Object, ByVal e As CheckFlatFileSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckFlatFileSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ChangePalletCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePalletCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePalletCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetFlatfileCompletedEventHandler(ByVal sender As Object, ByVal e As GetFlatfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFlatfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getFlatFilePropertiesCompletedEventHandler(ByVal sender As Object, ByVal e As getFlatFilePropertiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getFlatFilePropertiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub setFlatFilePropertiesCompletedEventHandler(ByVal sender As Object, ByVal e As setFlatFilePropertiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setFlatFilePropertiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonInputCompletedEventHandler(ByVal sender As Object, ByVal e As AndonInputCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonInputCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ExistsModelCompletedEventHandler(ByVal sender As Object, ByVal e As ExistsModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExistsModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonActualQtyCompletedEventHandler(ByVal sender As Object, ByVal e As AndonActualQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonActualQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonActualQtyofProcessCompletedEventHandler(ByVal sender As Object, ByVal e As AndonActualQtyofProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonActualQtyofProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonFailedPercentCompletedEventHandler(ByVal sender As Object, ByVal e As AndonFailedPercentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonFailedPercentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonFailedQtyCompletedEventHandler(ByVal sender As Object, ByVal e As AndonFailedQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonFailedQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonLineStopTimeCompletedEventHandler(ByVal sender As Object, ByVal e As AndonLineStopTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonLineStopTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonLineStopFreqCompletedEventHandler(ByVal sender As Object, ByVal e As AndonLineStopFreqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonLineStopFreqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAndonProdScheCompletedEventHandler(ByVal sender As Object, ByVal e As GetAndonProdScheCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAndonProdScheCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateAndonProdScheCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAndonProdScheCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAndonProdScheCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonProjectedQtyCompletedEventHandler(ByVal sender As Object, ByVal e As AndonProjectedQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonProjectedQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub KillLargeReportsCompletedEventHandler(ByVal sender As Object, ByVal e As KillLargeReportsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class KillLargeReportsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub TimeToGMTCompletedEventHandler(ByVal sender As Object, ByVal e As TimeToGMTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TimeToGMTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintMacAddressCompletedEventHandler(ByVal sender As Object, ByVal e As PrintMacAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintMacAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReprintMacAddressCompletedEventHandler(ByVal sender As Object, ByVal e As ReprintMacAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReprintMacAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPreMacAddressCompletedEventHandler(ByVal sender As Object, ByVal e As GetPreMacAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPreMacAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetLengthMacAddressCompletedEventHandler(ByVal sender As Object, ByVal e As GetLengthMacAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLengthMacAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabelsCompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace

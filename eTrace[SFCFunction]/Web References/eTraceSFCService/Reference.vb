'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace eTraceSFCService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="eTraceOracleERPSoap", [Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class eTraceOracleERP
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AndonInputOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExistsModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonActualQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonActualQtyofProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonFailedPercentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonFailedQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonLineStopTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonLineStopFreqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAndonProdScheOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAndonProdScheOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AndonProjectedQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LEDControlByRackOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LEDControlBySlotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBoxIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckProdLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConfirmCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConfirmMOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadEventIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintSMTDJLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelMOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessDockingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckProdLine_LDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConfirmCLID_LDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadEventID_LDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintSMTDJLabel_LDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessDocking_LDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDJInfoSMTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductStructureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NewSeqNOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobHeader2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateJobStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProdLineByLineTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMTMachinesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProdLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMSLMachineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMSLModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteMslOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertMslOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobMslOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecSPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StockTake_BkpBFAdjustOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForLossOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForGainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForNotFoundOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForNewFindOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForDiffLocatorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForLossDiffOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForGainDiffOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StockTake_BkpAfterAdjustOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BFC_GetWeekCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BFC_GetBFSubinvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BFC_DelOldBFCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BFC_GetCLIDInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Save_BFCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Secondary_InventoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Sub_LocatorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_List_Sub_LocatorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Find_List_Sub_LocatorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Add_Sub_LocatorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Delete_Sub_LocatorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Validate_item_numberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private add_floor_stock_materialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_List_Floor_StockOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Find_List_Floor_StockOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Delete_Floor_StockOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Update_Floor_StockOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Generic_DispositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_List_Generic_DispositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private add_generic_dispositionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Delete_Generic_DispositionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_List_Item_MappingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private add_List_Item_MappingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Delete_List_Item_MappingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadCustomReportDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_item_wastageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Insert_item_wastageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private delete_xxetr_item_wastageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Update_xxetr_item_wastageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveTDCRepairCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRepairCodeForQCcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsProductProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActiveEventOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActiveJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActiveEvent_ActiveJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActiveEvent_ActiveJob_LDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EventLightOffOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLocConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWMSConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemUsageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemUsage_LDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMS_Check_PickedFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_MO_InformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_MO_Information_SQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_MO_Information_LDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_SubinvLoc_for_CSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_MO_Information_CS_SQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_MO_For_LEDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_RefQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_JobInform_MOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMS_CheckSlotShortageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMS_CheckSlotAvlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllCLIDInfo_LEDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMatMPQOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCLIDInfo_LEDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCLIDInfo_LED_ByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCLIDInfo_RTLotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCLIDCombinationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMS_Save_TableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMS_Save_Table2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMS_Save_Table3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMS_Post_MO_AllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMS_Save_AllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCycleCountDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCycleCountListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostCycleCountAllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostOccupiedAllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostEmptyAllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostConditionalAllocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCLIDMissingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMS_Check_EventIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMS_Check_RackOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsAuthorizedPCBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateKanbanLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ErrorLoggingOTOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EmployeeIDLoginOTOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRepairCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRepCodesByCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRepDefectCodeByCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRepCodeGropByDefectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRepDefectCodeByCauseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRepairDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadFailDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCLIDDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckOTOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveRepairDetailDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadStructureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StandardTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ServerTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadWIPFlowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RepScrapOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RDCScrapOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RDCSaveIIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FailRecordIIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RDCScrapIIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RDC121MatlInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RDCMatInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RepRaiseTimesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveRepairRecordDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SkipBIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadFailItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadNDFDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FailRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NewFailDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RDCWIPFLowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RDCSaveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSpecifySeatItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSpecifySeatItemByOrgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPdControlByDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePOQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATELockingRDCWIPINOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOraItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ArchiveCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSTypeBinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DisableManualItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckNoMappingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CountNoMappingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckMigrateStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCLMasterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SumSAPIMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckQtyMatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignClientIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadToOracleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IssueFmOracleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckSAPPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Check_SAPPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RollbackCLIDInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_STCtrlListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ST_CheckActionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ST_CompActionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateActionStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Lock_eTraceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnLock_eTraceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearPINameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrgList_StockTakeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPINameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StockTake_CpySubLocOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyPIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCLMasterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExtCnt2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCount1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCount2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckCountOptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StockTake_ValidateSubLocOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckInSubLocListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBFSubinvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCLIDInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckStopFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Save_STChangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckNotFoundOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GenVarRptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnableScanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StopScanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NoValidateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WithValidateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BkpRmvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SumQtyForPIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StockTake_AssignExpDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDiffLocatorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPIResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropertiesNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaxTestRoundOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaxFailureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CleanTestResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPInOQAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckExtSNSameIntSNByModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Employee_LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Employee_CertifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Loading_CheckModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AutoStopLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Laser_VerifyUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Laser_VerifyUnitTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_RegisterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_TypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_MaintainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_RepairOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_InActiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_RegisterViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_InActiveLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_InActiveLogByFixtureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_MaintainLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_RepairLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_TypeViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Fixture_UpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATE_FixtureVerifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATE_CreateRelationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATE_FixtureSignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATE_ReturnSNbySlotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATE_ReturnSNbyFixtureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATE_ReleaseRelationbySlotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATE_ReleaseRelationbyFixtureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATE_IntSlotReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Function_ProcessVerifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Depanel_VerifyMatching1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Test_ReflowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Test_ItemDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSystemGMTDateTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIP_UpdateStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Test_ReflowProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Depanel_VerifyLastTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_WIPFGSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_WIPTestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_MaintainExpireLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_RepairExpireLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIP_UpdateParameterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Temp_InquiryProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Temp_UpdateProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadOrgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFlatFilePropertiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setFlatFilePropertiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveFlatFileMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveFlatFileSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFlatfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckFlatFileSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMacAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetResultAndPCBAListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IDUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPMatchingNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DetachMotherBoardValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DetachOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SNListChangeBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeRevisionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCartonInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipInfoByBoxIDSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StructureReadByPCBAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BackToEepromOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductCPNbyModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetModelByExtSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getShipmentByBoxidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SFCDBoardIsValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_CusTableListsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmplogeeIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCardInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyCardInfoZSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHRTrainingInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLocksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLockByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnlockdByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveAndUnlockdByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveSmartCardHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSmartCardHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadFlowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEquipmentDetailInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePMdataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModelDefinedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModelStructureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProdQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDJMatchedQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertPoQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CountPoQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CountPoQtyIIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IntSNIsValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadPOQtyByPOAndPCBAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PCBARoutingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PCBListOfReworkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPMatching1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPVisualInspectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPBurnInOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPIDSwopOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPIDSwopSimplifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPModelSwopOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPCBAinWIPHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MI_getPCBAinWIPHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DBoardIsValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModelConfiguratorSNValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IntSNPatternOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderInfoFromOracleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ComponentReplacementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckCompIssueToDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MatchingAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DJinBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPrevResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LargeThanMaxTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPInOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkSamplingTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadDBoardsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPOutMatchingNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataByIntSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RDCBoardSNValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MatListOnPCBAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IDSwopOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IntSNRecycleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IntSNRecycleIIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductCPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetResultListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetResultAndAttributesListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBoxInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLabel1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPackingListLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBoxQtyInPalletOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATEWIPInOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATEWIPoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ATEWIPOutDirectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsWipInOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BurnInWipOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPPackingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintSNLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintPakingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBurnInTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipInfoBySNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipInfoByBoxIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipInfoByPalletIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePalletOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OQAWipInOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExistsFunctionalTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TLAFlowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OQACosmeticOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLabelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReworkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Rework_NewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TraceLevelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPanelSizeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IntSNIsValidByPanelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPMatchingByPanelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPanelIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WIPReworkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadMIDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMIFileDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveMIRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetModelByIntSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPCBAByIntSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLastTestResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getNowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPONumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkPermissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkTMFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkQSFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getExceptionReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveBuildPlanDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SkipLotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkIPPFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Upload_EJITIPPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProdFloorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEjitIPPListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getIPPDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_TCLIDDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_TItemDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_TAgingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_TDJDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_TCLIDIssueDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_TCLIDInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_AMLIProVSeTraceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_AMLIProVSeTrace2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_TCLIDMSLDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_MPNOnHandOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_OnHandMFGMPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_TIssueCompareOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_TMaterialTransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_GeteTraceOHOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_StandardTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_GetOHQTYWithMPNListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_GeteTraceItemOHMPQOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Report_GetConnectStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaterialInfoByCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaterialToXMLByCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaterialToXMLByCLID2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDJToXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaterialByCLIDToDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReturnCLIDByDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidReqlineStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMatlByDJModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMatlByCLIDDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMatlCLIDbyDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintLabelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveEMCResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintMacAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReprintMacAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPreMacAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLengthMacAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTravellerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllTravellerDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTravellerInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllModelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPrinterServerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDaughterBdByDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMTQCByDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMTQCModelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveSMTQCDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllSMTQCDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSMTQCDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LookUpProductInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RevinBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloneProductInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadProductInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LookUpMSLInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadProductCPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LookUpLabelParaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LookUpTransParaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LookUpSFCInfoByModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadProductStructureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadProductRoutingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadProductPropertiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadLabelInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadProcessInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTransInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsAuthenticateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LookUpRoutingInfoByOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRoutingInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductLineInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsReworkUnitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsLastProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsBottomPCBAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProdLineByOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProductLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEquipmentInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEquipmentInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MOSpecialPickOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MOSpecialPostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadPOrderListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadPOrderItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePOrderHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PickOrderPostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMOFromDNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDNMOLinesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShipmentPostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDNPickedListsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDNPickedCLIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SOReversalPostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintProcessLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadProcessLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PCBSlotLightOnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMatListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SLEDSaveChangesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SLED_ReviewUpdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SLED_FailUpdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private eTrace_UpdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SLEDSaveTraceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private eTraceUpd_ReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private eTraceUpd_FailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private eTraceUpd_PassOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetModelRevisionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetModelRevDJ_WithTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetModelRevDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSNListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Change_ModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMTCCNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SMTCycleCountHHOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SMTCycleCountCLIDValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SMTCCSaveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SMTCLIDStatusChangedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SMTCLIDStatusChangedByPCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMTCCListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMTScanedCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCyDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCycleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCLIDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TBoxDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TestupdataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMRPDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SIT_MassPrintCLIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SIT_DeleteCLIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SIT_Print_OnHandOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadProductRoutingLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadProductChangeLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyDJInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyDJinfoUseServerNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isValidDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private insertTDHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRuleFromDBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private postProdMasterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelProdMasterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetwipflowdataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetModelRevForTEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProdLineAndResultForTEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckFixutureIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWipHeaderByIntSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPanelIDByIntSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearFixtureIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FixtureMountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TE_IntSNListReadbyFixtureIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TE_ReworkUnitFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TE_UnbindFixtureIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeExpdateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BatchChangeExpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckCLIDExpFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getKanbanIDinfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateKanbanCodeDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPNFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBuildPanFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommitBuildPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveKanbanDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private uploadQuotaSharingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private uploadTransmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getQuotaSharingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTransmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextBPIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBuildPlanListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBuildPlandetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLocatorsPBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRTNo_MiscRcptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextInvIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBatchFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPIFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidMRDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidPIDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidINVNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidBatchNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostMROperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintCLIDforMROperationCompleted As System.Threading.SendOrPostCallback
        
        Private CS_GetCLIDInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CS_UpdateCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBerthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDashboardDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadEMCfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidBatchDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostBatchListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BJ_GetDJInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BJ_CreationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BJ_SaveChangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBJInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BJ_GetBJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BJ_GenMOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LEDDashBoardByRackOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LEDDashBoardPCBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_SrcSubInvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_AvlQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMSBSourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Save_TemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveProdPickingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTemplateItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDJInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Update_CLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Post_DJ_ReversalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTOItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Search_TemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Check_TemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Search_LockTOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Search_OpenTOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Unlock_PickOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClosePickOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_PickOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Check_PickListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostProdPickingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBOMFromERPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListFromExcelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_DestSubLocOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_ChangeExcelFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderInfoFromERPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDJInfoFromERPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderInfoFromETRACEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIDInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Check_HW_FlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Flag_AutoGetBOMRevOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Post_DJ_CompletionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private get_uploadinforOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DJ_CompletionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DJ_Completion_BoxIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DJCompletion_For_PMJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CountOfBoxIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSOLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Getrelease_linesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private writeClidRefPoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllowEditDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllowDiffDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DJCmp_GetBoxInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckDJforCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateCLIDforPoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CountOfPoCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveCreateCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveCreatCLIDforPoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RePrintCreateCLIDforPOCLIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckCHDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadCLIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadCLIDDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMOFromDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDJMOLinesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MOrderPostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MOEarlyLotPostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LabelConversionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemMasterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemDescriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PartNoTransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterOrgTransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRTVLabelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MiscRTVOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CVMIRTVOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemRTLotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemOnhandOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadLabelIDInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LabelGenerationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTypeIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadLabelIDsForDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_LabelInfoHasSameLotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Update_LabelInfoHasSameLotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPalletListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStatusListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePalletListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaterialInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMaterialOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckItemMPNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadSuppDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveSuppDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPOLineMPQOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemMPQOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRecDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessMatMovementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveDCodeLotNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintRTSlipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintRECLabelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadShipmentDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadIRDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateIRRTNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CleanBoxIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetValidSourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PutawayPostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMRBSubInvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadBlockDCLNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveBlockDCLNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SourceForCompToDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WS_CompToDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckUTurnSubinvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadCLID_UTurnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UTurnDeliveryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckUTurnCLIDFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostUTurnStatusChangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckLocRTListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckCLIDDisableFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateSubinvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBatchDisableCLIDFormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostBatchDisableCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSlotCheckOptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PackingManagementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SFGetDcodeLnforIntSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SFGetDcodeLnforSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Save_SubInvTransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Check_CLID_InfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MatSourceReadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearPalletIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RepSourceReadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckDestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Check_DestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Check_Return_OptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private account_alias_batch_receiptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private account_alias_batch_issueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private account_receiptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private save_account_receiptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private account_alias_receiptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private account_issueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private post_pull_returnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private account_issue_rcptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private account_alias_issueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private save_account_issueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private post_misc_rcptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LabelForMiscReceiptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExportHWDataInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private eTrace_UpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Misc_issue_rcptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private post_push_returnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private component_returnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeCLIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRTNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadUserDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadRoleDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostUserDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostRoleDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InvMigCurrStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InvMigUserCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InvMigrationStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDaughterBoardSNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMailListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AutoMail_SiplaceDataCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AutoSendMail_PastDueDJOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteMOAllocatedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RedoLedMOAllocatedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadBJData_to_OracleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadAutoEJIT_DJSum_to_OracleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadAutoEJIT_DJList_to_OracleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AutoCreatedEJITOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AutoCreatedEJIT_ByDayOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ErrorLoggingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ErrorLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ErrorLogOTOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetServerDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConfigValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrinterCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateItemRevisionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateItemTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateSubLocOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_LocatorSPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SlotCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SlotLightOnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DockSlotLightOnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_ReasonCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_SubinvLocOperationCompleted As System.Threading.SendOrPostCallback
        
        Private get_iteminfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private get_itemonhandOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_AccountAliasOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_TransactionTypesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetScreenElementsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintMatlLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintNoMatlLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WritePrintLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabel_ProductionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabel_LAGOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabel_CVTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabelForAppsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabelForEtrace2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabelForPrtSvrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabelForTemp01OperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabelForTemp02OperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabelForTemp03OperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabelForTemp04OperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenPrintLabelForTemp05OperationCompleted As System.Threading.SendOrPostCallback
        
        Private updatePrintLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintCLIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProcessPropertiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccessCardUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMGTraceLevelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAMLDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrgListsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoginDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHHVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearBoxIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Subinv_RestrictOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCOOListsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Post_SubInvTransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShowMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidatePalletOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateBerthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintInterOrgCLIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintCH09LabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConnectionTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadLabelIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SplitLabelIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LabelDataUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadPalletIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PalletManagementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCartonLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintCartonLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.eTrace_SFCFunction_.My.MySettings.Default.eTrace_SFCFunction__eTraceSFCService_eTraceOracleERP
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AndonInputCompleted As AndonInputCompletedEventHandler
        
        '''<remarks/>
        Public Event ExistsModelCompleted As ExistsModelCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonActualQtyCompleted As AndonActualQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonActualQtyofProcessCompleted As AndonActualQtyofProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonFailedPercentCompleted As AndonFailedPercentCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonFailedQtyCompleted As AndonFailedQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonLineStopTimeCompleted As AndonLineStopTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonLineStopFreqCompleted As AndonLineStopFreqCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAndonProdScheCompleted As GetAndonProdScheCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAndonProdScheCompleted As UpdateAndonProdScheCompletedEventHandler
        
        '''<remarks/>
        Public Event AndonProjectedQtyCompleted As AndonProjectedQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event LEDControlByRackCompleted As LEDControlByRackCompletedEventHandler
        
        '''<remarks/>
        Public Event LEDControlBySlotCompleted As LEDControlBySlotCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBoxIDCompleted As CheckBoxIDCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckProdLineCompleted As CheckProdLineCompletedEventHandler
        
        '''<remarks/>
        Public Event ConfirmCLIDCompleted As ConfirmCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event ConfirmMOCompleted As ConfirmMOCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadEventIDCompleted As ReadEventIDCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintSMTDJLabelCompleted As PrintSMTDJLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelMOCompleted As CancelMOCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessDockingCompleted As ProcessDockingCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckProdLine_LDCompleted As CheckProdLine_LDCompletedEventHandler
        
        '''<remarks/>
        Public Event ConfirmCLID_LDCompleted As ConfirmCLID_LDCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadEventID_LDCompleted As ReadEventID_LDCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintSMTDJLabel_LDCompleted As PrintSMTDJLabel_LDCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessDocking_LDCompleted As ProcessDocking_LDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDJInfoSMTCompleted As GetDJInfoSMTCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductStructureCompleted As GetProductStructureCompletedEventHandler
        
        '''<remarks/>
        Public Event NewSeqNOCompleted As NewSeqNOCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobHeaderCompleted As GetJobHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobHeader2Completed As GetJobHeader2CompletedEventHandler
        
        '''<remarks/>
        Public Event InsertJobCompleted As InsertJobCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateJobCompleted As UpdateJobCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateJobStatusCompleted As UpdateJobStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProdLineByLineTypeCompleted As GetProdLineByLineTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMTMachinesCompleted As GetSMTMachinesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProdLineCompleted As GetProdLineCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMSLMachineCompleted As GetMSLMachineCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMSLModelCompleted As GetMSLModelCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteMslCompleted As DeleteMslCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertMslCompleted As InsertMslCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobMslCompleted As GetJobMslCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecSPCompleted As ExecSPCompletedEventHandler
        
        '''<remarks/>
        Public Event StockTake_BkpBFAdjustCompleted As StockTake_BkpBFAdjustCompletedEventHandler
        
        '''<remarks/>
        Public Event ForLossCompleted As ForLossCompletedEventHandler
        
        '''<remarks/>
        Public Event ForGainCompleted As ForGainCompletedEventHandler
        
        '''<remarks/>
        Public Event ForNotFoundCompleted As ForNotFoundCompletedEventHandler
        
        '''<remarks/>
        Public Event ForNewFindCompleted As ForNewFindCompletedEventHandler
        
        '''<remarks/>
        Public Event ForDiffLocatorCompleted As ForDiffLocatorCompletedEventHandler
        
        '''<remarks/>
        Public Event ForLossDiffCompleted As ForLossDiffCompletedEventHandler
        
        '''<remarks/>
        Public Event ForGainDiffCompleted As ForGainDiffCompletedEventHandler
        
        '''<remarks/>
        Public Event StockTake_BkpAfterAdjustCompleted As StockTake_BkpAfterAdjustCompletedEventHandler
        
        '''<remarks/>
        Public Event BFC_GetWeekCodeCompleted As BFC_GetWeekCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event BFC_GetBFSubinvCompleted As BFC_GetBFSubinvCompletedEventHandler
        
        '''<remarks/>
        Public Event BFC_DelOldBFCountCompleted As BFC_DelOldBFCountCompletedEventHandler
        
        '''<remarks/>
        Public Event BFC_GetCLIDInfoCompleted As BFC_GetCLIDInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event Save_BFCountCompleted As Save_BFCountCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Secondary_InventoryCompleted As Get_Secondary_InventoryCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Sub_LocatorCompleted As Get_Sub_LocatorCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_List_Sub_LocatorCompleted As Get_List_Sub_LocatorCompletedEventHandler
        
        '''<remarks/>
        Public Event Find_List_Sub_LocatorCompleted As Find_List_Sub_LocatorCompletedEventHandler
        
        '''<remarks/>
        Public Event Add_Sub_LocatorCompleted As Add_Sub_LocatorCompletedEventHandler
        
        '''<remarks/>
        Public Event Delete_Sub_LocatorCompleted As Delete_Sub_LocatorCompletedEventHandler
        
        '''<remarks/>
        Public Event Validate_item_numberCompleted As Validate_item_numberCompletedEventHandler
        
        '''<remarks/>
        Public Event add_floor_stock_materialCompleted As add_floor_stock_materialCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_List_Floor_StockCompleted As Get_List_Floor_StockCompletedEventHandler
        
        '''<remarks/>
        Public Event Find_List_Floor_StockCompleted As Find_List_Floor_StockCompletedEventHandler
        
        '''<remarks/>
        Public Event Delete_Floor_StockCompleted As Delete_Floor_StockCompletedEventHandler
        
        '''<remarks/>
        Public Event Update_Floor_StockCompleted As Update_Floor_StockCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Generic_DispositionCompleted As Get_Generic_DispositionCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_List_Generic_DispositionCompleted As Get_List_Generic_DispositionCompletedEventHandler
        
        '''<remarks/>
        Public Event add_generic_dispositionsCompleted As add_generic_dispositionsCompletedEventHandler
        
        '''<remarks/>
        Public Event Delete_Generic_DispositionsCompleted As Delete_Generic_DispositionsCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_List_Item_MappingCompleted As Get_List_Item_MappingCompletedEventHandler
        
        '''<remarks/>
        Public Event add_List_Item_MappingCompleted As add_List_Item_MappingCompletedEventHandler
        
        '''<remarks/>
        Public Event Delete_List_Item_MappingCompleted As Delete_List_Item_MappingCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadCustomReportDataCompleted As LoadCustomReportDataCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_item_wastageCompleted As Get_item_wastageCompletedEventHandler
        
        '''<remarks/>
        Public Event Insert_item_wastageCompleted As Insert_item_wastageCompletedEventHandler
        
        '''<remarks/>
        Public Event delete_xxetr_item_wastageCompleted As delete_xxetr_item_wastageCompletedEventHandler
        
        '''<remarks/>
        Public Event Update_xxetr_item_wastageCompleted As Update_xxetr_item_wastageCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveTDCRepairCodeCompleted As SaveTDCRepairCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRepairCodeForQCcodeCompleted As ReadRepairCodeForQCcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event IsProductProcessCompleted As IsProductProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActiveEventCompleted As GetActiveEventCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActiveJobCompleted As GetActiveJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActiveEvent_ActiveJobCompleted As GetActiveEvent_ActiveJobCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActiveEvent_ActiveJob_LDCompleted As GetActiveEvent_ActiveJob_LDCompletedEventHandler
        
        '''<remarks/>
        Public Event EventLightOffCompleted As EventLightOffCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLocConfigCompleted As GetLocConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWMSConfigCompleted As GetWMSConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemUsageCompleted As GetItemUsageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemUsage_LDCompleted As GetItemUsage_LDCompletedEventHandler
        
        '''<remarks/>
        Public Event WMS_Check_PickedFlagCompleted As WMS_Check_PickedFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_MO_InformationCompleted As Get_MO_InformationCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_MO_Information_SQLCompleted As Get_MO_Information_SQLCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_MO_Information_LDCompleted As Get_MO_Information_LDCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_SubinvLoc_for_CSCompleted As Get_SubinvLoc_for_CSCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_MO_Information_CS_SQLCompleted As Get_MO_Information_CS_SQLCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_MO_For_LEDCompleted As Get_MO_For_LEDCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_RefQtyCompleted As Get_RefQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_JobInform_MOCompleted As Get_JobInform_MOCompletedEventHandler
        
        '''<remarks/>
        Public Event WMS_CheckSlotShortageCompleted As WMS_CheckSlotShortageCompletedEventHandler
        
        '''<remarks/>
        Public Event WMS_CheckSlotAvlCompleted As WMS_CheckSlotAvlCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllCLIDInfo_LEDCompleted As GetAllCLIDInfo_LEDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMatMPQCompleted As GetMatMPQCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCLIDInfo_LEDCompleted As GetCLIDInfo_LEDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCLIDInfo_LED_ByIDCompleted As GetCLIDInfo_LED_ByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCLIDInfo_RTLotCompleted As GetCLIDInfo_RTLotCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCLIDCombinationCompleted As GetCLIDCombinationCompletedEventHandler
        
        '''<remarks/>
        Public Event WMS_Save_TableCompleted As WMS_Save_TableCompletedEventHandler
        
        '''<remarks/>
        Public Event WMS_Save_Table2Completed As WMS_Save_Table2CompletedEventHandler
        
        '''<remarks/>
        Public Event WMS_Save_Table3Completed As WMS_Save_Table3CompletedEventHandler
        
        '''<remarks/>
        Public Event WMS_Post_MO_AllocationCompleted As WMS_Post_MO_AllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event WMS_Save_AllocationCompleted As WMS_Save_AllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCycleCountDataCompleted As GetCycleCountDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCycleCountListCompleted As GetCycleCountListCompletedEventHandler
        
        '''<remarks/>
        Public Event PostCycleCountAllocationCompleted As PostCycleCountAllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event PostOccupiedAllocationCompleted As PostOccupiedAllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event PostEmptyAllocationCompleted As PostEmptyAllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event PostConditionalAllocationCompleted As PostConditionalAllocationCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCLIDMissingCompleted As UpdateCLIDMissingCompletedEventHandler
        
        '''<remarks/>
        Public Event WMS_Check_EventIDCompleted As WMS_Check_EventIDCompletedEventHandler
        
        '''<remarks/>
        Public Event WMS_Check_RackCompleted As WMS_Check_RackCompletedEventHandler
        
        '''<remarks/>
        Public Event IsAuthorizedPCBCompleted As IsAuthorizedPCBCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateKanbanLabelCompleted As UpdateKanbanLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event ErrorLoggingOTOCompleted As ErrorLoggingOTOCompletedEventHandler
        
        '''<remarks/>
        Public Event EmployeeIDLoginOTOCompleted As EmployeeIDLoginOTOCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRepairCodeCompleted As ReadRepairCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRepCodesByCategoryCompleted As ReadRepCodesByCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRepDefectCodeByCategoryCompleted As ReadRepDefectCodeByCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRepCodeGropByDefectCompleted As ReadRepCodeGropByDefectCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRepDefectCodeByCauseCompleted As ReadRepDefectCodeByCauseCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRepairDataCompleted As ReadRepairDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadFailDataCompleted As ReadFailDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCLIDDataCompleted As GetCLIDDataCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckOTOCompleted As CheckOTOCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveRepairDetailDataCompleted As SaveRepairDetailDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadStructureCompleted As ReadStructureCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadConfigCompleted As ReadConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event StandardTimeCompleted As StandardTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event ServerTimeCompleted As ServerTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadWIPFlowCompleted As ReadWIPFlowCompletedEventHandler
        
        '''<remarks/>
        Public Event RepScrapCompleted As RepScrapCompletedEventHandler
        
        '''<remarks/>
        Public Event RDCScrapCompleted As RDCScrapCompletedEventHandler
        
        '''<remarks/>
        Public Event RDCSaveIICompleted As RDCSaveIICompletedEventHandler
        
        '''<remarks/>
        Public Event FailRecordIICompleted As FailRecordIICompletedEventHandler
        
        '''<remarks/>
        Public Event RDCScrapIICompleted As RDCScrapIICompletedEventHandler
        
        '''<remarks/>
        Public Event RDC121MatlInfoCompleted As RDC121MatlInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event RDCMatInfoCompleted As RDCMatInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event RepRaiseTimesCompleted As RepRaiseTimesCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveRepairRecordDataCompleted As SaveRepairRecordDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SkipBICompleted As SkipBICompletedEventHandler
        
        '''<remarks/>
        Public Event ReadFailItemCompleted As ReadFailItemCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadNDFDataCompleted As ReadNDFDataCompletedEventHandler
        
        '''<remarks/>
        Public Event FailRecordCompleted As FailRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event NewFailDataCompleted As NewFailDataCompletedEventHandler
        
        '''<remarks/>
        Public Event RDCWIPFLowCompleted As RDCWIPFLowCompletedEventHandler
        
        '''<remarks/>
        Public Event RDCSaveCompleted As RDCSaveCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSpecifySeatItemCompleted As GetSpecifySeatItemCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSpecifySeatItemByOrgCompleted As GetSpecifySeatItemByOrgCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPdControlByDJCompleted As GetPdControlByDJCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePOQtyCompleted As UpdatePOQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event ATELockingRDCWIPINCompleted As ATELockingRDCWIPINCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOraItemCompleted As UpdateOraItemCompletedEventHandler
        
        '''<remarks/>
        Public Event ArchiveCLIDCompleted As ArchiveCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSTypeBinCompleted As UpdateSTypeBinCompletedEventHandler
        
        '''<remarks/>
        Public Event DisableManualItemsCompleted As DisableManualItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckNoMappingCompleted As CheckNoMappingCompletedEventHandler
        
        '''<remarks/>
        Public Event CountNoMappingCompleted As CountNoMappingCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckMigrateStatusCompleted As CheckMigrateStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCLMasterCompleted As UpdateCLMasterCompletedEventHandler
        
        '''<remarks/>
        Public Event SumSAPIMCompleted As SumSAPIMCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckQtyMatchCompleted As CheckQtyMatchCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignClientIDCompleted As AssignClientIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadToOracleCompleted As UploadToOracleCompletedEventHandler
        
        '''<remarks/>
        Public Event IssueFmOracleCompleted As IssueFmOracleCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckSAPPNCompleted As CheckSAPPNCompletedEventHandler
        
        '''<remarks/>
        Public Event Check_SAPPNCompleted As Check_SAPPNCompletedEventHandler
        
        '''<remarks/>
        Public Event RollbackCLIDInfoCompleted As RollbackCLIDInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_STCtrlListCompleted As Get_STCtrlListCompletedEventHandler
        
        '''<remarks/>
        Public Event ST_CheckActionCompleted As ST_CheckActionCompletedEventHandler
        
        '''<remarks/>
        Public Event ST_CompActionCompleted As ST_CompActionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateActionStatusCompleted As UpdateActionStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event Lock_eTraceCompleted As Lock_eTraceCompletedEventHandler
        
        '''<remarks/>
        Public Event UnLock_eTraceCompleted As UnLock_eTraceCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearPINameCompleted As ClearPINameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrgList_StockTakeCompleted As GetOrgList_StockTakeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPINameCompleted As AddPINameCompletedEventHandler
        
        '''<remarks/>
        Public Event StockTake_CpySubLocCompleted As StockTake_CpySubLocCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyPICompleted As CopyPICompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCLMasterCompleted As CopyCLMasterCompletedEventHandler
        
        '''<remarks/>
        Public Event ExtCnt2Completed As ExtCnt2CompletedEventHandler
        
        '''<remarks/>
        Public Event SetCount1Completed As SetCount1CompletedEventHandler
        
        '''<remarks/>
        Public Event SetCount2Completed As SetCount2CompletedEventHandler
        
        '''<remarks/>
        Public Event CheckCountOptionCompleted As CheckCountOptionCompletedEventHandler
        
        '''<remarks/>
        Public Event StockTake_ValidateSubLocCompleted As StockTake_ValidateSubLocCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckInSubLocListCompleted As CheckInSubLocListCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBFSubinvCompleted As CheckBFSubinvCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCLIDInfoCompleted As GetCLIDInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckStopFlagCompleted As CheckStopFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event Save_STChangeCompleted As Save_STChangeCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckNotFoundCompleted As CheckNotFoundCompletedEventHandler
        
        '''<remarks/>
        Public Event GenVarRptCompleted As GenVarRptCompletedEventHandler
        
        '''<remarks/>
        Public Event EnableScanCompleted As EnableScanCompletedEventHandler
        
        '''<remarks/>
        Public Event StopScanCompleted As StopScanCompletedEventHandler
        
        '''<remarks/>
        Public Event NoValidateCompleted As NoValidateCompletedEventHandler
        
        '''<remarks/>
        Public Event WithValidateCompleted As WithValidateCompletedEventHandler
        
        '''<remarks/>
        Public Event BkpRmvCompleted As BkpRmvCompletedEventHandler
        
        '''<remarks/>
        Public Event SumQtyForPICompleted As SumQtyForPICompletedEventHandler
        
        '''<remarks/>
        Public Event StockTake_AssignExpDateCompleted As StockTake_AssignExpDateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDiffLocatorCompleted As UpdateDiffLocatorCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPIResultCompleted As GetPIResultCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropertiesNameCompleted As GetPropertiesNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaxTestRoundCompleted As GetMaxTestRoundCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaxFailureCompleted As GetMaxFailureCompletedEventHandler
        
        '''<remarks/>
        Public Event CleanTestResultCompleted As CleanTestResultCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPInOQACompleted As WIPInOQACompletedEventHandler
        
        '''<remarks/>
        Public Event CheckExtSNSameIntSNByModelCompleted As CheckExtSNSameIntSNByModelCompletedEventHandler
        
        '''<remarks/>
        Public Event Employee_LoginCompleted As Employee_LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event Employee_CertifyCompleted As Employee_CertifyCompletedEventHandler
        
        '''<remarks/>
        Public Event Loading_CheckModelCompleted As Loading_CheckModelCompletedEventHandler
        
        '''<remarks/>
        Public Event AutoStopLineCompleted As AutoStopLineCompletedEventHandler
        
        '''<remarks/>
        Public Event Laser_VerifyUnitCompleted As Laser_VerifyUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event Laser_VerifyUnitTestCompleted As Laser_VerifyUnitTestCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_RegisterCompleted As Fixture_RegisterCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_TypeCompleted As Fixture_TypeCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_MaintainCompleted As Fixture_MaintainCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_RepairCompleted As Fixture_RepairCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_InActiveCompleted As Fixture_InActiveCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_RegisterViewCompleted As Fixture_RegisterViewCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_InActiveLogCompleted As Fixture_InActiveLogCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_InActiveLogByFixtureCompleted As Fixture_InActiveLogByFixtureCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_MaintainLogCompleted As Fixture_MaintainLogCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_RepairLogCompleted As Fixture_RepairLogCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_TypeViewCompleted As Fixture_TypeViewCompletedEventHandler
        
        '''<remarks/>
        Public Event Fixture_UpdateCompleted As Fixture_UpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event ATE_FixtureVerifyCompleted As ATE_FixtureVerifyCompletedEventHandler
        
        '''<remarks/>
        Public Event ATE_CreateRelationCompleted As ATE_CreateRelationCompletedEventHandler
        
        '''<remarks/>
        Public Event ATE_FixtureSignCompleted As ATE_FixtureSignCompletedEventHandler
        
        '''<remarks/>
        Public Event ATE_ReturnSNbySlotCompleted As ATE_ReturnSNbySlotCompletedEventHandler
        
        '''<remarks/>
        Public Event ATE_ReturnSNbyFixtureCompleted As ATE_ReturnSNbyFixtureCompletedEventHandler
        
        '''<remarks/>
        Public Event ATE_ReleaseRelationbySlotCompleted As ATE_ReleaseRelationbySlotCompletedEventHandler
        
        '''<remarks/>
        Public Event ATE_ReleaseRelationbyFixtureCompleted As ATE_ReleaseRelationbyFixtureCompletedEventHandler
        
        '''<remarks/>
        Public Event ATE_IntSlotReviewCompleted As ATE_IntSlotReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event Function_ProcessVerifyCompleted As Function_ProcessVerifyCompletedEventHandler
        
        '''<remarks/>
        Public Event Depanel_VerifyMatching1Completed As Depanel_VerifyMatching1CompletedEventHandler
        
        '''<remarks/>
        Public Event Test_ReflowCompleted As Test_ReflowCompletedEventHandler
        
        '''<remarks/>
        Public Event Test_ItemDataCompleted As Test_ItemDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSystemGMTDateTimeCompleted As GetSystemGMTDateTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event WIP_UpdateStatusCompleted As WIP_UpdateStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event Test_ReflowProcessCompleted As Test_ReflowProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event Depanel_VerifyLastTestCompleted As Depanel_VerifyLastTestCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_WIPFGSNCompleted As Get_WIPFGSNCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_WIPTestDataCompleted As Get_WIPTestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_MaintainExpireLogCompleted As Get_MaintainExpireLogCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_RepairExpireLogCompleted As Get_RepairExpireLogCompletedEventHandler
        
        '''<remarks/>
        Public Event WIP_UpdateParameterCompleted As WIP_UpdateParameterCompletedEventHandler
        
        '''<remarks/>
        Public Event Temp_InquiryProcessCompleted As Temp_InquiryProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event Temp_UpdateProcessCompleted As Temp_UpdateProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveDJCompleted As SaveDJCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadOrgCompleted As ReadOrgCompletedEventHandler
        
        '''<remarks/>
        Public Event getFlatFilePropertiesCompleted As getFlatFilePropertiesCompletedEventHandler
        
        '''<remarks/>
        Public Event setFlatFilePropertiesCompleted As setFlatFilePropertiesCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveFlatFileMessageCompleted As SaveFlatFileMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event saveFlatFileSNCompleted As saveFlatFileSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFlatfileCompleted As GetFlatfileCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckFlatFileSNCompleted As CheckFlatFileSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMacAddressCompleted As GetMacAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetResultAndPCBAListCompleted As GetResultAndPCBAListCompletedEventHandler
        
        '''<remarks/>
        Public Event IDUpdateCompleted As IDUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPMatchingNCompleted As WIPMatchingNCompletedEventHandler
        
        '''<remarks/>
        Public Event DetachMotherBoardValidCompleted As DetachMotherBoardValidCompletedEventHandler
        
        '''<remarks/>
        Public Event DetachCompleted As DetachCompletedEventHandler
        
        '''<remarks/>
        Public Event SNListChangeBoxCompleted As SNListChangeBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeRevisionCompleted As ChangeRevisionCompletedEventHandler
        
        '''<remarks/>
        Public Event getCartonInfoCompleted As getCartonInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipInfoByBoxIDSNCompleted As GetShipInfoByBoxIDSNCompletedEventHandler
        
        '''<remarks/>
        Public Event StructureReadByPCBACompleted As StructureReadByPCBACompletedEventHandler
        
        '''<remarks/>
        Public Event BackToEepromCompleted As BackToEepromCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductCPNbyModelCompleted As GetProductCPNbyModelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetModelByExtSNCompleted As GetModelByExtSNCompletedEventHandler
        
        '''<remarks/>
        Public Event getShipmentByBoxidCompleted As getShipmentByBoxidCompletedEventHandler
        
        '''<remarks/>
        Public Event SFCDBoardIsValidCompleted As SFCDBoardIsValidCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCLIDCompleted As SaveCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_CusTableListsCompleted As Get_CusTableListsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmplogeeIDCompleted As GetEmplogeeIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeptCompleted As GetDeptCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCardInfoCompleted As CopyCardInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCardInfoZSCompleted As CopyCardInfoZSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHRTrainingInfoCompleted As GetHRTrainingInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLocksCompleted As GetLocksCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLockByIDCompleted As UpdateLockByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UnlockdByIDCompleted As UnlockdByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveAndUnlockdByIDCompleted As SaveAndUnlockdByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveSmartCardHistoryCompleted As SaveSmartCardHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSmartCardHistoryCompleted As GetSmartCardHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadFlowCompleted As ReadFlowCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEquipmentDetailInfoCompleted As GetEquipmentDetailInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePMdataCompleted As UpdatePMdataCompletedEventHandler
        
        '''<remarks/>
        Public Event ModelDefinedCompleted As ModelDefinedCompletedEventHandler
        
        '''<remarks/>
        Public Event ModelStructureCompleted As ModelStructureCompletedEventHandler
        
        '''<remarks/>
        Public Event ProdQtyCompleted As ProdQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDJMatchedQtyCompleted As GetDJMatchedQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertPoQtyCompleted As InsertPoQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event CountPoQtyCompleted As CountPoQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event CountPoQtyIICompleted As CountPoQtyIICompletedEventHandler
        
        '''<remarks/>
        Public Event IntSNIsValidCompleted As IntSNIsValidCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadPOQtyByPOAndPCBACompleted As ReadPOQtyByPOAndPCBACompletedEventHandler
        
        '''<remarks/>
        Public Event PCBARoutingCompleted As PCBARoutingCompletedEventHandler
        
        '''<remarks/>
        Public Event PCBListOfReworkCompleted As PCBListOfReworkCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPMatching1Completed As WIPMatching1CompletedEventHandler
        
        '''<remarks/>
        Public Event WIPVisualInspectionCompleted As WIPVisualInspectionCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPBurnInCompleted As WIPBurnInCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPIDSwopCompleted As WIPIDSwopCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPIDSwopSimplifyCompleted As WIPIDSwopSimplifyCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPModelSwopCompleted As WIPModelSwopCompletedEventHandler
        
        '''<remarks/>
        Public Event getPCBAinWIPHeaderCompleted As getPCBAinWIPHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event MI_getPCBAinWIPHeaderCompleted As MI_getPCBAinWIPHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event DBoardIsValidCompleted As DBoardIsValidCompletedEventHandler
        
        '''<remarks/>
        Public Event ModelConfiguratorSNValidCompleted As ModelConfiguratorSNValidCompletedEventHandler
        
        '''<remarks/>
        Public Event IntSNPatternCompleted As IntSNPatternCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderInfoFromOracleCompleted As GetOrderInfoFromOracleCompletedEventHandler
        
        '''<remarks/>
        Public Event ComponentReplacementCompleted As ComponentReplacementCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckCompIssueToDJCompleted As CheckCompIssueToDJCompletedEventHandler
        
        '''<remarks/>
        Public Event MatchingAccountCompleted As MatchingAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetResultCompleted As GetResultCompletedEventHandler
        
        '''<remarks/>
        Public Event DJinBoxCompleted As DJinBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPrevResultCompleted As CheckPrevResultCompletedEventHandler
        
        '''<remarks/>
        Public Event LargeThanMaxTestCompleted As LargeThanMaxTestCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPInCompleted As WIPInCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPOutCompleted As WIPOutCompletedEventHandler
        
        '''<remarks/>
        Public Event checkSamplingTestCompleted As checkSamplingTestCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadDBoardsCompleted As ReadDBoardsCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPOutMatchingNCompleted As WIPOutMatchingNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataByIntSNCompleted As GetDataByIntSNCompletedEventHandler
        
        '''<remarks/>
        Public Event RDCBoardSNValidCompleted As RDCBoardSNValidCompletedEventHandler
        
        '''<remarks/>
        Public Event MatListOnPCBACompleted As MatListOnPCBACompletedEventHandler
        
        '''<remarks/>
        Public Event IDSwopCompleted As IDSwopCompletedEventHandler
        
        '''<remarks/>
        Public Event IntSNRecycleCompleted As IntSNRecycleCompletedEventHandler
        
        '''<remarks/>
        Public Event IntSNRecycleIICompleted As IntSNRecycleIICompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductCPNCompleted As GetProductCPNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetResultListCompleted As GetResultListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextProcessCompleted As GetNextProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event GetResultAndAttributesListCompleted As GetResultAndAttributesListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBoxInfoCompleted As GetBoxInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLabel1Completed As GetLabel1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPackingListLabelCompleted As GetPackingListLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBoxQtyInPalletCompleted As GetBoxQtyInPalletCompletedEventHandler
        
        '''<remarks/>
        Public Event ATEWIPInCompleted As ATEWIPInCompletedEventHandler
        
        '''<remarks/>
        Public Event ATEWIPoutCompleted As ATEWIPoutCompletedEventHandler
        
        '''<remarks/>
        Public Event ATEWIPOutDirectCompleted As ATEWIPOutDirectCompletedEventHandler
        
        '''<remarks/>
        Public Event IsWipInCompleted As IsWipInCompletedEventHandler
        
        '''<remarks/>
        Public Event BurnInWipOutCompleted As BurnInWipOutCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPPackingCompleted As WIPPackingCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintSNLabelCompleted As PrintSNLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintPakingCompleted As PrintPakingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBurnInTimeCompleted As GetBurnInTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipInfoBySNCompleted As GetShipInfoBySNCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeBoxCompleted As ChangeBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipInfoByBoxIDCompleted As GetShipInfoByBoxIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipInfoByPalletIDCompleted As GetShipInfoByPalletIDCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePalletCompleted As ChangePalletCompletedEventHandler
        
        '''<remarks/>
        Public Event OQAWipInCompleted As OQAWipInCompletedEventHandler
        
        '''<remarks/>
        Public Event ExistsFunctionalTestCompleted As ExistsFunctionalTestCompletedEventHandler
        
        '''<remarks/>
        Public Event TLAFlowCompleted As TLAFlowCompletedEventHandler
        
        '''<remarks/>
        Public Event OQACosmeticCompleted As OQACosmeticCompletedEventHandler
        
        '''<remarks/>
        Public Event getLabelsCompleted As getLabelsCompletedEventHandler
        
        '''<remarks/>
        Public Event ReworkCompleted As ReworkCompletedEventHandler
        
        '''<remarks/>
        Public Event Rework_NewCompleted As Rework_NewCompletedEventHandler
        
        '''<remarks/>
        Public Event TraceLevelCompleted As TraceLevelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPanelSizeCompleted As GetPanelSizeCompletedEventHandler
        
        '''<remarks/>
        Public Event IntSNIsValidByPanelCompleted As IntSNIsValidByPanelCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPMatchingByPanelCompleted As WIPMatchingByPanelCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPanelIDCompleted As CheckPanelIDCompletedEventHandler
        
        '''<remarks/>
        Public Event WIPReworkCompleted As WIPReworkCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadMIDataCompleted As ReadMIDataCompletedEventHandler
        
        '''<remarks/>
        Public Event getMIFileDataCompleted As getMIFileDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveMIRecordCompleted As SaveMIRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConfigCompleted As GetConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event GetModelByIntSNCompleted As GetModelByIntSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPCBAByIntSNCompleted As GetPCBAByIntSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLastTestResultCompleted As GetLastTestResultCompletedEventHandler
        
        '''<remarks/>
        Public Event getNowCompleted As getNowCompletedEventHandler
        
        '''<remarks/>
        Public Event getPONumberCompleted As getPONumberCompletedEventHandler
        
        '''<remarks/>
        Public Event checkPermissionCompleted As checkPermissionCompletedEventHandler
        
        '''<remarks/>
        Public Event checkTMFormatCompleted As checkTMFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event checkQSFormatCompleted As checkQSFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event getExceptionReportCompleted As getExceptionReportCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveBuildPlanDataCompleted As SaveBuildPlanDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SkipLotCompleted As SkipLotCompletedEventHandler
        
        '''<remarks/>
        Public Event checkIPPFormatCompleted As checkIPPFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event Upload_EJITIPPCompleted As Upload_EJITIPPCompletedEventHandler
        
        '''<remarks/>
        Public Event getProdFloorCompleted As getProdFloorCompletedEventHandler
        
        '''<remarks/>
        Public Event getEjitIPPListCompleted As getEjitIPPListCompletedEventHandler
        
        '''<remarks/>
        Public Event getIPPDetailCompleted As getIPPDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_TCLIDDataCompleted As Report_TCLIDDataCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_TItemDataCompleted As Report_TItemDataCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_TAgingCompleted As Report_TAgingCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_TDJDataCompleted As Report_TDJDataCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_TCLIDIssueDataCompleted As Report_TCLIDIssueDataCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_TCLIDInfoCompleted As Report_TCLIDInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_AMLIProVSeTraceCompleted As Report_AMLIProVSeTraceCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_AMLIProVSeTrace2Completed As Report_AMLIProVSeTrace2CompletedEventHandler
        
        '''<remarks/>
        Public Event Report_TCLIDMSLDataCompleted As Report_TCLIDMSLDataCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_MPNOnHandCompleted As Report_MPNOnHandCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_OnHandMFGMPNCompleted As Report_OnHandMFGMPNCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_TIssueCompareCompleted As Report_TIssueCompareCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_TMaterialTransferCompleted As Report_TMaterialTransferCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_GeteTraceOHCompleted As Report_GeteTraceOHCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_StandardTimeCompleted As Report_StandardTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_GetOHQTYWithMPNListCompleted As Report_GetOHQTYWithMPNListCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_GeteTraceItemOHMPQCompleted As Report_GeteTraceItemOHMPQCompletedEventHandler
        
        '''<remarks/>
        Public Event Report_GetConnectStringCompleted As Report_GetConnectStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaterialInfoByCLIDCompleted As GetMaterialInfoByCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaterialToXMLByCLIDCompleted As GetMaterialToXMLByCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaterialToXMLByCLID2Completed As GetMaterialToXMLByCLID2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetDJToXMLCompleted As GetDJToXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaterialByCLIDToDataSetCompleted As GetMaterialByCLIDToDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReturnCLIDByDateCompleted As GetReturnCLIDByDateCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidReqlineStatusCompleted As ValidReqlineStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event getMatlByDJModelCompleted As getMatlByDJModelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMatlByCLIDDJCompleted As GetMatlByCLIDDJCompletedEventHandler
        
        '''<remarks/>
        Public Event getMatlCLIDbyDJCompleted As getMatlCLIDbyDJCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintLabelsCompleted As PrintLabelsCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveEMCResultCompleted As SaveEMCResultCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintMacAddressCompleted As PrintMacAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event ReprintMacAddressCompleted As ReprintMacAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPreMacAddressCompleted As GetPreMacAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLengthMacAddressCompleted As GetLengthMacAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTravellerCompleted As GetTravellerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllTravellerDataCompleted As GetAllTravellerDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTravellerInfoCompleted As UpdateTravellerInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllModelsCompleted As GetAllModelsCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteModelCompleted As DeleteModelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPrinterServerCompleted As GetPrinterServerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDaughterBdByDJCompleted As GetDaughterBdByDJCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMTQCByDJCompleted As GetSMTQCByDJCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMTQCModelsCompleted As GetSMTQCModelsCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveSMTQCDataCompleted As SaveSMTQCDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllSMTQCDataCompleted As GetAllSMTQCDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSMTQCDataCompleted As DeleteSMTQCDataCompletedEventHandler
        
        '''<remarks/>
        Public Event LookUpProductInfoCompleted As LookUpProductInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event RevinBoxCompleted As RevinBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event CloneProductInfoCompleted As CloneProductInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadProductInfoCompleted As UploadProductInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event LookUpMSLInfoCompleted As LookUpMSLInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadProductCPNCompleted As UploadProductCPNCompletedEventHandler
        
        '''<remarks/>
        Public Event LookUpLabelParaCompleted As LookUpLabelParaCompletedEventHandler
        
        '''<remarks/>
        Public Event LookUpTransParaCompleted As LookUpTransParaCompletedEventHandler
        
        '''<remarks/>
        Public Event LookUpSFCInfoByModelCompleted As LookUpSFCInfoByModelCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadProductStructureCompleted As UploadProductStructureCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadProductRoutingCompleted As UploadProductRoutingCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadProductPropertiesCompleted As UploadProductPropertiesCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadLabelInfoCompleted As UploadLabelInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadProcessInfoCompleted As UploadProcessInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTransInfoCompleted As UploadTransInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event IsAuthenticateUserCompleted As IsAuthenticateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event LookUpRoutingInfoByCompleted As LookUpRoutingInfoByCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRoutingInfoCompleted As UpdateRoutingInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductLineInfoCompleted As GetProductLineInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event IsReworkUnitCompleted As IsReworkUnitCompletedEventHandler
        
        '''<remarks/>
        Public Event IsLastProcessCompleted As IsLastProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event IsBottomPCBACompleted As IsBottomPCBACompletedEventHandler
        
        '''<remarks/>
        Public Event GetProdLineByCompleted As GetProdLineByCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProductLineCompleted As UpdateProductLineCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEquipmentInfoCompleted As GetEquipmentInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEquipmentInfoCompleted As UpdateEquipmentInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event MOSpecialPickCompleted As MOSpecialPickCompletedEventHandler
        
        '''<remarks/>
        Public Event MOSpecialPostCompleted As MOSpecialPostCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadPOrderListCompleted As ReadPOrderListCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadPOrderItemsCompleted As ReadPOrderItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePOrderHeaderCompleted As UpdatePOrderHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event PickOrderPostCompleted As PickOrderPostCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMOFromDNCompleted As GetMOFromDNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDNMOLinesCompleted As GetDNMOLinesCompletedEventHandler
        
        '''<remarks/>
        Public Event ShipmentPostCompleted As ShipmentPostCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDNPickedListsCompleted As GetDNPickedListsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDNPickedCLIDsCompleted As GetDNPickedCLIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event SOReversalPostCompleted As SOReversalPostCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintProcessLabelCompleted As PrintProcessLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadProcessLabelCompleted As ReadProcessLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event PCBSlotLightOnCompleted As PCBSlotLightOnCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMatListCompleted As GetMatListCompletedEventHandler
        
        '''<remarks/>
        Public Event SLEDSaveChangesCompleted As SLEDSaveChangesCompletedEventHandler
        
        '''<remarks/>
        Public Event SLED_ReviewUpdCompleted As SLED_ReviewUpdCompletedEventHandler
        
        '''<remarks/>
        Public Event SLED_FailUpdCompleted As SLED_FailUpdCompletedEventHandler
        
        '''<remarks/>
        Public Event eTrace_UpdCompleted As eTrace_UpdCompletedEventHandler
        
        '''<remarks/>
        Public Event SLEDSaveTraceCompleted As SLEDSaveTraceCompletedEventHandler
        
        '''<remarks/>
        Public Event eTraceUpd_ReviewCompleted As eTraceUpd_ReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event eTraceUpd_FailCompleted As eTraceUpd_FailCompletedEventHandler
        
        '''<remarks/>
        Public Event eTraceUpd_PassCompleted As eTraceUpd_PassCompletedEventHandler
        
        '''<remarks/>
        Public Event GetModelRevisionCompleted As GetModelRevisionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetModelRevDJ_WithTypeCompleted As GetModelRevDJ_WithTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetModelRevDJCompleted As GetModelRevDJCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSNListCompleted As GetSNListCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeModelCompleted As ChangeModelCompletedEventHandler
        
        '''<remarks/>
        Public Event Change_ModelCompleted As Change_ModelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMTCCNameCompleted As GetSMTCCNameCompletedEventHandler
        
        '''<remarks/>
        Public Event SMTCycleCountHHCompleted As SMTCycleCountHHCompletedEventHandler
        
        '''<remarks/>
        Public Event SMTCycleCountCLIDValidCompleted As SMTCycleCountCLIDValidCompletedEventHandler
        
        '''<remarks/>
        Public Event SMTCCSaveCompleted As SMTCCSaveCompletedEventHandler
        
        '''<remarks/>
        Public Event SMTCLIDStatusChangedCompleted As SMTCLIDStatusChangedCompletedEventHandler
        
        '''<remarks/>
        Public Event SMTCLIDStatusChangedByPCCompleted As SMTCLIDStatusChangedByPCCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMTCCListCompleted As GetSMTCCListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMTScanedCLIDCompleted As GetSMTScanedCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCyDateCompleted As GetCyDateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCycleCompleted As UpdateCycleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCLIDateCompleted As GetCLIDateCompletedEventHandler
        
        '''<remarks/>
        Public Event TBoxDataCompleted As TBoxDataCompletedEventHandler
        
        '''<remarks/>
        Public Event TestupdataCompleted As TestupdataCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateReasonCompleted As UpdateReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMRPDataCompleted As GetMRPDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SIT_MassPrintCLIDsCompleted As SIT_MassPrintCLIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event SIT_DeleteCLIDsCompleted As SIT_DeleteCLIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event SIT_Print_OnHandCompleted As SIT_Print_OnHandCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadProductRoutingLogCompleted As UploadProductRoutingLogCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadProductChangeLogCompleted As UploadProductChangeLogCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyDJInfoCompleted As CopyDJInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyDJinfoUseServerNameCompleted As CopyDJinfoUseServerNameCompletedEventHandler
        
        '''<remarks/>
        Public Event isValidDJCompleted As isValidDJCompletedEventHandler
        
        '''<remarks/>
        Public Event insertTDHeaderCompleted As insertTDHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRuleFromDBCompleted As ReadRuleFromDBCompletedEventHandler
        
        '''<remarks/>
        Public Event postProdMasterCompleted As postProdMasterCompletedEventHandler
        
        '''<remarks/>
        Public Event DelProdMasterCompleted As DelProdMasterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetwipflowdataCompleted As GetwipflowdataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetModelRevForTECompleted As GetModelRevForTECompletedEventHandler
        
        '''<remarks/>
        Public Event GetProdLineAndResultForTECompleted As GetProdLineAndResultForTECompletedEventHandler
        
        '''<remarks/>
        Public Event CheckFixutureIDCompleted As CheckFixutureIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWipHeaderByIntSNCompleted As GetWipHeaderByIntSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPanelIDByIntSNCompleted As GetPanelIDByIntSNCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearFixtureIDCompleted As ClearFixtureIDCompletedEventHandler
        
        '''<remarks/>
        Public Event FixtureMountCompleted As FixtureMountCompletedEventHandler
        
        '''<remarks/>
        Public Event TE_IntSNListReadbyFixtureIDCompleted As TE_IntSNListReadbyFixtureIDCompletedEventHandler
        
        '''<remarks/>
        Public Event TE_ReworkUnitFlagCompleted As TE_ReworkUnitFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event TE_UnbindFixtureIDCompleted As TE_UnbindFixtureIDCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeExpdateUserCompleted As ChangeExpdateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event BatchChangeExpdateCompleted As BatchChangeExpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckCLIDExpFormatCompleted As CheckCLIDExpFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event getKanbanIDinfoCompleted As getKanbanIDinfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateKanbanCodeDSCompleted As UpdateKanbanCodeDSCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPNFormatCompleted As CheckPNFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBuildPanFormatCompleted As CheckBuildPanFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event CommitBuildPlanCompleted As CommitBuildPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveKanbanDataCompleted As SaveKanbanDataCompletedEventHandler
        
        '''<remarks/>
        Public Event uploadQuotaSharingCompleted As uploadQuotaSharingCompletedEventHandler
        
        '''<remarks/>
        Public Event uploadTransmissionCompleted As uploadTransmissionCompletedEventHandler
        
        '''<remarks/>
        Public Event getQuotaSharingCompleted As getQuotaSharingCompletedEventHandler
        
        '''<remarks/>
        Public Event getTransmissionCompleted As getTransmissionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextBPIDCompleted As GetNextBPIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getBuildPlanListCompleted As getBuildPlanListCompletedEventHandler
        
        '''<remarks/>
        Public Event getBuildPlandetailCompleted As getBuildPlandetailCompletedEventHandler
        
        '''<remarks/>
        Public Event getLocatorsPBCompleted As getLocatorsPBCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRTNo_MiscRcptCompleted As GetRTNo_MiscRcptCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDateCompleted As GetDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextInvIDCompleted As GetNextInvIDCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckFormatCompleted As CheckFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBatchFormatCompleted As CheckBatchFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPIFormatCompleted As CheckPIFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidMRDataCompleted As ValidMRDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidPIDataCompleted As ValidPIDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidINVNoCompleted As ValidINVNoCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidBatchNoCompleted As ValidBatchNoCompletedEventHandler
        
        '''<remarks/>
        Public Event PostMRCompleted As PostMRCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintCLIDforMRCompleted As PrintCLIDforMRCompletedEventHandler
        
        '''<remarks/>
        Public Event CS_GetCLIDInfoCompleted As CS_GetCLIDInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CS_UpdateCLIDCompleted As CS_UpdateCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBerthCompleted As GetBerthCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDashboardDataCompleted As GetDashboardDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadEMCfileCompleted As UploadEMCfileCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidBatchDataCompleted As ValidBatchDataCompletedEventHandler
        
        '''<remarks/>
        Public Event PostBatchListCompleted As PostBatchListCompletedEventHandler
        
        '''<remarks/>
        Public Event BJ_GetDJInfoCompleted As BJ_GetDJInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event BJ_CreationCompleted As BJ_CreationCompletedEventHandler
        
        '''<remarks/>
        Public Event BJ_SaveChangeCompleted As BJ_SaveChangeCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBJInfoCompleted As CheckBJInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event BJ_GetBJCompleted As BJ_GetBJCompletedEventHandler
        
        '''<remarks/>
        Public Event BJ_GenMOCompleted As BJ_GenMOCompletedEventHandler
        
        '''<remarks/>
        Public Event LEDDashBoardByRackCompleted As LEDDashBoardByRackCompletedEventHandler
        
        '''<remarks/>
        Public Event LEDDashBoardPCBCompleted As LEDDashBoardPCBCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_SrcSubInvCompleted As Get_SrcSubInvCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_AvlQtyCompleted As Get_AvlQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMSBSourceCompleted As GetMSBSourceCompletedEventHandler
        
        '''<remarks/>
        Public Event Save_TemplateCompleted As Save_TemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveProdPickingCompleted As SaveProdPickingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTemplateItemCompleted As GetTemplateItemCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDJInfoCompleted As GetDJInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCLIDCompleted As UpdateCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Update_CLIDCompleted As Update_CLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Post_DJ_ReversalCompleted As Post_DJ_ReversalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTOItemCompleted As GetTOItemCompletedEventHandler
        
        '''<remarks/>
        Public Event Search_TemplateCompleted As Search_TemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event Check_TemplateCompleted As Check_TemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event Search_LockTOCompleted As Search_LockTOCompletedEventHandler
        
        '''<remarks/>
        Public Event Search_OpenTOCompleted As Search_OpenTOCompletedEventHandler
        
        '''<remarks/>
        Public Event Unlock_PickOrderCompleted As Unlock_PickOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event ClosePickOrderCompleted As ClosePickOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_PickOrderCompleted As Get_PickOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTemplateCompleted As GetTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event Check_PickListCompleted As Check_PickListCompletedEventHandler
        
        '''<remarks/>
        Public Event PostProdPickingCompleted As PostProdPickingCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTemplateCompleted As DeleteTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBOMFromERPCompleted As GetBOMFromERPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListFromExcelCompleted As GetListFromExcelCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_DestSubLocCompleted As Get_DestSubLocCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_ChangeExcelFlagCompleted As Get_ChangeExcelFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderInfoFromERPCompleted As GetOrderInfoFromERPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDJInfoFromERPCompleted As GetDJInfoFromERPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderInfoFromETRACECompleted As GetOrderInfoFromETRACECompletedEventHandler
        
        '''<remarks/>
        Public Event GetIDInfoCompleted As GetIDInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDJCompleted As GetDJCompletedEventHandler
        
        '''<remarks/>
        Public Event Check_HW_FlagCompleted As Check_HW_FlagCompletedEventHandler
        
        '''<remarks/>
        Public Event Flag_AutoGetBOMRevCompleted As Flag_AutoGetBOMRevCompletedEventHandler
        
        '''<remarks/>
        Public Event Post_DJ_CompletionCompleted As Post_DJ_CompletionCompletedEventHandler
        
        '''<remarks/>
        Public Event get_uploadinforCompleted As get_uploadinforCompletedEventHandler
        
        '''<remarks/>
        Public Event DJ_CompletionCompleted As DJ_CompletionCompletedEventHandler
        
        '''<remarks/>
        Public Event DJ_Completion_BoxIDCompleted As DJ_Completion_BoxIDCompletedEventHandler
        
        '''<remarks/>
        Public Event DJCompletion_For_PMJobCompleted As DJCompletion_For_PMJobCompletedEventHandler
        
        '''<remarks/>
        Public Event CountOfBoxIDCompleted As CountOfBoxIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSOLineCompleted As GetSOLineCompletedEventHandler
        
        '''<remarks/>
        Public Event Getrelease_linesCompleted As Getrelease_linesCompletedEventHandler
        
        '''<remarks/>
        Public Event writeClidRefPoCompleted As writeClidRefPoCompletedEventHandler
        
        '''<remarks/>
        Public Event AllowEditDJCompleted As AllowEditDJCompletedEventHandler
        
        '''<remarks/>
        Public Event AllowDiffDJCompleted As AllowDiffDJCompletedEventHandler
        
        '''<remarks/>
        Public Event DJCmp_GetBoxInfoCompleted As DJCmp_GetBoxInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckDJforCLIDCompleted As CheckDJforCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateCLIDforPoCompleted As CreateCLIDforPoCompletedEventHandler
        
        '''<remarks/>
        Public Event CountOfPoCLIDCompleted As CountOfPoCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCreateCLIDCompleted As SaveCreateCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCreatCLIDforPoCompleted As SaveCreatCLIDforPoCompletedEventHandler
        
        '''<remarks/>
        Public Event RePrintCreateCLIDforPOCLIDsCompleted As RePrintCreateCLIDforPOCLIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckCHDJCompleted As CheckCHDJCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadCLIDsCompleted As ReadCLIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadCLIDDataCompleted As ReadCLIDDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMOFromDJCompleted As GetMOFromDJCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDJMOLinesCompleted As GetDJMOLinesCompletedEventHandler
        
        '''<remarks/>
        Public Event MOrderPostCompleted As MOrderPostCompletedEventHandler
        
        '''<remarks/>
        Public Event MOEarlyLotPostCompleted As MOEarlyLotPostCompletedEventHandler
        
        '''<remarks/>
        Public Event LabelConversionCompleted As LabelConversionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemMasterCompleted As GetItemMasterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemDescriptionCompleted As GetItemDescriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event PartNoTransferCompleted As PartNoTransferCompletedEventHandler
        
        '''<remarks/>
        Public Event InterOrgTransferCompleted As InterOrgTransferCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRTVLabelsCompleted As GetRTVLabelsCompletedEventHandler
        
        '''<remarks/>
        Public Event MiscRTVCompleted As MiscRTVCompletedEventHandler
        
        '''<remarks/>
        Public Event CVMIRTVCompleted As CVMIRTVCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemRTLotCompleted As GetItemRTLotCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemOnhandCompleted As GetItemOnhandCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadLabelIDInfoCompleted As ReadLabelIDInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event LabelGenerationCompleted As LabelGenerationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTypeIDCompleted As GetTypeIDCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadLabelIDsForDJCompleted As ReadLabelIDsForDJCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_LabelInfoHasSameLotCompleted As Get_LabelInfoHasSameLotCompletedEventHandler
        
        '''<remarks/>
        Public Event Update_LabelInfoHasSameLotCompleted As Update_LabelInfoHasSameLotCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPalletListCompleted As GetPalletListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStatusListCompleted As GetStatusListCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePalletListCompleted As UpdatePalletListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaterialInfoCompleted As GetMaterialInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMaterialCompleted As UpdateMaterialCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckItemMPNCompleted As CheckItemMPNCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadSuppDataCompleted As DownloadSuppDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveSuppDataCompleted As SaveSuppDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPOLineMPQCompleted As GetPOLineMPQCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemMPQCompleted As GetItemMPQCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRecDataCompleted As GetRecDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemsCompleted As GetItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessMatMovementCompleted As ProcessMatMovementCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveDCodeLotNoCompleted As SaveDCodeLotNoCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintRTSlipCompleted As PrintRTSlipCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintRECLabelsCompleted As PrintRECLabelsCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadShipmentDataCompleted As ReadShipmentDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadIRDataCompleted As ReadIRDataCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateIRRTNoCompleted As UpdateIRRTNoCompletedEventHandler
        
        '''<remarks/>
        Public Event CleanBoxIDCompleted As CleanBoxIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetValidSourceCompleted As GetValidSourceCompletedEventHandler
        
        '''<remarks/>
        Public Event PutawayPostCompleted As PutawayPostCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMRBSubInvCompleted As GetMRBSubInvCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadBlockDCLNCompleted As ReadBlockDCLNCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveBlockDCLNCompleted As SaveBlockDCLNCompletedEventHandler
        
        '''<remarks/>
        Public Event SourceForCompToDJCompleted As SourceForCompToDJCompletedEventHandler
        
        '''<remarks/>
        Public Event WS_CompToDJCompleted As WS_CompToDJCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckUTurnSubinvCompleted As CheckUTurnSubinvCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadCLID_UTurnCompleted As ReadCLID_UTurnCompletedEventHandler
        
        '''<remarks/>
        Public Event UTurnDeliveryCompleted As UTurnDeliveryCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckUTurnCLIDFormatCompleted As CheckUTurnCLIDFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event PostUTurnStatusChangeCompleted As PostUTurnStatusChangeCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckLocRTListCompleted As CheckLocRTListCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckCLIDDisableFlagCompleted As CheckCLIDDisableFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateSubinvCompleted As ValidateSubinvCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBatchDisableCLIDFormatCompleted As CheckBatchDisableCLIDFormatCompletedEventHandler
        
        '''<remarks/>
        Public Event PostBatchDisableCLIDCompleted As PostBatchDisableCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSlotCheckOptionCompleted As UpdateSlotCheckOptionCompletedEventHandler
        
        '''<remarks/>
        Public Event PackingManagementCompleted As PackingManagementCompletedEventHandler
        
        '''<remarks/>
        Public Event SFGetDcodeLnforIntSNCompleted As SFGetDcodeLnforIntSNCompletedEventHandler
        
        '''<remarks/>
        Public Event SFGetDcodeLnforSNCompleted As SFGetDcodeLnforSNCompletedEventHandler
        
        '''<remarks/>
        Public Event Save_SubInvTransferCompleted As Save_SubInvTransferCompletedEventHandler
        
        '''<remarks/>
        Public Event Check_CLID_InfoCompleted As Check_CLID_InfoCompletedEventHandler
        
        '''<remarks/>
        Public Event MatSourceReadCompleted As MatSourceReadCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearPalletIDCompleted As ClearPalletIDCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckCLIDCompleted As CheckCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event RepSourceReadCompleted As RepSourceReadCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckDestCompleted As CheckDestCompletedEventHandler
        
        '''<remarks/>
        Public Event Check_DestCompleted As Check_DestCompletedEventHandler
        
        '''<remarks/>
        Public Event Check_Return_OptionCompleted As Check_Return_OptionCompletedEventHandler
        
        '''<remarks/>
        Public Event account_alias_batch_receiptCompleted As account_alias_batch_receiptCompletedEventHandler
        
        '''<remarks/>
        Public Event account_alias_batch_issueCompleted As account_alias_batch_issueCompletedEventHandler
        
        '''<remarks/>
        Public Event account_receiptCompleted As account_receiptCompletedEventHandler
        
        '''<remarks/>
        Public Event save_account_receiptCompleted As save_account_receiptCompletedEventHandler
        
        '''<remarks/>
        Public Event account_alias_receiptCompleted As account_alias_receiptCompletedEventHandler
        
        '''<remarks/>
        Public Event account_issueCompleted As account_issueCompletedEventHandler
        
        '''<remarks/>
        Public Event post_pull_returnCompleted As post_pull_returnCompletedEventHandler
        
        '''<remarks/>
        Public Event account_issue_rcptCompleted As account_issue_rcptCompletedEventHandler
        
        '''<remarks/>
        Public Event account_alias_issueCompleted As account_alias_issueCompletedEventHandler
        
        '''<remarks/>
        Public Event save_account_issueCompleted As save_account_issueCompletedEventHandler
        
        '''<remarks/>
        Public Event post_misc_rcptCompleted As post_misc_rcptCompletedEventHandler
        
        '''<remarks/>
        Public Event LabelForMiscReceiptCompleted As LabelForMiscReceiptCompletedEventHandler
        
        '''<remarks/>
        Public Event ExportHWDataInfoCompleted As ExportHWDataInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event eTrace_UpdateCompleted As eTrace_UpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event Misc_issue_rcptCompleted As Misc_issue_rcptCompletedEventHandler
        
        '''<remarks/>
        Public Event post_push_returnCompleted As post_push_returnCompletedEventHandler
        
        '''<remarks/>
        Public Event component_returnCompleted As component_returnCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeCLIDCompleted As ChangeCLIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRTNoCompleted As GetRTNoCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadUserDataCompleted As ReadUserDataCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadRoleDataCompleted As ReadRoleDataCompletedEventHandler
        
        '''<remarks/>
        Public Event PostUserDataCompleted As PostUserDataCompletedEventHandler
        
        '''<remarks/>
        Public Event PostRoleDataCompleted As PostRoleDataCompletedEventHandler
        
        '''<remarks/>
        Public Event InvMigCurrStatusCompleted As InvMigCurrStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event InvMigUserCheckCompleted As InvMigUserCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event InvMigrationStatusCompleted As InvMigrationStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDaughterBoardSNCompleted As GetDaughterBoardSNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMailListCompleted As GetMailListCompletedEventHandler
        
        '''<remarks/>
        Public Event AutoMail_SiplaceDataCheckCompleted As AutoMail_SiplaceDataCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event AutoSendMail_PastDueDJCompleted As AutoSendMail_PastDueDJCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteMOAllocatedCompleted As DeleteMOAllocatedCompletedEventHandler
        
        '''<remarks/>
        Public Event RedoLedMOAllocatedCompleted As RedoLedMOAllocatedCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateUserCompleted As ValidateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadBJData_to_OracleCompleted As UploadBJData_to_OracleCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadAutoEJIT_DJSum_to_OracleCompleted As UploadAutoEJIT_DJSum_to_OracleCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadAutoEJIT_DJList_to_OracleCompleted As UploadAutoEJIT_DJList_to_OracleCompletedEventHandler
        
        '''<remarks/>
        Public Event AutoCreatedEJITCompleted As AutoCreatedEJITCompletedEventHandler
        
        '''<remarks/>
        Public Event AutoCreatedEJIT_ByDayCompleted As AutoCreatedEJIT_ByDayCompletedEventHandler
        
        '''<remarks/>
        Public Event ErrorLoggingCompleted As ErrorLoggingCompletedEventHandler
        
        '''<remarks/>
        Public Event ErrorLogCompleted As ErrorLogCompletedEventHandler
        
        '''<remarks/>
        Public Event ErrorLogOTOCompleted As ErrorLogOTOCompletedEventHandler
        
        '''<remarks/>
        Public Event GetServerDateCompleted As GetServerDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConfigValueCompleted As GetConfigValueCompletedEventHandler
        
        '''<remarks/>
        Public Event PrinterCheckCompleted As PrinterCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginCheckCompleted As LoginCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePasswordCompleted As ChangePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateItemRevisionCompleted As ValidateItemRevisionCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateItemTypeCompleted As ValidateItemTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateSubLocCompleted As ValidateSubLocCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_LocatorSPCompleted As Get_LocatorSPCompletedEventHandler
        
        '''<remarks/>
        Public Event SlotCheckCompleted As SlotCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event SlotLightOnCompleted As SlotLightOnCompletedEventHandler
        
        '''<remarks/>
        Public Event DockSlotLightOnCompleted As DockSlotLightOnCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_ReasonCodeCompleted As Get_ReasonCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_SubinvLocCompleted As Get_SubinvLocCompletedEventHandler
        
        '''<remarks/>
        Public Event get_iteminfoCompleted As get_iteminfoCompletedEventHandler
        
        '''<remarks/>
        Public Event get_itemonhandCompleted As get_itemonhandCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_AccountAliasCompleted As Get_AccountAliasCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_TransactionTypesCompleted As Get_TransactionTypesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetScreenElementsCompleted As GetScreenElementsCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintMatlLabelCompleted As OpenPrintMatlLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintNoMatlLabelCompleted As OpenPrintNoMatlLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event WritePrintLabelCompleted As WritePrintLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabelCompleted As OpenPrintLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabel_ProductionCompleted As OpenPrintLabel_ProductionCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabel_LAGCompleted As OpenPrintLabel_LAGCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabel_CVTCompleted As OpenPrintLabel_CVTCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabelForAppsCompleted As OpenPrintLabelForAppsCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabelForEtrace2Completed As OpenPrintLabelForEtrace2CompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabelForPrtSvrCompleted As OpenPrintLabelForPrtSvrCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabelForTemp01Completed As OpenPrintLabelForTemp01CompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabelForTemp02Completed As OpenPrintLabelForTemp02CompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabelForTemp03Completed As OpenPrintLabelForTemp03CompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabelForTemp04Completed As OpenPrintLabelForTemp04CompletedEventHandler
        
        '''<remarks/>
        Public Event OpenPrintLabelForTemp05Completed As OpenPrintLabelForTemp05CompletedEventHandler
        
        '''<remarks/>
        Public Event updatePrintLabelCompleted As updatePrintLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintCLIDsCompleted As PrintCLIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProcessPropertiesCompleted As GetProcessPropertiesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccessCardUserInfoCompleted As GetAccessCardUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMGTraceLevelCompleted As GetMGTraceLevelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAMLCompleted As GetAMLCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAMLDataCompleted As GetAMLDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrgListsCompleted As GetOrgListsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoginDataCompleted As GetLoginDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHHVersionCompleted As GetHHVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearBoxIDCompleted As ClearBoxIDCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Subinv_RestrictCompleted As Get_Subinv_RestrictCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCOOListsCompleted As GetCOOListsCompletedEventHandler
        
        '''<remarks/>
        Public Event Post_SubInvTransferCompleted As Post_SubInvTransferCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysMessageCompleted As GetSysMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event ShowMessageCompleted As ShowMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidatePalletCompleted As ValidatePalletCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateBerthCompleted As ValidateBerthCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintInterOrgCLIDsCompleted As PrintInterOrgCLIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintCH09LabelCompleted As PrintCH09LabelCompletedEventHandler
        
        '''<remarks/>
        Public Event ConnectionTestCompleted As ConnectionTestCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadLabelIDsCompleted As ReadLabelIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event SplitLabelIDsCompleted As SplitLabelIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event LabelDataUpdateCompleted As LabelDataUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadPalletIDCompleted As ReadPalletIDCompletedEventHandler
        
        '''<remarks/>
        Public Event PalletManagementCompleted As PalletManagementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCartonLabelCompleted As GetCartonLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintCartonLabelCompleted As PrintCartonLabelCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AndonInput", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonInput(ByVal Model As String, ByVal Line As String, ByVal Station As String, ByVal status As String) As String
            Dim results() As Object = Me.Invoke("AndonInput", New Object() {Model, Line, Station, status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonInputAsync(ByVal Model As String, ByVal Line As String, ByVal Station As String, ByVal status As String)
            Me.AndonInputAsync(Model, Line, Station, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonInputAsync(ByVal Model As String, ByVal Line As String, ByVal Station As String, ByVal status As String, ByVal userState As Object)
            If (Me.AndonInputOperationCompleted Is Nothing) Then
                Me.AndonInputOperationCompleted = AddressOf Me.OnAndonInputOperationCompleted
            End If
            Me.InvokeAsync("AndonInput", New Object() {Model, Line, Station, status}, Me.AndonInputOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonInputOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonInputCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonInputCompleted(Me, New AndonInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ExistsModel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExistsModel(ByVal Model As String) As Integer
            Dim results() As Object = Me.Invoke("ExistsModel", New Object() {Model})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExistsModelAsync(ByVal Model As String)
            Me.ExistsModelAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExistsModelAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.ExistsModelOperationCompleted Is Nothing) Then
                Me.ExistsModelOperationCompleted = AddressOf Me.OnExistsModelOperationCompleted
            End If
            Me.InvokeAsync("ExistsModel", New Object() {Model}, Me.ExistsModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnExistsModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExistsModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExistsModelCompleted(Me, New ExistsModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AndonActualQty", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonActualQty(ByVal Model As String, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("AndonActualQty", New Object() {Model, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonActualQtyAsync(ByVal Model As String, ByVal Line As String)
            Me.AndonActualQtyAsync(Model, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonActualQtyAsync(ByVal Model As String, ByVal Line As String, ByVal userState As Object)
            If (Me.AndonActualQtyOperationCompleted Is Nothing) Then
                Me.AndonActualQtyOperationCompleted = AddressOf Me.OnAndonActualQtyOperationCompleted
            End If
            Me.InvokeAsync("AndonActualQty", New Object() {Model, Line}, Me.AndonActualQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonActualQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonActualQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonActualQtyCompleted(Me, New AndonActualQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AndonActualQtyofProcess", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonActualQtyofProcess(ByVal Model As String, ByVal Line As String, ByVal process As String) As String
            Dim results() As Object = Me.Invoke("AndonActualQtyofProcess", New Object() {Model, Line, process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonActualQtyofProcessAsync(ByVal Model As String, ByVal Line As String, ByVal process As String)
            Me.AndonActualQtyofProcessAsync(Model, Line, process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonActualQtyofProcessAsync(ByVal Model As String, ByVal Line As String, ByVal process As String, ByVal userState As Object)
            If (Me.AndonActualQtyofProcessOperationCompleted Is Nothing) Then
                Me.AndonActualQtyofProcessOperationCompleted = AddressOf Me.OnAndonActualQtyofProcessOperationCompleted
            End If
            Me.InvokeAsync("AndonActualQtyofProcess", New Object() {Model, Line, process}, Me.AndonActualQtyofProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonActualQtyofProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonActualQtyofProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonActualQtyofProcessCompleted(Me, New AndonActualQtyofProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AndonFailedPercent", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonFailedPercent(ByVal Model As String, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("AndonFailedPercent", New Object() {Model, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonFailedPercentAsync(ByVal Model As String, ByVal Line As String)
            Me.AndonFailedPercentAsync(Model, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonFailedPercentAsync(ByVal Model As String, ByVal Line As String, ByVal userState As Object)
            If (Me.AndonFailedPercentOperationCompleted Is Nothing) Then
                Me.AndonFailedPercentOperationCompleted = AddressOf Me.OnAndonFailedPercentOperationCompleted
            End If
            Me.InvokeAsync("AndonFailedPercent", New Object() {Model, Line}, Me.AndonFailedPercentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonFailedPercentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonFailedPercentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonFailedPercentCompleted(Me, New AndonFailedPercentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AndonFailedQty", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonFailedQty(ByVal Model As String, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("AndonFailedQty", New Object() {Model, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonFailedQtyAsync(ByVal Model As String, ByVal Line As String)
            Me.AndonFailedQtyAsync(Model, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonFailedQtyAsync(ByVal Model As String, ByVal Line As String, ByVal userState As Object)
            If (Me.AndonFailedQtyOperationCompleted Is Nothing) Then
                Me.AndonFailedQtyOperationCompleted = AddressOf Me.OnAndonFailedQtyOperationCompleted
            End If
            Me.InvokeAsync("AndonFailedQty", New Object() {Model, Line}, Me.AndonFailedQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonFailedQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonFailedQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonFailedQtyCompleted(Me, New AndonFailedQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AndonLineStopTime", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonLineStopTime(ByVal Model As String, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("AndonLineStopTime", New Object() {Model, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonLineStopTimeAsync(ByVal Model As String, ByVal Line As String)
            Me.AndonLineStopTimeAsync(Model, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonLineStopTimeAsync(ByVal Model As String, ByVal Line As String, ByVal userState As Object)
            If (Me.AndonLineStopTimeOperationCompleted Is Nothing) Then
                Me.AndonLineStopTimeOperationCompleted = AddressOf Me.OnAndonLineStopTimeOperationCompleted
            End If
            Me.InvokeAsync("AndonLineStopTime", New Object() {Model, Line}, Me.AndonLineStopTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonLineStopTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonLineStopTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonLineStopTimeCompleted(Me, New AndonLineStopTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AndonLineStopFreq", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonLineStopFreq(ByVal Model As String, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("AndonLineStopFreq", New Object() {Model, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonLineStopFreqAsync(ByVal Model As String, ByVal Line As String)
            Me.AndonLineStopFreqAsync(Model, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonLineStopFreqAsync(ByVal Model As String, ByVal Line As String, ByVal userState As Object)
            If (Me.AndonLineStopFreqOperationCompleted Is Nothing) Then
                Me.AndonLineStopFreqOperationCompleted = AddressOf Me.OnAndonLineStopFreqOperationCompleted
            End If
            Me.InvokeAsync("AndonLineStopFreq", New Object() {Model, Line}, Me.AndonLineStopFreqOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonLineStopFreqOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonLineStopFreqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonLineStopFreqCompleted(Me, New AndonLineStopFreqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetAndonProdSche", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAndonProdSche(ByVal Line As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAndonProdSche", New Object() {Line})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAndonProdScheAsync(ByVal Line As String)
            Me.GetAndonProdScheAsync(Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAndonProdScheAsync(ByVal Line As String, ByVal userState As Object)
            If (Me.GetAndonProdScheOperationCompleted Is Nothing) Then
                Me.GetAndonProdScheOperationCompleted = AddressOf Me.OnGetAndonProdScheOperationCompleted
            End If
            Me.InvokeAsync("GetAndonProdSche", New Object() {Line}, Me.GetAndonProdScheOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAndonProdScheOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAndonProdScheCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAndonProdScheCompleted(Me, New GetAndonProdScheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateAndonProdSche", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAndonProdSche(ByVal ds As System.Data.DataSet, ByVal Line As String) As String
            Dim results() As Object = Me.Invoke("UpdateAndonProdSche", New Object() {ds, Line})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAndonProdScheAsync(ByVal ds As System.Data.DataSet, ByVal Line As String)
            Me.UpdateAndonProdScheAsync(ds, Line, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAndonProdScheAsync(ByVal ds As System.Data.DataSet, ByVal Line As String, ByVal userState As Object)
            If (Me.UpdateAndonProdScheOperationCompleted Is Nothing) Then
                Me.UpdateAndonProdScheOperationCompleted = AddressOf Me.OnUpdateAndonProdScheOperationCompleted
            End If
            Me.InvokeAsync("UpdateAndonProdSche", New Object() {ds, Line}, Me.UpdateAndonProdScheOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAndonProdScheOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAndonProdScheCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAndonProdScheCompleted(Me, New UpdateAndonProdScheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AndonProjectedQty", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AndonProjectedQty(ByVal Line As String, ByVal Target As Integer) As Integer
            Dim results() As Object = Me.Invoke("AndonProjectedQty", New Object() {Line, Target})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AndonProjectedQtyAsync(ByVal Line As String, ByVal Target As Integer)
            Me.AndonProjectedQtyAsync(Line, Target, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AndonProjectedQtyAsync(ByVal Line As String, ByVal Target As Integer, ByVal userState As Object)
            If (Me.AndonProjectedQtyOperationCompleted Is Nothing) Then
                Me.AndonProjectedQtyOperationCompleted = AddressOf Me.OnAndonProjectedQtyOperationCompleted
            End If
            Me.InvokeAsync("AndonProjectedQty", New Object() {Line, Target}, Me.AndonProjectedQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAndonProjectedQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AndonProjectedQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AndonProjectedQtyCompleted(Me, New AndonProjectedQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LEDControlByRack", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LEDControlByRack(ByVal RackID As String, ByVal Code As Integer) As Boolean
            Dim results() As Object = Me.Invoke("LEDControlByRack", New Object() {RackID, Code})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LEDControlByRackAsync(ByVal RackID As String, ByVal Code As Integer)
            Me.LEDControlByRackAsync(RackID, Code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LEDControlByRackAsync(ByVal RackID As String, ByVal Code As Integer, ByVal userState As Object)
            If (Me.LEDControlByRackOperationCompleted Is Nothing) Then
                Me.LEDControlByRackOperationCompleted = AddressOf Me.OnLEDControlByRackOperationCompleted
            End If
            Me.InvokeAsync("LEDControlByRack", New Object() {RackID, Code}, Me.LEDControlByRackOperationCompleted, userState)
        End Sub
        
        Private Sub OnLEDControlByRackOperationCompleted(ByVal arg As Object)
            If (Not (Me.LEDControlByRackCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LEDControlByRackCompleted(Me, New LEDControlByRackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LEDControlBySlot", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LEDControlBySlot(ByVal slotList As System.Data.DataSet, ByVal Code As Integer, ByVal Interval As Integer) As Boolean
            Dim results() As Object = Me.Invoke("LEDControlBySlot", New Object() {slotList, Code, Interval})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LEDControlBySlotAsync(ByVal slotList As System.Data.DataSet, ByVal Code As Integer, ByVal Interval As Integer)
            Me.LEDControlBySlotAsync(slotList, Code, Interval, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LEDControlBySlotAsync(ByVal slotList As System.Data.DataSet, ByVal Code As Integer, ByVal Interval As Integer, ByVal userState As Object)
            If (Me.LEDControlBySlotOperationCompleted Is Nothing) Then
                Me.LEDControlBySlotOperationCompleted = AddressOf Me.OnLEDControlBySlotOperationCompleted
            End If
            Me.InvokeAsync("LEDControlBySlot", New Object() {slotList, Code, Interval}, Me.LEDControlBySlotOperationCompleted, userState)
        End Sub
        
        Private Sub OnLEDControlBySlotOperationCompleted(ByVal arg As Object)
            If (Not (Me.LEDControlBySlotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LEDControlBySlotCompleted(Me, New LEDControlBySlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckBoxID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBoxID(ByRef mySMOData As SMTData) As Boolean
            Dim results() As Object = Me.Invoke("CheckBoxID", New Object() {mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBoxIDAsync(ByVal mySMOData As SMTData)
            Me.CheckBoxIDAsync(mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBoxIDAsync(ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.CheckBoxIDOperationCompleted Is Nothing) Then
                Me.CheckBoxIDOperationCompleted = AddressOf Me.OnCheckBoxIDOperationCompleted
            End If
            Me.InvokeAsync("CheckBoxID", New Object() {mySMOData}, Me.CheckBoxIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBoxIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBoxIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBoxIDCompleted(Me, New CheckBoxIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckProdLine", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckProdLine(ByRef mySMOData As SMTData) As String
            Dim results() As Object = Me.Invoke("CheckProdLine", New Object() {mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckProdLineAsync(ByVal mySMOData As SMTData)
            Me.CheckProdLineAsync(mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckProdLineAsync(ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.CheckProdLineOperationCompleted Is Nothing) Then
                Me.CheckProdLineOperationCompleted = AddressOf Me.OnCheckProdLineOperationCompleted
            End If
            Me.InvokeAsync("CheckProdLine", New Object() {mySMOData}, Me.CheckProdLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckProdLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckProdLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckProdLineCompleted(Me, New CheckProdLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ConfirmCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConfirmCLID(ByRef mySMOData As SMTData) As Boolean
            Dim results() As Object = Me.Invoke("ConfirmCLID", New Object() {mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConfirmCLIDAsync(ByVal mySMOData As SMTData)
            Me.ConfirmCLIDAsync(mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConfirmCLIDAsync(ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.ConfirmCLIDOperationCompleted Is Nothing) Then
                Me.ConfirmCLIDOperationCompleted = AddressOf Me.OnConfirmCLIDOperationCompleted
            End If
            Me.InvokeAsync("ConfirmCLID", New Object() {mySMOData}, Me.ConfirmCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnConfirmCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfirmCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfirmCLIDCompleted(Me, New ConfirmCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ConfirmMO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConfirmMO(ByVal LoginData As ERPLogin, ByRef mySMOData As SMTData) As Boolean
            Dim results() As Object = Me.Invoke("ConfirmMO", New Object() {LoginData, mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConfirmMOAsync(ByVal LoginData As ERPLogin, ByVal mySMOData As SMTData)
            Me.ConfirmMOAsync(LoginData, mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConfirmMOAsync(ByVal LoginData As ERPLogin, ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.ConfirmMOOperationCompleted Is Nothing) Then
                Me.ConfirmMOOperationCompleted = AddressOf Me.OnConfirmMOOperationCompleted
            End If
            Me.InvokeAsync("ConfirmMO", New Object() {LoginData, mySMOData}, Me.ConfirmMOOperationCompleted, userState)
        End Sub
        
        Private Sub OnConfirmMOOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfirmMOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfirmMOCompleted(Me, New ConfirmMOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadEventID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadEventID(ByRef mySMOData As SMTData) As Boolean
            Dim results() As Object = Me.Invoke("ReadEventID", New Object() {mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadEventIDAsync(ByVal mySMOData As SMTData)
            Me.ReadEventIDAsync(mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadEventIDAsync(ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.ReadEventIDOperationCompleted Is Nothing) Then
                Me.ReadEventIDOperationCompleted = AddressOf Me.OnReadEventIDOperationCompleted
            End If
            Me.InvokeAsync("ReadEventID", New Object() {mySMOData}, Me.ReadEventIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadEventIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadEventIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadEventIDCompleted(Me, New ReadEventIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintSMTDJLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintSMTDJLabel(ByRef mySMOData As SMTData, ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintSMTDJLabel", New Object() {mySMOData, Printer})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintSMTDJLabelAsync(ByVal mySMOData As SMTData, ByVal Printer As String)
            Me.PrintSMTDJLabelAsync(mySMOData, Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintSMTDJLabelAsync(ByVal mySMOData As SMTData, ByVal Printer As String, ByVal userState As Object)
            If (Me.PrintSMTDJLabelOperationCompleted Is Nothing) Then
                Me.PrintSMTDJLabelOperationCompleted = AddressOf Me.OnPrintSMTDJLabelOperationCompleted
            End If
            Me.InvokeAsync("PrintSMTDJLabel", New Object() {mySMOData, Printer}, Me.PrintSMTDJLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintSMTDJLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintSMTDJLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintSMTDJLabelCompleted(Me, New PrintSMTDJLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CancelMO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelMO(ByRef mySMOData As SMTData) As Boolean
            Dim results() As Object = Me.Invoke("CancelMO", New Object() {mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelMOAsync(ByVal mySMOData As SMTData)
            Me.CancelMOAsync(mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelMOAsync(ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.CancelMOOperationCompleted Is Nothing) Then
                Me.CancelMOOperationCompleted = AddressOf Me.OnCancelMOOperationCompleted
            End If
            Me.InvokeAsync("CancelMO", New Object() {mySMOData}, Me.CancelMOOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelMOOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelMOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelMOCompleted(Me, New CancelMOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ProcessDocking", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessDocking(ByRef mySMOData As SMTData) As Boolean
            Dim results() As Object = Me.Invoke("ProcessDocking", New Object() {mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessDockingAsync(ByVal mySMOData As SMTData)
            Me.ProcessDockingAsync(mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessDockingAsync(ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.ProcessDockingOperationCompleted Is Nothing) Then
                Me.ProcessDockingOperationCompleted = AddressOf Me.OnProcessDockingOperationCompleted
            End If
            Me.InvokeAsync("ProcessDocking", New Object() {mySMOData}, Me.ProcessDockingOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessDockingOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessDockingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessDockingCompleted(Me, New ProcessDockingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckProdLine_LD", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckProdLine_LD(ByRef mySMOData As SMTData) As String
            Dim results() As Object = Me.Invoke("CheckProdLine_LD", New Object() {mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckProdLine_LDAsync(ByVal mySMOData As SMTData)
            Me.CheckProdLine_LDAsync(mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckProdLine_LDAsync(ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.CheckProdLine_LDOperationCompleted Is Nothing) Then
                Me.CheckProdLine_LDOperationCompleted = AddressOf Me.OnCheckProdLine_LDOperationCompleted
            End If
            Me.InvokeAsync("CheckProdLine_LD", New Object() {mySMOData}, Me.CheckProdLine_LDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckProdLine_LDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckProdLine_LDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckProdLine_LDCompleted(Me, New CheckProdLine_LDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ConfirmCLID_LD", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConfirmCLID_LD(ByRef mySMOData As SMTData) As Boolean
            Dim results() As Object = Me.Invoke("ConfirmCLID_LD", New Object() {mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConfirmCLID_LDAsync(ByVal mySMOData As SMTData)
            Me.ConfirmCLID_LDAsync(mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConfirmCLID_LDAsync(ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.ConfirmCLID_LDOperationCompleted Is Nothing) Then
                Me.ConfirmCLID_LDOperationCompleted = AddressOf Me.OnConfirmCLID_LDOperationCompleted
            End If
            Me.InvokeAsync("ConfirmCLID_LD", New Object() {mySMOData}, Me.ConfirmCLID_LDOperationCompleted, userState)
        End Sub
        
        Private Sub OnConfirmCLID_LDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfirmCLID_LDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfirmCLID_LDCompleted(Me, New ConfirmCLID_LDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadEventID_LD", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadEventID_LD(ByRef mySMOData As SMTData) As Boolean
            Dim results() As Object = Me.Invoke("ReadEventID_LD", New Object() {mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadEventID_LDAsync(ByVal mySMOData As SMTData)
            Me.ReadEventID_LDAsync(mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadEventID_LDAsync(ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.ReadEventID_LDOperationCompleted Is Nothing) Then
                Me.ReadEventID_LDOperationCompleted = AddressOf Me.OnReadEventID_LDOperationCompleted
            End If
            Me.InvokeAsync("ReadEventID_LD", New Object() {mySMOData}, Me.ReadEventID_LDOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadEventID_LDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadEventID_LDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadEventID_LDCompleted(Me, New ReadEventID_LDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintSMTDJLabel_LD", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintSMTDJLabel_LD(ByRef mySMOData As SMTData, ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintSMTDJLabel_LD", New Object() {mySMOData, Printer})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintSMTDJLabel_LDAsync(ByVal mySMOData As SMTData, ByVal Printer As String)
            Me.PrintSMTDJLabel_LDAsync(mySMOData, Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintSMTDJLabel_LDAsync(ByVal mySMOData As SMTData, ByVal Printer As String, ByVal userState As Object)
            If (Me.PrintSMTDJLabel_LDOperationCompleted Is Nothing) Then
                Me.PrintSMTDJLabel_LDOperationCompleted = AddressOf Me.OnPrintSMTDJLabel_LDOperationCompleted
            End If
            Me.InvokeAsync("PrintSMTDJLabel_LD", New Object() {mySMOData, Printer}, Me.PrintSMTDJLabel_LDOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintSMTDJLabel_LDOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintSMTDJLabel_LDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintSMTDJLabel_LDCompleted(Me, New PrintSMTDJLabel_LDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ProcessDocking_LD", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessDocking_LD(ByRef mySMOData As SMTData) As Boolean
            Dim results() As Object = Me.Invoke("ProcessDocking_LD", New Object() {mySMOData})
            mySMOData = CType(results(1),SMTData)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessDocking_LDAsync(ByVal mySMOData As SMTData)
            Me.ProcessDocking_LDAsync(mySMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessDocking_LDAsync(ByVal mySMOData As SMTData, ByVal userState As Object)
            If (Me.ProcessDocking_LDOperationCompleted Is Nothing) Then
                Me.ProcessDocking_LDOperationCompleted = AddressOf Me.OnProcessDocking_LDOperationCompleted
            End If
            Me.InvokeAsync("ProcessDocking_LD", New Object() {mySMOData}, Me.ProcessDocking_LDOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessDocking_LDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessDocking_LDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessDocking_LDCompleted(Me, New ProcessDocking_LDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDJInfoSMT", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDJInfoSMT(ByVal sql As String, ByVal entityName As String, ByRef msg As String, ByVal xmlParameters As String) As String
            Dim results() As Object = Me.Invoke("GetDJInfoSMT", New Object() {sql, entityName, msg, xmlParameters})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDJInfoSMTAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String)
            Me.GetDJInfoSMTAsync(sql, entityName, msg, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDJInfoSMTAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.GetDJInfoSMTOperationCompleted Is Nothing) Then
                Me.GetDJInfoSMTOperationCompleted = AddressOf Me.OnGetDJInfoSMTOperationCompleted
            End If
            Me.InvokeAsync("GetDJInfoSMT", New Object() {sql, entityName, msg, xmlParameters}, Me.GetDJInfoSMTOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDJInfoSMTOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDJInfoSMTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDJInfoSMTCompleted(Me, New GetDJInfoSMTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetProductStructure", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductStructure(ByVal sql As String, ByVal entityName As String, ByRef msg As String, ByVal xmlParameters As String) As String
            Dim results() As Object = Me.Invoke("GetProductStructure", New Object() {sql, entityName, msg, xmlParameters})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductStructureAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String)
            Me.GetProductStructureAsync(sql, entityName, msg, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductStructureAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.GetProductStructureOperationCompleted Is Nothing) Then
                Me.GetProductStructureOperationCompleted = AddressOf Me.OnGetProductStructureOperationCompleted
            End If
            Me.InvokeAsync("GetProductStructure", New Object() {sql, entityName, msg, xmlParameters}, Me.GetProductStructureOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductStructureOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductStructureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductStructureCompleted(Me, New GetProductStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/NewSeqNO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NewSeqNO(ByRef msg As String) As String
            Dim results() As Object = Me.Invoke("NewSeqNO", New Object() {msg})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NewSeqNOAsync(ByVal msg As String)
            Me.NewSeqNOAsync(msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NewSeqNOAsync(ByVal msg As String, ByVal userState As Object)
            If (Me.NewSeqNOOperationCompleted Is Nothing) Then
                Me.NewSeqNOOperationCompleted = AddressOf Me.OnNewSeqNOOperationCompleted
            End If
            Me.InvokeAsync("NewSeqNO", New Object() {msg}, Me.NewSeqNOOperationCompleted, userState)
        End Sub
        
        Private Sub OnNewSeqNOOperationCompleted(ByVal arg As Object)
            If (Not (Me.NewSeqNOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NewSeqNOCompleted(Me, New NewSeqNOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetJobHeader", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobHeader(ByVal sql As String, ByVal entityName As String, ByRef msg As String) As String
            Dim results() As Object = Me.Invoke("GetJobHeader", New Object() {sql, entityName, msg})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaderAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String)
            Me.GetJobHeaderAsync(sql, entityName, msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobHeaderAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal userState As Object)
            If (Me.GetJobHeaderOperationCompleted Is Nothing) Then
                Me.GetJobHeaderOperationCompleted = AddressOf Me.OnGetJobHeaderOperationCompleted
            End If
            Me.InvokeAsync("GetJobHeader", New Object() {sql, entityName, msg}, Me.GetJobHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobHeaderCompleted(Me, New GetJobHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetJobHeader2", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobHeader2(ByVal sql As String, ByVal entityName As String, ByRef msg As String, ByVal xmlParameters As String) As String
            Dim results() As Object = Me.Invoke("GetJobHeader2", New Object() {sql, entityName, msg, xmlParameters})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobHeader2Async(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String)
            Me.GetJobHeader2Async(sql, entityName, msg, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobHeader2Async(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.GetJobHeader2OperationCompleted Is Nothing) Then
                Me.GetJobHeader2OperationCompleted = AddressOf Me.OnGetJobHeader2OperationCompleted
            End If
            Me.InvokeAsync("GetJobHeader2", New Object() {sql, entityName, msg, xmlParameters}, Me.GetJobHeader2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobHeader2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobHeader2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobHeader2Completed(Me, New GetJobHeader2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/InsertJob", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InsertJob(ByVal xmlObj As String, ByRef msg As String)
            Dim results() As Object = Me.Invoke("InsertJob", New Object() {xmlObj, msg})
            msg = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertJobAsync(ByVal xmlObj As String, ByVal msg As String)
            Me.InsertJobAsync(xmlObj, msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertJobAsync(ByVal xmlObj As String, ByVal msg As String, ByVal userState As Object)
            If (Me.InsertJobOperationCompleted Is Nothing) Then
                Me.InsertJobOperationCompleted = AddressOf Me.OnInsertJobOperationCompleted
            End If
            Me.InvokeAsync("InsertJob", New Object() {xmlObj, msg}, Me.InsertJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertJobCompleted(Me, New InsertJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateJob", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateJob(ByVal xmljob As String, ByVal clearFirst As Boolean, ByRef msg As String)
            Dim results() As Object = Me.Invoke("UpdateJob", New Object() {xmljob, clearFirst, msg})
            msg = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateJobAsync(ByVal xmljob As String, ByVal clearFirst As Boolean, ByVal msg As String)
            Me.UpdateJobAsync(xmljob, clearFirst, msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateJobAsync(ByVal xmljob As String, ByVal clearFirst As Boolean, ByVal msg As String, ByVal userState As Object)
            If (Me.UpdateJobOperationCompleted Is Nothing) Then
                Me.UpdateJobOperationCompleted = AddressOf Me.OnUpdateJobOperationCompleted
            End If
            Me.InvokeAsync("UpdateJob", New Object() {xmljob, clearFirst, msg}, Me.UpdateJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateJobCompleted(Me, New UpdateJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateJobStatus", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateJobStatus(ByVal xmljob As String, ByRef msg As String)
            Dim results() As Object = Me.Invoke("UpdateJobStatus", New Object() {xmljob, msg})
            msg = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateJobStatusAsync(ByVal xmljob As String, ByVal msg As String)
            Me.UpdateJobStatusAsync(xmljob, msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateJobStatusAsync(ByVal xmljob As String, ByVal msg As String, ByVal userState As Object)
            If (Me.UpdateJobStatusOperationCompleted Is Nothing) Then
                Me.UpdateJobStatusOperationCompleted = AddressOf Me.OnUpdateJobStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateJobStatus", New Object() {xmljob, msg}, Me.UpdateJobStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateJobStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateJobStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateJobStatusCompleted(Me, New UpdateJobStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetProdLineByLineType", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProdLineByLineType(ByVal sql As String, ByVal entityName As String, ByRef msg As String, ByVal xmlParameters As String) As String
            Dim results() As Object = Me.Invoke("GetProdLineByLineType", New Object() {sql, entityName, msg, xmlParameters})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProdLineByLineTypeAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String)
            Me.GetProdLineByLineTypeAsync(sql, entityName, msg, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProdLineByLineTypeAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.GetProdLineByLineTypeOperationCompleted Is Nothing) Then
                Me.GetProdLineByLineTypeOperationCompleted = AddressOf Me.OnGetProdLineByLineTypeOperationCompleted
            End If
            Me.InvokeAsync("GetProdLineByLineType", New Object() {sql, entityName, msg, xmlParameters}, Me.GetProdLineByLineTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProdLineByLineTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProdLineByLineTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProdLineByLineTypeCompleted(Me, New GetProdLineByLineTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSMTMachines", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMTMachines(ByVal sql As String, ByVal entityName As String, ByRef msg As String, ByVal xmlParameters As String) As String
            Dim results() As Object = Me.Invoke("GetSMTMachines", New Object() {sql, entityName, msg, xmlParameters})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMTMachinesAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String)
            Me.GetSMTMachinesAsync(sql, entityName, msg, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMTMachinesAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.GetSMTMachinesOperationCompleted Is Nothing) Then
                Me.GetSMTMachinesOperationCompleted = AddressOf Me.OnGetSMTMachinesOperationCompleted
            End If
            Me.InvokeAsync("GetSMTMachines", New Object() {sql, entityName, msg, xmlParameters}, Me.GetSMTMachinesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMTMachinesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMTMachinesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMTMachinesCompleted(Me, New GetSMTMachinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetProdLine", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProdLine(ByVal sql As String, ByVal entityName As String, ByRef msg As String) As String
            Dim results() As Object = Me.Invoke("GetProdLine", New Object() {sql, entityName, msg})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProdLineAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String)
            Me.GetProdLineAsync(sql, entityName, msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProdLineAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal userState As Object)
            If (Me.GetProdLineOperationCompleted Is Nothing) Then
                Me.GetProdLineOperationCompleted = AddressOf Me.OnGetProdLineOperationCompleted
            End If
            Me.InvokeAsync("GetProdLine", New Object() {sql, entityName, msg}, Me.GetProdLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProdLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProdLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProdLineCompleted(Me, New GetProdLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMSLMachine", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMSLMachine(ByVal sql As String, ByVal entityName As String, ByRef msg As String, ByVal xmlParameters As String) As String
            Dim results() As Object = Me.Invoke("GetMSLMachine", New Object() {sql, entityName, msg, xmlParameters})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMSLMachineAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String)
            Me.GetMSLMachineAsync(sql, entityName, msg, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMSLMachineAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.GetMSLMachineOperationCompleted Is Nothing) Then
                Me.GetMSLMachineOperationCompleted = AddressOf Me.OnGetMSLMachineOperationCompleted
            End If
            Me.InvokeAsync("GetMSLMachine", New Object() {sql, entityName, msg, xmlParameters}, Me.GetMSLMachineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMSLMachineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMSLMachineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMSLMachineCompleted(Me, New GetMSLMachineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMSLModel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMSLModel(ByVal sql As String, ByVal entityName As String, ByRef msg As String, ByVal xmlParameters As String) As String
            Dim results() As Object = Me.Invoke("GetMSLModel", New Object() {sql, entityName, msg, xmlParameters})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMSLModelAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String)
            Me.GetMSLModelAsync(sql, entityName, msg, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMSLModelAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.GetMSLModelOperationCompleted Is Nothing) Then
                Me.GetMSLModelOperationCompleted = AddressOf Me.OnGetMSLModelOperationCompleted
            End If
            Me.InvokeAsync("GetMSLModel", New Object() {sql, entityName, msg, xmlParameters}, Me.GetMSLModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMSLModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMSLModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMSLModelCompleted(Me, New GetMSLModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DeleteMsl", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteMsl(ByVal xmlObj As String, ByRef msg As String)
            Dim results() As Object = Me.Invoke("DeleteMsl", New Object() {xmlObj, msg})
            msg = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMslAsync(ByVal xmlObj As String, ByVal msg As String)
            Me.DeleteMslAsync(xmlObj, msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMslAsync(ByVal xmlObj As String, ByVal msg As String, ByVal userState As Object)
            If (Me.DeleteMslOperationCompleted Is Nothing) Then
                Me.DeleteMslOperationCompleted = AddressOf Me.OnDeleteMslOperationCompleted
            End If
            Me.InvokeAsync("DeleteMsl", New Object() {xmlObj, msg}, Me.DeleteMslOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteMslOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteMslCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteMslCompleted(Me, New DeleteMslCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/InsertMsl", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InsertMsl(ByVal xmlObj As String, ByRef msg As String)
            Dim results() As Object = Me.Invoke("InsertMsl", New Object() {xmlObj, msg})
            msg = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertMslAsync(ByVal xmlObj As String, ByVal msg As String)
            Me.InsertMslAsync(xmlObj, msg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertMslAsync(ByVal xmlObj As String, ByVal msg As String, ByVal userState As Object)
            If (Me.InsertMslOperationCompleted Is Nothing) Then
                Me.InsertMslOperationCompleted = AddressOf Me.OnInsertMslOperationCompleted
            End If
            Me.InvokeAsync("InsertMsl", New Object() {xmlObj, msg}, Me.InsertMslOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertMslOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertMslCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertMslCompleted(Me, New InsertMslCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetJobMsl", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobMsl(ByVal sql As String, ByVal entityName As String, ByRef msg As String, ByVal xmlParameters As String) As String
            Dim results() As Object = Me.Invoke("GetJobMsl", New Object() {sql, entityName, msg, xmlParameters})
            msg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobMslAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String)
            Me.GetJobMslAsync(sql, entityName, msg, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobMslAsync(ByVal sql As String, ByVal entityName As String, ByVal msg As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.GetJobMslOperationCompleted Is Nothing) Then
                Me.GetJobMslOperationCompleted = AddressOf Me.OnGetJobMslOperationCompleted
            End If
            Me.InvokeAsync("GetJobMsl", New Object() {sql, entityName, msg, xmlParameters}, Me.GetJobMslOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobMslOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobMslCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobMslCompleted(Me, New GetJobMslCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ExecSP", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecSP(ByVal spname As String, ByVal msg As String, ByVal xmlParameters As String) As Integer
            Dim results() As Object = Me.Invoke("ExecSP", New Object() {spname, msg, xmlParameters})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecSPAsync(ByVal spname As String, ByVal msg As String, ByVal xmlParameters As String)
            Me.ExecSPAsync(spname, msg, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecSPAsync(ByVal spname As String, ByVal msg As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.ExecSPOperationCompleted Is Nothing) Then
                Me.ExecSPOperationCompleted = AddressOf Me.OnExecSPOperationCompleted
            End If
            Me.InvokeAsync("ExecSP", New Object() {spname, msg, xmlParameters}, Me.ExecSPOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecSPOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecSPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecSPCompleted(Me, New ExecSPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/StockTake_BkpBFAdjust", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StockTake_BkpBFAdjust(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("StockTake_BkpBFAdjust", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StockTake_BkpBFAdjustAsync(ByVal OracleLoginData As ERPLogin)
            Me.StockTake_BkpBFAdjustAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StockTake_BkpBFAdjustAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.StockTake_BkpBFAdjustOperationCompleted Is Nothing) Then
                Me.StockTake_BkpBFAdjustOperationCompleted = AddressOf Me.OnStockTake_BkpBFAdjustOperationCompleted
            End If
            Me.InvokeAsync("StockTake_BkpBFAdjust", New Object() {OracleLoginData}, Me.StockTake_BkpBFAdjustOperationCompleted, userState)
        End Sub
        
        Private Sub OnStockTake_BkpBFAdjustOperationCompleted(ByVal arg As Object)
            If (Not (Me.StockTake_BkpBFAdjustCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StockTake_BkpBFAdjustCompleted(Me, New StockTake_BkpBFAdjustCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ForLoss", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ForLoss(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ForLoss", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForLossAsync(ByVal OracleLoginData As ERPLogin)
            Me.ForLossAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForLossAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ForLossOperationCompleted Is Nothing) Then
                Me.ForLossOperationCompleted = AddressOf Me.OnForLossOperationCompleted
            End If
            Me.InvokeAsync("ForLoss", New Object() {OracleLoginData}, Me.ForLossOperationCompleted, userState)
        End Sub
        
        Private Sub OnForLossOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForLossCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForLossCompleted(Me, New ForLossCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ForGain", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ForGain(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ForGain", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForGainAsync(ByVal OracleLoginData As ERPLogin)
            Me.ForGainAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForGainAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ForGainOperationCompleted Is Nothing) Then
                Me.ForGainOperationCompleted = AddressOf Me.OnForGainOperationCompleted
            End If
            Me.InvokeAsync("ForGain", New Object() {OracleLoginData}, Me.ForGainOperationCompleted, userState)
        End Sub
        
        Private Sub OnForGainOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForGainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForGainCompleted(Me, New ForGainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ForNotFound", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ForNotFound(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ForNotFound", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForNotFoundAsync(ByVal OracleLoginData As ERPLogin)
            Me.ForNotFoundAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForNotFoundAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ForNotFoundOperationCompleted Is Nothing) Then
                Me.ForNotFoundOperationCompleted = AddressOf Me.OnForNotFoundOperationCompleted
            End If
            Me.InvokeAsync("ForNotFound", New Object() {OracleLoginData}, Me.ForNotFoundOperationCompleted, userState)
        End Sub
        
        Private Sub OnForNotFoundOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForNotFoundCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForNotFoundCompleted(Me, New ForNotFoundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ForNewFind", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ForNewFind(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ForNewFind", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForNewFindAsync(ByVal OracleLoginData As ERPLogin)
            Me.ForNewFindAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForNewFindAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ForNewFindOperationCompleted Is Nothing) Then
                Me.ForNewFindOperationCompleted = AddressOf Me.OnForNewFindOperationCompleted
            End If
            Me.InvokeAsync("ForNewFind", New Object() {OracleLoginData}, Me.ForNewFindOperationCompleted, userState)
        End Sub
        
        Private Sub OnForNewFindOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForNewFindCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForNewFindCompleted(Me, New ForNewFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ForDiffLocator", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ForDiffLocator(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ForDiffLocator", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForDiffLocatorAsync(ByVal OracleLoginData As ERPLogin)
            Me.ForDiffLocatorAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForDiffLocatorAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ForDiffLocatorOperationCompleted Is Nothing) Then
                Me.ForDiffLocatorOperationCompleted = AddressOf Me.OnForDiffLocatorOperationCompleted
            End If
            Me.InvokeAsync("ForDiffLocator", New Object() {OracleLoginData}, Me.ForDiffLocatorOperationCompleted, userState)
        End Sub
        
        Private Sub OnForDiffLocatorOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForDiffLocatorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForDiffLocatorCompleted(Me, New ForDiffLocatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ForLossDiff", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ForLossDiff(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ForLossDiff", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForLossDiffAsync(ByVal OracleLoginData As ERPLogin)
            Me.ForLossDiffAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForLossDiffAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ForLossDiffOperationCompleted Is Nothing) Then
                Me.ForLossDiffOperationCompleted = AddressOf Me.OnForLossDiffOperationCompleted
            End If
            Me.InvokeAsync("ForLossDiff", New Object() {OracleLoginData}, Me.ForLossDiffOperationCompleted, userState)
        End Sub
        
        Private Sub OnForLossDiffOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForLossDiffCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForLossDiffCompleted(Me, New ForLossDiffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ForGainDiff", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ForGainDiff(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ForGainDiff", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForGainDiffAsync(ByVal OracleLoginData As ERPLogin)
            Me.ForGainDiffAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForGainDiffAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ForGainDiffOperationCompleted Is Nothing) Then
                Me.ForGainDiffOperationCompleted = AddressOf Me.OnForGainDiffOperationCompleted
            End If
            Me.InvokeAsync("ForGainDiff", New Object() {OracleLoginData}, Me.ForGainDiffOperationCompleted, userState)
        End Sub
        
        Private Sub OnForGainDiffOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForGainDiffCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForGainDiffCompleted(Me, New ForGainDiffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/StockTake_BkpAfterAdjust", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StockTake_BkpAfterAdjust(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("StockTake_BkpAfterAdjust", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StockTake_BkpAfterAdjustAsync(ByVal OracleLoginData As ERPLogin)
            Me.StockTake_BkpAfterAdjustAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StockTake_BkpAfterAdjustAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.StockTake_BkpAfterAdjustOperationCompleted Is Nothing) Then
                Me.StockTake_BkpAfterAdjustOperationCompleted = AddressOf Me.OnStockTake_BkpAfterAdjustOperationCompleted
            End If
            Me.InvokeAsync("StockTake_BkpAfterAdjust", New Object() {OracleLoginData}, Me.StockTake_BkpAfterAdjustOperationCompleted, userState)
        End Sub
        
        Private Sub OnStockTake_BkpAfterAdjustOperationCompleted(ByVal arg As Object)
            If (Not (Me.StockTake_BkpAfterAdjustCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StockTake_BkpAfterAdjustCompleted(Me, New StockTake_BkpAfterAdjustCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BFC_GetWeekCode", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BFC_GetWeekCode(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("BFC_GetWeekCode", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BFC_GetWeekCodeAsync(ByVal OracleLoginData As ERPLogin)
            Me.BFC_GetWeekCodeAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BFC_GetWeekCodeAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.BFC_GetWeekCodeOperationCompleted Is Nothing) Then
                Me.BFC_GetWeekCodeOperationCompleted = AddressOf Me.OnBFC_GetWeekCodeOperationCompleted
            End If
            Me.InvokeAsync("BFC_GetWeekCode", New Object() {OracleLoginData}, Me.BFC_GetWeekCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnBFC_GetWeekCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.BFC_GetWeekCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BFC_GetWeekCodeCompleted(Me, New BFC_GetWeekCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BFC_GetBFSubinv", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BFC_GetBFSubinv(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("BFC_GetBFSubinv", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BFC_GetBFSubinvAsync(ByVal OracleLoginData As ERPLogin)
            Me.BFC_GetBFSubinvAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BFC_GetBFSubinvAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.BFC_GetBFSubinvOperationCompleted Is Nothing) Then
                Me.BFC_GetBFSubinvOperationCompleted = AddressOf Me.OnBFC_GetBFSubinvOperationCompleted
            End If
            Me.InvokeAsync("BFC_GetBFSubinv", New Object() {OracleLoginData}, Me.BFC_GetBFSubinvOperationCompleted, userState)
        End Sub
        
        Private Sub OnBFC_GetBFSubinvOperationCompleted(ByVal arg As Object)
            If (Not (Me.BFC_GetBFSubinvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BFC_GetBFSubinvCompleted(Me, New BFC_GetBFSubinvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BFC_DelOldBFCount", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BFC_DelOldBFCount(ByVal WeekCode As String, ByVal BFSubinv As String, ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("BFC_DelOldBFCount", New Object() {WeekCode, BFSubinv, OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BFC_DelOldBFCountAsync(ByVal WeekCode As String, ByVal BFSubinv As String, ByVal OracleLoginData As ERPLogin)
            Me.BFC_DelOldBFCountAsync(WeekCode, BFSubinv, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BFC_DelOldBFCountAsync(ByVal WeekCode As String, ByVal BFSubinv As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.BFC_DelOldBFCountOperationCompleted Is Nothing) Then
                Me.BFC_DelOldBFCountOperationCompleted = AddressOf Me.OnBFC_DelOldBFCountOperationCompleted
            End If
            Me.InvokeAsync("BFC_DelOldBFCount", New Object() {WeekCode, BFSubinv, OracleLoginData}, Me.BFC_DelOldBFCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnBFC_DelOldBFCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.BFC_DelOldBFCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BFC_DelOldBFCountCompleted(Me, New BFC_DelOldBFCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BFC_GetCLIDInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BFC_GetCLIDInfo(ByVal CLID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("BFC_GetCLIDInfo", New Object() {CLID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BFC_GetCLIDInfoAsync(ByVal CLID As String, ByVal OracleLoginData As ERPLogin)
            Me.BFC_GetCLIDInfoAsync(CLID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BFC_GetCLIDInfoAsync(ByVal CLID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.BFC_GetCLIDInfoOperationCompleted Is Nothing) Then
                Me.BFC_GetCLIDInfoOperationCompleted = AddressOf Me.OnBFC_GetCLIDInfoOperationCompleted
            End If
            Me.InvokeAsync("BFC_GetCLIDInfo", New Object() {CLID, OracleLoginData}, Me.BFC_GetCLIDInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnBFC_GetCLIDInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.BFC_GetCLIDInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BFC_GetCLIDInfoCompleted(Me, New BFC_GetCLIDInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Save_BFCount", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Save_BFCount(ByVal WeekCode As String, ByVal lblInfo As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("Save_BFCount", New Object() {WeekCode, lblInfo, OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Save_BFCountAsync(ByVal WeekCode As String, ByVal lblInfo As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.Save_BFCountAsync(WeekCode, lblInfo, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Save_BFCountAsync(ByVal WeekCode As String, ByVal lblInfo As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Save_BFCountOperationCompleted Is Nothing) Then
                Me.Save_BFCountOperationCompleted = AddressOf Me.OnSave_BFCountOperationCompleted
            End If
            Me.InvokeAsync("Save_BFCount", New Object() {WeekCode, lblInfo, OracleLoginData}, Me.Save_BFCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnSave_BFCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.Save_BFCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Save_BFCountCompleted(Me, New Save_BFCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_Secondary_Inventory", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Secondary_Inventory(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_Secondary_Inventory", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Secondary_InventoryAsync(ByVal LoginData As ERPLogin)
            Me.Get_Secondary_InventoryAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Secondary_InventoryAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_Secondary_InventoryOperationCompleted Is Nothing) Then
                Me.Get_Secondary_InventoryOperationCompleted = AddressOf Me.OnGet_Secondary_InventoryOperationCompleted
            End If
            Me.InvokeAsync("Get_Secondary_Inventory", New Object() {LoginData}, Me.Get_Secondary_InventoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Secondary_InventoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Secondary_InventoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Secondary_InventoryCompleted(Me, New Get_Secondary_InventoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_Sub_Locator", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Sub_Locator(ByVal LoginData As ERPLogin, ByVal subinventory_code As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_Sub_Locator", New Object() {LoginData, subinventory_code})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Sub_LocatorAsync(ByVal LoginData As ERPLogin, ByVal subinventory_code As String)
            Me.Get_Sub_LocatorAsync(LoginData, subinventory_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Sub_LocatorAsync(ByVal LoginData As ERPLogin, ByVal subinventory_code As String, ByVal userState As Object)
            If (Me.Get_Sub_LocatorOperationCompleted Is Nothing) Then
                Me.Get_Sub_LocatorOperationCompleted = AddressOf Me.OnGet_Sub_LocatorOperationCompleted
            End If
            Me.InvokeAsync("Get_Sub_Locator", New Object() {LoginData, subinventory_code}, Me.Get_Sub_LocatorOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Sub_LocatorOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Sub_LocatorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Sub_LocatorCompleted(Me, New Get_Sub_LocatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_List_Sub_Locator", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_List_Sub_Locator(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_List_Sub_Locator", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_List_Sub_LocatorAsync(ByVal LoginData As ERPLogin)
            Me.Get_List_Sub_LocatorAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_List_Sub_LocatorAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_List_Sub_LocatorOperationCompleted Is Nothing) Then
                Me.Get_List_Sub_LocatorOperationCompleted = AddressOf Me.OnGet_List_Sub_LocatorOperationCompleted
            End If
            Me.InvokeAsync("Get_List_Sub_Locator", New Object() {LoginData}, Me.Get_List_Sub_LocatorOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_List_Sub_LocatorOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_List_Sub_LocatorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_List_Sub_LocatorCompleted(Me, New Get_List_Sub_LocatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Find_List_Sub_Locator", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Find_List_Sub_Locator(ByVal LoginData As ERPLogin, ByVal Sub_type As String, ByVal Subinventory As String, ByVal Locator As String, ByVal Indecator As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Find_List_Sub_Locator", New Object() {LoginData, Sub_type, Subinventory, Locator, Indecator})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Find_List_Sub_LocatorAsync(ByVal LoginData As ERPLogin, ByVal Sub_type As String, ByVal Subinventory As String, ByVal Locator As String, ByVal Indecator As String)
            Me.Find_List_Sub_LocatorAsync(LoginData, Sub_type, Subinventory, Locator, Indecator, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Find_List_Sub_LocatorAsync(ByVal LoginData As ERPLogin, ByVal Sub_type As String, ByVal Subinventory As String, ByVal Locator As String, ByVal Indecator As String, ByVal userState As Object)
            If (Me.Find_List_Sub_LocatorOperationCompleted Is Nothing) Then
                Me.Find_List_Sub_LocatorOperationCompleted = AddressOf Me.OnFind_List_Sub_LocatorOperationCompleted
            End If
            Me.InvokeAsync("Find_List_Sub_Locator", New Object() {LoginData, Sub_type, Subinventory, Locator, Indecator}, Me.Find_List_Sub_LocatorOperationCompleted, userState)
        End Sub
        
        Private Sub OnFind_List_Sub_LocatorOperationCompleted(ByVal arg As Object)
            If (Not (Me.Find_List_Sub_LocatorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Find_List_Sub_LocatorCompleted(Me, New Find_List_Sub_LocatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Add_Sub_Locator", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Add_Sub_Locator(ByVal LoginData As ERPLogin, ByVal SUBType As String, ByVal SUBINV As String, ByVal Locator As String, ByVal Indecator As String) As String
            Dim results() As Object = Me.Invoke("Add_Sub_Locator", New Object() {LoginData, SUBType, SUBINV, Locator, Indecator})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Add_Sub_LocatorAsync(ByVal LoginData As ERPLogin, ByVal SUBType As String, ByVal SUBINV As String, ByVal Locator As String, ByVal Indecator As String)
            Me.Add_Sub_LocatorAsync(LoginData, SUBType, SUBINV, Locator, Indecator, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Add_Sub_LocatorAsync(ByVal LoginData As ERPLogin, ByVal SUBType As String, ByVal SUBINV As String, ByVal Locator As String, ByVal Indecator As String, ByVal userState As Object)
            If (Me.Add_Sub_LocatorOperationCompleted Is Nothing) Then
                Me.Add_Sub_LocatorOperationCompleted = AddressOf Me.OnAdd_Sub_LocatorOperationCompleted
            End If
            Me.InvokeAsync("Add_Sub_Locator", New Object() {LoginData, SUBType, SUBINV, Locator, Indecator}, Me.Add_Sub_LocatorOperationCompleted, userState)
        End Sub
        
        Private Sub OnAdd_Sub_LocatorOperationCompleted(ByVal arg As Object)
            If (Not (Me.Add_Sub_LocatorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Add_Sub_LocatorCompleted(Me, New Add_Sub_LocatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Delete_Sub_Locator", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Delete_Sub_Locator(ByVal RowID As String) As String
            Dim results() As Object = Me.Invoke("Delete_Sub_Locator", New Object() {RowID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Delete_Sub_LocatorAsync(ByVal RowID As String)
            Me.Delete_Sub_LocatorAsync(RowID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Delete_Sub_LocatorAsync(ByVal RowID As String, ByVal userState As Object)
            If (Me.Delete_Sub_LocatorOperationCompleted Is Nothing) Then
                Me.Delete_Sub_LocatorOperationCompleted = AddressOf Me.OnDelete_Sub_LocatorOperationCompleted
            End If
            Me.InvokeAsync("Delete_Sub_Locator", New Object() {RowID}, Me.Delete_Sub_LocatorOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelete_Sub_LocatorOperationCompleted(ByVal arg As Object)
            If (Not (Me.Delete_Sub_LocatorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Delete_Sub_LocatorCompleted(Me, New Delete_Sub_LocatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Validate_item_number", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Validate_item_number(ByVal LoginData As ERPLogin, ByVal ItemNo As String) As String
            Dim results() As Object = Me.Invoke("Validate_item_number", New Object() {LoginData, ItemNo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Validate_item_numberAsync(ByVal LoginData As ERPLogin, ByVal ItemNo As String)
            Me.Validate_item_numberAsync(LoginData, ItemNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Validate_item_numberAsync(ByVal LoginData As ERPLogin, ByVal ItemNo As String, ByVal userState As Object)
            If (Me.Validate_item_numberOperationCompleted Is Nothing) Then
                Me.Validate_item_numberOperationCompleted = AddressOf Me.OnValidate_item_numberOperationCompleted
            End If
            Me.InvokeAsync("Validate_item_number", New Object() {LoginData, ItemNo}, Me.Validate_item_numberOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidate_item_numberOperationCompleted(ByVal arg As Object)
            If (Not (Me.Validate_item_numberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Validate_item_numberCompleted(Me, New Validate_item_numberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/add_floor_stock_material", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function add_floor_stock_material(ByVal LoginData As ERPLogin, ByVal ItemNo As String, ByVal usage1 As String, ByVal usage2 As String, ByVal usage3 As String) As String
            Dim results() As Object = Me.Invoke("add_floor_stock_material", New Object() {LoginData, ItemNo, usage1, usage2, usage3})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub add_floor_stock_materialAsync(ByVal LoginData As ERPLogin, ByVal ItemNo As String, ByVal usage1 As String, ByVal usage2 As String, ByVal usage3 As String)
            Me.add_floor_stock_materialAsync(LoginData, ItemNo, usage1, usage2, usage3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub add_floor_stock_materialAsync(ByVal LoginData As ERPLogin, ByVal ItemNo As String, ByVal usage1 As String, ByVal usage2 As String, ByVal usage3 As String, ByVal userState As Object)
            If (Me.add_floor_stock_materialOperationCompleted Is Nothing) Then
                Me.add_floor_stock_materialOperationCompleted = AddressOf Me.Onadd_floor_stock_materialOperationCompleted
            End If
            Me.InvokeAsync("add_floor_stock_material", New Object() {LoginData, ItemNo, usage1, usage2, usage3}, Me.add_floor_stock_materialOperationCompleted, userState)
        End Sub
        
        Private Sub Onadd_floor_stock_materialOperationCompleted(ByVal arg As Object)
            If (Not (Me.add_floor_stock_materialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent add_floor_stock_materialCompleted(Me, New add_floor_stock_materialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_List_Floor_Stock", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_List_Floor_Stock(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_List_Floor_Stock", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_List_Floor_StockAsync(ByVal LoginData As ERPLogin)
            Me.Get_List_Floor_StockAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_List_Floor_StockAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_List_Floor_StockOperationCompleted Is Nothing) Then
                Me.Get_List_Floor_StockOperationCompleted = AddressOf Me.OnGet_List_Floor_StockOperationCompleted
            End If
            Me.InvokeAsync("Get_List_Floor_Stock", New Object() {LoginData}, Me.Get_List_Floor_StockOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_List_Floor_StockOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_List_Floor_StockCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_List_Floor_StockCompleted(Me, New Get_List_Floor_StockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Find_List_Floor_Stock", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Find_List_Floor_Stock(ByVal LoginData As ERPLogin, ByVal Item As String, ByVal Usage1 As String, ByVal Usage2 As String, ByVal Usage3 As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Find_List_Floor_Stock", New Object() {LoginData, Item, Usage1, Usage2, Usage3})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Find_List_Floor_StockAsync(ByVal LoginData As ERPLogin, ByVal Item As String, ByVal Usage1 As String, ByVal Usage2 As String, ByVal Usage3 As String)
            Me.Find_List_Floor_StockAsync(LoginData, Item, Usage1, Usage2, Usage3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Find_List_Floor_StockAsync(ByVal LoginData As ERPLogin, ByVal Item As String, ByVal Usage1 As String, ByVal Usage2 As String, ByVal Usage3 As String, ByVal userState As Object)
            If (Me.Find_List_Floor_StockOperationCompleted Is Nothing) Then
                Me.Find_List_Floor_StockOperationCompleted = AddressOf Me.OnFind_List_Floor_StockOperationCompleted
            End If
            Me.InvokeAsync("Find_List_Floor_Stock", New Object() {LoginData, Item, Usage1, Usage2, Usage3}, Me.Find_List_Floor_StockOperationCompleted, userState)
        End Sub
        
        Private Sub OnFind_List_Floor_StockOperationCompleted(ByVal arg As Object)
            If (Not (Me.Find_List_Floor_StockCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Find_List_Floor_StockCompleted(Me, New Find_List_Floor_StockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Delete_Floor_Stock", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Delete_Floor_Stock(ByVal RowID As String) As String
            Dim results() As Object = Me.Invoke("Delete_Floor_Stock", New Object() {RowID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Delete_Floor_StockAsync(ByVal RowID As String)
            Me.Delete_Floor_StockAsync(RowID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Delete_Floor_StockAsync(ByVal RowID As String, ByVal userState As Object)
            If (Me.Delete_Floor_StockOperationCompleted Is Nothing) Then
                Me.Delete_Floor_StockOperationCompleted = AddressOf Me.OnDelete_Floor_StockOperationCompleted
            End If
            Me.InvokeAsync("Delete_Floor_Stock", New Object() {RowID}, Me.Delete_Floor_StockOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelete_Floor_StockOperationCompleted(ByVal arg As Object)
            If (Not (Me.Delete_Floor_StockCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Delete_Floor_StockCompleted(Me, New Delete_Floor_StockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Update_Floor_Stock", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update_Floor_Stock(ByVal RowID As String, ByVal Usage1 As String, ByVal Usage2 As String, ByVal Usage3 As String) As String
            Dim results() As Object = Me.Invoke("Update_Floor_Stock", New Object() {RowID, Usage1, Usage2, Usage3})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Update_Floor_StockAsync(ByVal RowID As String, ByVal Usage1 As String, ByVal Usage2 As String, ByVal Usage3 As String)
            Me.Update_Floor_StockAsync(RowID, Usage1, Usage2, Usage3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Update_Floor_StockAsync(ByVal RowID As String, ByVal Usage1 As String, ByVal Usage2 As String, ByVal Usage3 As String, ByVal userState As Object)
            If (Me.Update_Floor_StockOperationCompleted Is Nothing) Then
                Me.Update_Floor_StockOperationCompleted = AddressOf Me.OnUpdate_Floor_StockOperationCompleted
            End If
            Me.InvokeAsync("Update_Floor_Stock", New Object() {RowID, Usage1, Usage2, Usage3}, Me.Update_Floor_StockOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdate_Floor_StockOperationCompleted(ByVal arg As Object)
            If (Not (Me.Update_Floor_StockCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Update_Floor_StockCompleted(Me, New Update_Floor_StockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_Generic_Disposition", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Generic_Disposition(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_Generic_Disposition", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Generic_DispositionAsync(ByVal LoginData As ERPLogin)
            Me.Get_Generic_DispositionAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Generic_DispositionAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_Generic_DispositionOperationCompleted Is Nothing) Then
                Me.Get_Generic_DispositionOperationCompleted = AddressOf Me.OnGet_Generic_DispositionOperationCompleted
            End If
            Me.InvokeAsync("Get_Generic_Disposition", New Object() {LoginData}, Me.Get_Generic_DispositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Generic_DispositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Generic_DispositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Generic_DispositionCompleted(Me, New Get_Generic_DispositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_List_Generic_Disposition", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_List_Generic_Disposition(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_List_Generic_Disposition", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_List_Generic_DispositionAsync(ByVal LoginData As ERPLogin)
            Me.Get_List_Generic_DispositionAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_List_Generic_DispositionAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_List_Generic_DispositionOperationCompleted Is Nothing) Then
                Me.Get_List_Generic_DispositionOperationCompleted = AddressOf Me.OnGet_List_Generic_DispositionOperationCompleted
            End If
            Me.InvokeAsync("Get_List_Generic_Disposition", New Object() {LoginData}, Me.Get_List_Generic_DispositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_List_Generic_DispositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_List_Generic_DispositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_List_Generic_DispositionCompleted(Me, New Get_List_Generic_DispositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/add_generic_dispositions", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function add_generic_dispositions(ByVal LoginData As ERPLogin, ByVal DispName As String, ByVal DispDESC As String) As String
            Dim results() As Object = Me.Invoke("add_generic_dispositions", New Object() {LoginData, DispName, DispDESC})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub add_generic_dispositionsAsync(ByVal LoginData As ERPLogin, ByVal DispName As String, ByVal DispDESC As String)
            Me.add_generic_dispositionsAsync(LoginData, DispName, DispDESC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub add_generic_dispositionsAsync(ByVal LoginData As ERPLogin, ByVal DispName As String, ByVal DispDESC As String, ByVal userState As Object)
            If (Me.add_generic_dispositionsOperationCompleted Is Nothing) Then
                Me.add_generic_dispositionsOperationCompleted = AddressOf Me.Onadd_generic_dispositionsOperationCompleted
            End If
            Me.InvokeAsync("add_generic_dispositions", New Object() {LoginData, DispName, DispDESC}, Me.add_generic_dispositionsOperationCompleted, userState)
        End Sub
        
        Private Sub Onadd_generic_dispositionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.add_generic_dispositionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent add_generic_dispositionsCompleted(Me, New add_generic_dispositionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Delete_Generic_Dispositions", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Delete_Generic_Dispositions(ByVal RowID As String) As String
            Dim results() As Object = Me.Invoke("Delete_Generic_Dispositions", New Object() {RowID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Delete_Generic_DispositionsAsync(ByVal RowID As String)
            Me.Delete_Generic_DispositionsAsync(RowID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Delete_Generic_DispositionsAsync(ByVal RowID As String, ByVal userState As Object)
            If (Me.Delete_Generic_DispositionsOperationCompleted Is Nothing) Then
                Me.Delete_Generic_DispositionsOperationCompleted = AddressOf Me.OnDelete_Generic_DispositionsOperationCompleted
            End If
            Me.InvokeAsync("Delete_Generic_Dispositions", New Object() {RowID}, Me.Delete_Generic_DispositionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelete_Generic_DispositionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.Delete_Generic_DispositionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Delete_Generic_DispositionsCompleted(Me, New Delete_Generic_DispositionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_List_Item_Mapping", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_List_Item_Mapping(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_List_Item_Mapping", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_List_Item_MappingAsync(ByVal LoginData As ERPLogin)
            Me.Get_List_Item_MappingAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_List_Item_MappingAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_List_Item_MappingOperationCompleted Is Nothing) Then
                Me.Get_List_Item_MappingOperationCompleted = AddressOf Me.OnGet_List_Item_MappingOperationCompleted
            End If
            Me.InvokeAsync("Get_List_Item_Mapping", New Object() {LoginData}, Me.Get_List_Item_MappingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_List_Item_MappingOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_List_Item_MappingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_List_Item_MappingCompleted(Me, New Get_List_Item_MappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/add_List_Item_Mapping", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function add_List_Item_Mapping(ByVal LoginData As ERPLogin, ByVal Ora_segment1 As String, ByVal Iems_segment1 As String) As String
            Dim results() As Object = Me.Invoke("add_List_Item_Mapping", New Object() {LoginData, Ora_segment1, Iems_segment1})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub add_List_Item_MappingAsync(ByVal LoginData As ERPLogin, ByVal Ora_segment1 As String, ByVal Iems_segment1 As String)
            Me.add_List_Item_MappingAsync(LoginData, Ora_segment1, Iems_segment1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub add_List_Item_MappingAsync(ByVal LoginData As ERPLogin, ByVal Ora_segment1 As String, ByVal Iems_segment1 As String, ByVal userState As Object)
            If (Me.add_List_Item_MappingOperationCompleted Is Nothing) Then
                Me.add_List_Item_MappingOperationCompleted = AddressOf Me.Onadd_List_Item_MappingOperationCompleted
            End If
            Me.InvokeAsync("add_List_Item_Mapping", New Object() {LoginData, Ora_segment1, Iems_segment1}, Me.add_List_Item_MappingOperationCompleted, userState)
        End Sub
        
        Private Sub Onadd_List_Item_MappingOperationCompleted(ByVal arg As Object)
            If (Not (Me.add_List_Item_MappingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent add_List_Item_MappingCompleted(Me, New add_List_Item_MappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Delete_List_Item_Mapping", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Delete_List_Item_Mapping(ByVal RowID As String) As String
            Dim results() As Object = Me.Invoke("Delete_List_Item_Mapping", New Object() {RowID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Delete_List_Item_MappingAsync(ByVal RowID As String)
            Me.Delete_List_Item_MappingAsync(RowID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Delete_List_Item_MappingAsync(ByVal RowID As String, ByVal userState As Object)
            If (Me.Delete_List_Item_MappingOperationCompleted Is Nothing) Then
                Me.Delete_List_Item_MappingOperationCompleted = AddressOf Me.OnDelete_List_Item_MappingOperationCompleted
            End If
            Me.InvokeAsync("Delete_List_Item_Mapping", New Object() {RowID}, Me.Delete_List_Item_MappingOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelete_List_Item_MappingOperationCompleted(ByVal arg As Object)
            If (Not (Me.Delete_List_Item_MappingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Delete_List_Item_MappingCompleted(Me, New Delete_List_Item_MappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LoadCustomReportData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadCustomReportData(ByVal dataType As String, ByVal pannelVisible As Boolean, ByVal checkBox As String, ByVal selectedTable As String, ByVal erpLogin As ERPLogin, ByVal dsInput As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LoadCustomReportData", New Object() {dataType, pannelVisible, checkBox, selectedTable, erpLogin, dsInput})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadCustomReportDataAsync(ByVal dataType As String, ByVal pannelVisible As Boolean, ByVal checkBox As String, ByVal selectedTable As String, ByVal erpLogin As ERPLogin, ByVal dsInput As System.Data.DataSet)
            Me.LoadCustomReportDataAsync(dataType, pannelVisible, checkBox, selectedTable, erpLogin, dsInput, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadCustomReportDataAsync(ByVal dataType As String, ByVal pannelVisible As Boolean, ByVal checkBox As String, ByVal selectedTable As String, ByVal erpLogin As ERPLogin, ByVal dsInput As System.Data.DataSet, ByVal userState As Object)
            If (Me.LoadCustomReportDataOperationCompleted Is Nothing) Then
                Me.LoadCustomReportDataOperationCompleted = AddressOf Me.OnLoadCustomReportDataOperationCompleted
            End If
            Me.InvokeAsync("LoadCustomReportData", New Object() {dataType, pannelVisible, checkBox, selectedTable, erpLogin, dsInput}, Me.LoadCustomReportDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadCustomReportDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadCustomReportDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadCustomReportDataCompleted(Me, New LoadCustomReportDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_item_wastage", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_item_wastage(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_item_wastage", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_item_wastageAsync(ByVal LoginData As ERPLogin)
            Me.Get_item_wastageAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_item_wastageAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_item_wastageOperationCompleted Is Nothing) Then
                Me.Get_item_wastageOperationCompleted = AddressOf Me.OnGet_item_wastageOperationCompleted
            End If
            Me.InvokeAsync("Get_item_wastage", New Object() {LoginData}, Me.Get_item_wastageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_item_wastageOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_item_wastageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_item_wastageCompleted(Me, New Get_item_wastageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Insert_item_wastage", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Insert_item_wastage(ByVal LoginData As ERPLogin, ByVal Itemnum As String, ByVal Wastage As Decimal, ByVal Description As String) As String
            Dim results() As Object = Me.Invoke("Insert_item_wastage", New Object() {LoginData, Itemnum, Wastage, Description})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Insert_item_wastageAsync(ByVal LoginData As ERPLogin, ByVal Itemnum As String, ByVal Wastage As Decimal, ByVal Description As String)
            Me.Insert_item_wastageAsync(LoginData, Itemnum, Wastage, Description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Insert_item_wastageAsync(ByVal LoginData As ERPLogin, ByVal Itemnum As String, ByVal Wastage As Decimal, ByVal Description As String, ByVal userState As Object)
            If (Me.Insert_item_wastageOperationCompleted Is Nothing) Then
                Me.Insert_item_wastageOperationCompleted = AddressOf Me.OnInsert_item_wastageOperationCompleted
            End If
            Me.InvokeAsync("Insert_item_wastage", New Object() {LoginData, Itemnum, Wastage, Description}, Me.Insert_item_wastageOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsert_item_wastageOperationCompleted(ByVal arg As Object)
            If (Not (Me.Insert_item_wastageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Insert_item_wastageCompleted(Me, New Insert_item_wastageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/delete_xxetr_item_wastage", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function delete_xxetr_item_wastage(ByVal RowID As String) As String
            Dim results() As Object = Me.Invoke("delete_xxetr_item_wastage", New Object() {RowID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub delete_xxetr_item_wastageAsync(ByVal RowID As String)
            Me.delete_xxetr_item_wastageAsync(RowID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub delete_xxetr_item_wastageAsync(ByVal RowID As String, ByVal userState As Object)
            If (Me.delete_xxetr_item_wastageOperationCompleted Is Nothing) Then
                Me.delete_xxetr_item_wastageOperationCompleted = AddressOf Me.Ondelete_xxetr_item_wastageOperationCompleted
            End If
            Me.InvokeAsync("delete_xxetr_item_wastage", New Object() {RowID}, Me.delete_xxetr_item_wastageOperationCompleted, userState)
        End Sub
        
        Private Sub Ondelete_xxetr_item_wastageOperationCompleted(ByVal arg As Object)
            If (Not (Me.delete_xxetr_item_wastageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent delete_xxetr_item_wastageCompleted(Me, New delete_xxetr_item_wastageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Update_xxetr_item_wastage", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update_xxetr_item_wastage(ByVal RowID As String, ByVal wastage As Decimal, ByVal description As String) As String
            Dim results() As Object = Me.Invoke("Update_xxetr_item_wastage", New Object() {RowID, wastage, description})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Update_xxetr_item_wastageAsync(ByVal RowID As String, ByVal wastage As Decimal, ByVal description As String)
            Me.Update_xxetr_item_wastageAsync(RowID, wastage, description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Update_xxetr_item_wastageAsync(ByVal RowID As String, ByVal wastage As Decimal, ByVal description As String, ByVal userState As Object)
            If (Me.Update_xxetr_item_wastageOperationCompleted Is Nothing) Then
                Me.Update_xxetr_item_wastageOperationCompleted = AddressOf Me.OnUpdate_xxetr_item_wastageOperationCompleted
            End If
            Me.InvokeAsync("Update_xxetr_item_wastage", New Object() {RowID, wastage, description}, Me.Update_xxetr_item_wastageOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdate_xxetr_item_wastageOperationCompleted(ByVal arg As Object)
            If (Not (Me.Update_xxetr_item_wastageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Update_xxetr_item_wastageCompleted(Me, New Update_xxetr_item_wastageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveTDCRepairCode", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveTDCRepairCode(ByVal RepairCode As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("SaveTDCRepairCode", New Object() {RepairCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveTDCRepairCodeAsync(ByVal RepairCode As System.Data.DataSet)
            Me.SaveTDCRepairCodeAsync(RepairCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveTDCRepairCodeAsync(ByVal RepairCode As System.Data.DataSet, ByVal userState As Object)
            If (Me.SaveTDCRepairCodeOperationCompleted Is Nothing) Then
                Me.SaveTDCRepairCodeOperationCompleted = AddressOf Me.OnSaveTDCRepairCodeOperationCompleted
            End If
            Me.InvokeAsync("SaveTDCRepairCode", New Object() {RepairCode}, Me.SaveTDCRepairCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveTDCRepairCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveTDCRepairCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveTDCRepairCodeCompleted(Me, New SaveTDCRepairCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadRepairCodeForQCcode", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRepairCodeForQCcode(ByVal Category As String, ByVal Site As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRepairCodeForQCcode", New Object() {Category, Site})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRepairCodeForQCcodeAsync(ByVal Category As String, ByVal Site As String)
            Me.ReadRepairCodeForQCcodeAsync(Category, Site, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRepairCodeForQCcodeAsync(ByVal Category As String, ByVal Site As String, ByVal userState As Object)
            If (Me.ReadRepairCodeForQCcodeOperationCompleted Is Nothing) Then
                Me.ReadRepairCodeForQCcodeOperationCompleted = AddressOf Me.OnReadRepairCodeForQCcodeOperationCompleted
            End If
            Me.InvokeAsync("ReadRepairCodeForQCcode", New Object() {Category, Site}, Me.ReadRepairCodeForQCcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRepairCodeForQCcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRepairCodeForQCcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRepairCodeForQCcodeCompleted(Me, New ReadRepairCodeForQCcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IsProductProcess", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsProductProcess(ByVal Process As String) As Boolean
            Dim results() As Object = Me.Invoke("IsProductProcess", New Object() {Process})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsProductProcessAsync(ByVal Process As String)
            Me.IsProductProcessAsync(Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsProductProcessAsync(ByVal Process As String, ByVal userState As Object)
            If (Me.IsProductProcessOperationCompleted Is Nothing) Then
                Me.IsProductProcessOperationCompleted = AddressOf Me.OnIsProductProcessOperationCompleted
            End If
            Me.InvokeAsync("IsProductProcess", New Object() {Process}, Me.IsProductProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsProductProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsProductProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsProductProcessCompleted(Me, New IsProductProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetActiveEvent", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActiveEvent(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetActiveEvent", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActiveEventAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetActiveEventAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActiveEventAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetActiveEventOperationCompleted Is Nothing) Then
                Me.GetActiveEventOperationCompleted = AddressOf Me.OnGetActiveEventOperationCompleted
            End If
            Me.InvokeAsync("GetActiveEvent", New Object() {OracleLoginData}, Me.GetActiveEventOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActiveEventOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActiveEventCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActiveEventCompleted(Me, New GetActiveEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetActiveJob", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActiveJob(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetActiveJob", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActiveJobAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetActiveJobAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActiveJobAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetActiveJobOperationCompleted Is Nothing) Then
                Me.GetActiveJobOperationCompleted = AddressOf Me.OnGetActiveJobOperationCompleted
            End If
            Me.InvokeAsync("GetActiveJob", New Object() {OracleLoginData}, Me.GetActiveJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActiveJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActiveJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActiveJobCompleted(Me, New GetActiveJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetActiveEvent_ActiveJob", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActiveEvent_ActiveJob(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetActiveEvent_ActiveJob", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActiveEvent_ActiveJobAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetActiveEvent_ActiveJobAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActiveEvent_ActiveJobAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetActiveEvent_ActiveJobOperationCompleted Is Nothing) Then
                Me.GetActiveEvent_ActiveJobOperationCompleted = AddressOf Me.OnGetActiveEvent_ActiveJobOperationCompleted
            End If
            Me.InvokeAsync("GetActiveEvent_ActiveJob", New Object() {OracleLoginData}, Me.GetActiveEvent_ActiveJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActiveEvent_ActiveJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActiveEvent_ActiveJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActiveEvent_ActiveJobCompleted(Me, New GetActiveEvent_ActiveJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetActiveEvent_ActiveJob_LD", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActiveEvent_ActiveJob_LD(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetActiveEvent_ActiveJob_LD", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActiveEvent_ActiveJob_LDAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetActiveEvent_ActiveJob_LDAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActiveEvent_ActiveJob_LDAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetActiveEvent_ActiveJob_LDOperationCompleted Is Nothing) Then
                Me.GetActiveEvent_ActiveJob_LDOperationCompleted = AddressOf Me.OnGetActiveEvent_ActiveJob_LDOperationCompleted
            End If
            Me.InvokeAsync("GetActiveEvent_ActiveJob_LD", New Object() {OracleLoginData}, Me.GetActiveEvent_ActiveJob_LDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActiveEvent_ActiveJob_LDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActiveEvent_ActiveJob_LDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActiveEvent_ActiveJob_LDCompleted(Me, New GetActiveEvent_ActiveJob_LDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/EventLightOff", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EventLightOff(ByVal EventID As String, ByVal EventType As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("EventLightOff", New Object() {EventID, EventType, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EventLightOffAsync(ByVal EventID As String, ByVal EventType As String, ByVal OracleLoginData As ERPLogin)
            Me.EventLightOffAsync(EventID, EventType, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EventLightOffAsync(ByVal EventID As String, ByVal EventType As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.EventLightOffOperationCompleted Is Nothing) Then
                Me.EventLightOffOperationCompleted = AddressOf Me.OnEventLightOffOperationCompleted
            End If
            Me.InvokeAsync("EventLightOff", New Object() {EventID, EventType, OracleLoginData}, Me.EventLightOffOperationCompleted, userState)
        End Sub
        
        Private Sub OnEventLightOffOperationCompleted(ByVal arg As Object)
            If (Not (Me.EventLightOffCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EventLightOffCompleted(Me, New EventLightOffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetLocConfig", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLocConfig(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("GetLocConfig", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLocConfigAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetLocConfigAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLocConfigAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetLocConfigOperationCompleted Is Nothing) Then
                Me.GetLocConfigOperationCompleted = AddressOf Me.OnGetLocConfigOperationCompleted
            End If
            Me.InvokeAsync("GetLocConfig", New Object() {OracleLoginData}, Me.GetLocConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLocConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLocConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLocConfigCompleted(Me, New GetLocConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetWMSConfig", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWMSConfig(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWMSConfig", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWMSConfigAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetWMSConfigAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWMSConfigAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetWMSConfigOperationCompleted Is Nothing) Then
                Me.GetWMSConfigOperationCompleted = AddressOf Me.OnGetWMSConfigOperationCompleted
            End If
            Me.InvokeAsync("GetWMSConfig", New Object() {OracleLoginData}, Me.GetWMSConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWMSConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWMSConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWMSConfigCompleted(Me, New GetWMSConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetItemUsage", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemUsage(ByVal Job As String, ByVal PCBA As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemUsage", New Object() {Job, PCBA, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemUsageAsync(ByVal Job As String, ByVal PCBA As String, ByVal OracleLoginData As ERPLogin)
            Me.GetItemUsageAsync(Job, PCBA, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemUsageAsync(ByVal Job As String, ByVal PCBA As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetItemUsageOperationCompleted Is Nothing) Then
                Me.GetItemUsageOperationCompleted = AddressOf Me.OnGetItemUsageOperationCompleted
            End If
            Me.InvokeAsync("GetItemUsage", New Object() {Job, PCBA, OracleLoginData}, Me.GetItemUsageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemUsageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemUsageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemUsageCompleted(Me, New GetItemUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetItemUsage_LD", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemUsage_LD(ByVal Job As String, ByVal PCBA As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemUsage_LD", New Object() {Job, PCBA, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemUsage_LDAsync(ByVal Job As String, ByVal PCBA As String, ByVal OracleLoginData As ERPLogin)
            Me.GetItemUsage_LDAsync(Job, PCBA, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemUsage_LDAsync(ByVal Job As String, ByVal PCBA As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetItemUsage_LDOperationCompleted Is Nothing) Then
                Me.GetItemUsage_LDOperationCompleted = AddressOf Me.OnGetItemUsage_LDOperationCompleted
            End If
            Me.InvokeAsync("GetItemUsage_LD", New Object() {Job, PCBA, OracleLoginData}, Me.GetItemUsage_LDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemUsage_LDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemUsage_LDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemUsage_LDCompleted(Me, New GetItemUsage_LDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WMS_Check_PickedFlag", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMS_Check_PickedFlag(ByVal Job As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WMS_Check_PickedFlag", New Object() {Job, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMS_Check_PickedFlagAsync(ByVal Job As String, ByVal OracleLoginData As ERPLogin)
            Me.WMS_Check_PickedFlagAsync(Job, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMS_Check_PickedFlagAsync(ByVal Job As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WMS_Check_PickedFlagOperationCompleted Is Nothing) Then
                Me.WMS_Check_PickedFlagOperationCompleted = AddressOf Me.OnWMS_Check_PickedFlagOperationCompleted
            End If
            Me.InvokeAsync("WMS_Check_PickedFlag", New Object() {Job, OracleLoginData}, Me.WMS_Check_PickedFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnWMS_Check_PickedFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.WMS_Check_PickedFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMS_Check_PickedFlagCompleted(Me, New WMS_Check_PickedFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_MO_Information", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_MO_Information(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal ProdLine As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String) As MO_Information
            Dim results() As Object = Me.Invoke("Get_MO_Information", New Object() {OracleLoginData, DN, MO, Job, ProdLine, SubInv, Locator, Item, TransType})
            Return CType(results(0),MO_Information)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_MO_InformationAsync(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal ProdLine As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String)
            Me.Get_MO_InformationAsync(OracleLoginData, DN, MO, Job, ProdLine, SubInv, Locator, Item, TransType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_MO_InformationAsync(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal ProdLine As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String, ByVal userState As Object)
            If (Me.Get_MO_InformationOperationCompleted Is Nothing) Then
                Me.Get_MO_InformationOperationCompleted = AddressOf Me.OnGet_MO_InformationOperationCompleted
            End If
            Me.InvokeAsync("Get_MO_Information", New Object() {OracleLoginData, DN, MO, Job, ProdLine, SubInv, Locator, Item, TransType}, Me.Get_MO_InformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_MO_InformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_MO_InformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_MO_InformationCompleted(Me, New Get_MO_InformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_MO_Information_SQL", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_MO_Information_SQL(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal ProdLine As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String) As MO_Information
            Dim results() As Object = Me.Invoke("Get_MO_Information_SQL", New Object() {OracleLoginData, DN, MO, Job, ProdLine, SubInv, Locator, Item, TransType})
            Return CType(results(0),MO_Information)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_MO_Information_SQLAsync(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal ProdLine As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String)
            Me.Get_MO_Information_SQLAsync(OracleLoginData, DN, MO, Job, ProdLine, SubInv, Locator, Item, TransType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_MO_Information_SQLAsync(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal ProdLine As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String, ByVal userState As Object)
            If (Me.Get_MO_Information_SQLOperationCompleted Is Nothing) Then
                Me.Get_MO_Information_SQLOperationCompleted = AddressOf Me.OnGet_MO_Information_SQLOperationCompleted
            End If
            Me.InvokeAsync("Get_MO_Information_SQL", New Object() {OracleLoginData, DN, MO, Job, ProdLine, SubInv, Locator, Item, TransType}, Me.Get_MO_Information_SQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_MO_Information_SQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_MO_Information_SQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_MO_Information_SQLCompleted(Me, New Get_MO_Information_SQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_MO_Information_LD", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_MO_Information_LD(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String) As MO_Information
            Dim results() As Object = Me.Invoke("Get_MO_Information_LD", New Object() {OracleLoginData, DN, MO, Job, SubInv, Locator, Item, TransType})
            Return CType(results(0),MO_Information)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_MO_Information_LDAsync(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String)
            Me.Get_MO_Information_LDAsync(OracleLoginData, DN, MO, Job, SubInv, Locator, Item, TransType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_MO_Information_LDAsync(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String, ByVal userState As Object)
            If (Me.Get_MO_Information_LDOperationCompleted Is Nothing) Then
                Me.Get_MO_Information_LDOperationCompleted = AddressOf Me.OnGet_MO_Information_LDOperationCompleted
            End If
            Me.InvokeAsync("Get_MO_Information_LD", New Object() {OracleLoginData, DN, MO, Job, SubInv, Locator, Item, TransType}, Me.Get_MO_Information_LDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_MO_Information_LDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_MO_Information_LDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_MO_Information_LDCompleted(Me, New Get_MO_Information_LDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_SubinvLoc_for_CS", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_SubinvLoc_for_CS(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_SubinvLoc_for_CS", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_SubinvLoc_for_CSAsync(ByVal OracleLoginData As ERPLogin)
            Me.Get_SubinvLoc_for_CSAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_SubinvLoc_for_CSAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_SubinvLoc_for_CSOperationCompleted Is Nothing) Then
                Me.Get_SubinvLoc_for_CSOperationCompleted = AddressOf Me.OnGet_SubinvLoc_for_CSOperationCompleted
            End If
            Me.InvokeAsync("Get_SubinvLoc_for_CS", New Object() {OracleLoginData}, Me.Get_SubinvLoc_for_CSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_SubinvLoc_for_CSOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_SubinvLoc_for_CSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_SubinvLoc_for_CSCompleted(Me, New Get_SubinvLoc_for_CSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_MO_Information_CS_SQL", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_MO_Information_CS_SQL(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal ProdLine As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String) As MO_Information
            Dim results() As Object = Me.Invoke("Get_MO_Information_CS_SQL", New Object() {OracleLoginData, DN, MO, Job, ProdLine, SubInv, Locator, Item, TransType})
            Return CType(results(0),MO_Information)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_MO_Information_CS_SQLAsync(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal ProdLine As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String)
            Me.Get_MO_Information_CS_SQLAsync(OracleLoginData, DN, MO, Job, ProdLine, SubInv, Locator, Item, TransType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_MO_Information_CS_SQLAsync(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal Job As String, ByVal ProdLine As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal TransType As String, ByVal userState As Object)
            If (Me.Get_MO_Information_CS_SQLOperationCompleted Is Nothing) Then
                Me.Get_MO_Information_CS_SQLOperationCompleted = AddressOf Me.OnGet_MO_Information_CS_SQLOperationCompleted
            End If
            Me.InvokeAsync("Get_MO_Information_CS_SQL", New Object() {OracleLoginData, DN, MO, Job, ProdLine, SubInv, Locator, Item, TransType}, Me.Get_MO_Information_CS_SQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_MO_Information_CS_SQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_MO_Information_CS_SQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_MO_Information_CS_SQLCompleted(Me, New Get_MO_Information_CS_SQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_MO_For_LED", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_MO_For_LED(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String) As MO_List
            Dim results() As Object = Me.Invoke("Get_MO_For_LED", New Object() {OracleLoginData, DN, MO, SubInv, Locator, Item})
            Return CType(results(0),MO_List)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_MO_For_LEDAsync(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String)
            Me.Get_MO_For_LEDAsync(OracleLoginData, DN, MO, SubInv, Locator, Item, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_MO_For_LEDAsync(ByVal OracleLoginData As ERPLogin, ByVal DN As String, ByVal MO As String, ByVal SubInv As String, ByVal Locator As String, ByVal Item As String, ByVal userState As Object)
            If (Me.Get_MO_For_LEDOperationCompleted Is Nothing) Then
                Me.Get_MO_For_LEDOperationCompleted = AddressOf Me.OnGet_MO_For_LEDOperationCompleted
            End If
            Me.InvokeAsync("Get_MO_For_LED", New Object() {OracleLoginData, DN, MO, SubInv, Locator, Item}, Me.Get_MO_For_LEDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_MO_For_LEDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_MO_For_LEDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_MO_For_LEDCompleted(Me, New Get_MO_For_LEDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_RefQty", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_RefQty(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_RefQty", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_RefQtyAsync(ByVal OracleLoginData As ERPLogin)
            Me.Get_RefQtyAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_RefQtyAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_RefQtyOperationCompleted Is Nothing) Then
                Me.Get_RefQtyOperationCompleted = AddressOf Me.OnGet_RefQtyOperationCompleted
            End If
            Me.InvokeAsync("Get_RefQty", New Object() {OracleLoginData}, Me.Get_RefQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_RefQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_RefQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_RefQtyCompleted(Me, New Get_RefQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_JobInform_MO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_JobInform_MO(ByVal OracleLoginData As ERPLogin, ByVal DJ As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_JobInform_MO", New Object() {OracleLoginData, DJ})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_JobInform_MOAsync(ByVal OracleLoginData As ERPLogin, ByVal DJ As String)
            Me.Get_JobInform_MOAsync(OracleLoginData, DJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_JobInform_MOAsync(ByVal OracleLoginData As ERPLogin, ByVal DJ As String, ByVal userState As Object)
            If (Me.Get_JobInform_MOOperationCompleted Is Nothing) Then
                Me.Get_JobInform_MOOperationCompleted = AddressOf Me.OnGet_JobInform_MOOperationCompleted
            End If
            Me.InvokeAsync("Get_JobInform_MO", New Object() {OracleLoginData, DJ}, Me.Get_JobInform_MOOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_JobInform_MOOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_JobInform_MOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_JobInform_MOCompleted(Me, New Get_JobInform_MOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WMS_CheckSlotShortage", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMS_CheckSlotShortage(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin) As SlotShortageList
            Dim results() As Object = Me.Invoke("WMS_CheckSlotShortage", New Object() {dsMOList, Subinv, Locator, OracleLoginData})
            Return CType(results(0),SlotShortageList)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMS_CheckSlotShortageAsync(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin)
            Me.WMS_CheckSlotShortageAsync(dsMOList, Subinv, Locator, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMS_CheckSlotShortageAsync(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WMS_CheckSlotShortageOperationCompleted Is Nothing) Then
                Me.WMS_CheckSlotShortageOperationCompleted = AddressOf Me.OnWMS_CheckSlotShortageOperationCompleted
            End If
            Me.InvokeAsync("WMS_CheckSlotShortage", New Object() {dsMOList, Subinv, Locator, OracleLoginData}, Me.WMS_CheckSlotShortageOperationCompleted, userState)
        End Sub
        
        Private Sub OnWMS_CheckSlotShortageOperationCompleted(ByVal arg As Object)
            If (Not (Me.WMS_CheckSlotShortageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMS_CheckSlotShortageCompleted(Me, New WMS_CheckSlotShortageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WMS_CheckSlotAvl", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMS_CheckSlotAvl(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin) As SlotShortageList
            Dim results() As Object = Me.Invoke("WMS_CheckSlotAvl", New Object() {dsMOList, Subinv, Locator, OracleLoginData})
            Return CType(results(0),SlotShortageList)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMS_CheckSlotAvlAsync(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin)
            Me.WMS_CheckSlotAvlAsync(dsMOList, Subinv, Locator, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMS_CheckSlotAvlAsync(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WMS_CheckSlotAvlOperationCompleted Is Nothing) Then
                Me.WMS_CheckSlotAvlOperationCompleted = AddressOf Me.OnWMS_CheckSlotAvlOperationCompleted
            End If
            Me.InvokeAsync("WMS_CheckSlotAvl", New Object() {dsMOList, Subinv, Locator, OracleLoginData}, Me.WMS_CheckSlotAvlOperationCompleted, userState)
        End Sub
        
        Private Sub OnWMS_CheckSlotAvlOperationCompleted(ByVal arg As Object)
            If (Not (Me.WMS_CheckSlotAvlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMS_CheckSlotAvlCompleted(Me, New WMS_CheckSlotAvlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetAllCLIDInfo_LED", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllCLIDInfo_LED(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAllCLIDInfo_LED", New Object() {dsMOList, Subinv, Locator, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllCLIDInfo_LEDAsync(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin)
            Me.GetAllCLIDInfo_LEDAsync(dsMOList, Subinv, Locator, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllCLIDInfo_LEDAsync(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetAllCLIDInfo_LEDOperationCompleted Is Nothing) Then
                Me.GetAllCLIDInfo_LEDOperationCompleted = AddressOf Me.OnGetAllCLIDInfo_LEDOperationCompleted
            End If
            Me.InvokeAsync("GetAllCLIDInfo_LED", New Object() {dsMOList, Subinv, Locator, OracleLoginData}, Me.GetAllCLIDInfo_LEDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllCLIDInfo_LEDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllCLIDInfo_LEDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllCLIDInfo_LEDCompleted(Me, New GetAllCLIDInfo_LEDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMatMPQ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMatMPQ(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMatMPQ", New Object() {dsMOList, Subinv, Locator, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMatMPQAsync(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin)
            Me.GetMatMPQAsync(dsMOList, Subinv, Locator, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMatMPQAsync(ByVal dsMOList As System.Data.DataSet, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetMatMPQOperationCompleted Is Nothing) Then
                Me.GetMatMPQOperationCompleted = AddressOf Me.OnGetMatMPQOperationCompleted
            End If
            Me.InvokeAsync("GetMatMPQ", New Object() {dsMOList, Subinv, Locator, OracleLoginData}, Me.GetMatMPQOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMatMPQOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMatMPQCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMatMPQCompleted(Me, New GetMatMPQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCLIDInfo_LED", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCLIDInfo_LED(ByVal Component As String, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCLIDInfo_LED", New Object() {Component, Subinv, Locator, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCLIDInfo_LEDAsync(ByVal Component As String, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin)
            Me.GetCLIDInfo_LEDAsync(Component, Subinv, Locator, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCLIDInfo_LEDAsync(ByVal Component As String, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetCLIDInfo_LEDOperationCompleted Is Nothing) Then
                Me.GetCLIDInfo_LEDOperationCompleted = AddressOf Me.OnGetCLIDInfo_LEDOperationCompleted
            End If
            Me.InvokeAsync("GetCLIDInfo_LED", New Object() {Component, Subinv, Locator, OracleLoginData}, Me.GetCLIDInfo_LEDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCLIDInfo_LEDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCLIDInfo_LEDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCLIDInfo_LEDCompleted(Me, New GetCLIDInfo_LEDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCLIDInfo_LED_ByID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCLIDInfo_LED_ByID(ByVal CLIDList As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCLIDInfo_LED_ByID", New Object() {CLIDList, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCLIDInfo_LED_ByIDAsync(ByVal CLIDList As String, ByVal OracleLoginData As ERPLogin)
            Me.GetCLIDInfo_LED_ByIDAsync(CLIDList, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCLIDInfo_LED_ByIDAsync(ByVal CLIDList As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetCLIDInfo_LED_ByIDOperationCompleted Is Nothing) Then
                Me.GetCLIDInfo_LED_ByIDOperationCompleted = AddressOf Me.OnGetCLIDInfo_LED_ByIDOperationCompleted
            End If
            Me.InvokeAsync("GetCLIDInfo_LED_ByID", New Object() {CLIDList, OracleLoginData}, Me.GetCLIDInfo_LED_ByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCLIDInfo_LED_ByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCLIDInfo_LED_ByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCLIDInfo_LED_ByIDCompleted(Me, New GetCLIDInfo_LED_ByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCLIDInfo_RTLot", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCLIDInfo_RTLot(ByVal Component As String, ByVal RTLot As String, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCLIDInfo_RTLot", New Object() {Component, RTLot, Subinv, Locator, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCLIDInfo_RTLotAsync(ByVal Component As String, ByVal RTLot As String, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin)
            Me.GetCLIDInfo_RTLotAsync(Component, RTLot, Subinv, Locator, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCLIDInfo_RTLotAsync(ByVal Component As String, ByVal RTLot As String, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetCLIDInfo_RTLotOperationCompleted Is Nothing) Then
                Me.GetCLIDInfo_RTLotOperationCompleted = AddressOf Me.OnGetCLIDInfo_RTLotOperationCompleted
            End If
            Me.InvokeAsync("GetCLIDInfo_RTLot", New Object() {Component, RTLot, Subinv, Locator, OracleLoginData}, Me.GetCLIDInfo_RTLotOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCLIDInfo_RTLotOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCLIDInfo_RTLotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCLIDInfo_RTLotCompleted(Me, New GetCLIDInfo_RTLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCLIDCombination", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCLIDCombination(ByVal srcCLIDs As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCLIDCombination", New Object() {srcCLIDs, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCLIDCombinationAsync(ByVal srcCLIDs As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.GetCLIDCombinationAsync(srcCLIDs, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCLIDCombinationAsync(ByVal srcCLIDs As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetCLIDCombinationOperationCompleted Is Nothing) Then
                Me.GetCLIDCombinationOperationCompleted = AddressOf Me.OnGetCLIDCombinationOperationCompleted
            End If
            Me.InvokeAsync("GetCLIDCombination", New Object() {srcCLIDs, OracleLoginData}, Me.GetCLIDCombinationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCLIDCombinationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCLIDCombinationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCLIDCombinationCompleted(Me, New GetCLIDCombinationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WMS_Save_Table", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMS_Save_Table(ByVal dsCLID As System.Data.DataSet, ByVal dsItem As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("WMS_Save_Table", New Object() {dsCLID, dsItem, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMS_Save_TableAsync(ByVal dsCLID As System.Data.DataSet, ByVal dsItem As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.WMS_Save_TableAsync(dsCLID, dsItem, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMS_Save_TableAsync(ByVal dsCLID As System.Data.DataSet, ByVal dsItem As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WMS_Save_TableOperationCompleted Is Nothing) Then
                Me.WMS_Save_TableOperationCompleted = AddressOf Me.OnWMS_Save_TableOperationCompleted
            End If
            Me.InvokeAsync("WMS_Save_Table", New Object() {dsCLID, dsItem, OracleLoginData}, Me.WMS_Save_TableOperationCompleted, userState)
        End Sub
        
        Private Sub OnWMS_Save_TableOperationCompleted(ByVal arg As Object)
            If (Not (Me.WMS_Save_TableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMS_Save_TableCompleted(Me, New WMS_Save_TableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WMS_Save_Table2", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMS_Save_Table2(ByVal dsOracle As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("WMS_Save_Table2", New Object() {dsOracle, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMS_Save_Table2Async(ByVal dsOracle As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.WMS_Save_Table2Async(dsOracle, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMS_Save_Table2Async(ByVal dsOracle As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WMS_Save_Table2OperationCompleted Is Nothing) Then
                Me.WMS_Save_Table2OperationCompleted = AddressOf Me.OnWMS_Save_Table2OperationCompleted
            End If
            Me.InvokeAsync("WMS_Save_Table2", New Object() {dsOracle, OracleLoginData}, Me.WMS_Save_Table2OperationCompleted, userState)
        End Sub
        
        Private Sub OnWMS_Save_Table2OperationCompleted(ByVal arg As Object)
            If (Not (Me.WMS_Save_Table2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMS_Save_Table2Completed(Me, New WMS_Save_Table2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WMS_Save_Table3", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMS_Save_Table3(ByVal dsComb As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("WMS_Save_Table3", New Object() {dsComb, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMS_Save_Table3Async(ByVal dsComb As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.WMS_Save_Table3Async(dsComb, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMS_Save_Table3Async(ByVal dsComb As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WMS_Save_Table3OperationCompleted Is Nothing) Then
                Me.WMS_Save_Table3OperationCompleted = AddressOf Me.OnWMS_Save_Table3OperationCompleted
            End If
            Me.InvokeAsync("WMS_Save_Table3", New Object() {dsComb, OracleLoginData}, Me.WMS_Save_Table3OperationCompleted, userState)
        End Sub
        
        Private Sub OnWMS_Save_Table3OperationCompleted(ByVal arg As Object)
            If (Not (Me.WMS_Save_Table3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMS_Save_Table3Completed(Me, New WMS_Save_Table3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WMS_Post_MO_Allocation", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMS_Post_MO_Allocation(ByVal dsMOList As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WMS_Post_MO_Allocation", New Object() {dsMOList, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMS_Post_MO_AllocationAsync(ByVal dsMOList As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.WMS_Post_MO_AllocationAsync(dsMOList, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMS_Post_MO_AllocationAsync(ByVal dsMOList As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WMS_Post_MO_AllocationOperationCompleted Is Nothing) Then
                Me.WMS_Post_MO_AllocationOperationCompleted = AddressOf Me.OnWMS_Post_MO_AllocationOperationCompleted
            End If
            Me.InvokeAsync("WMS_Post_MO_Allocation", New Object() {dsMOList, OracleLoginData}, Me.WMS_Post_MO_AllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnWMS_Post_MO_AllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.WMS_Post_MO_AllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMS_Post_MO_AllocationCompleted(Me, New WMS_Post_MO_AllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WMS_Save_Allocation", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMS_Save_Allocation(ByVal dsHeader As System.Data.DataSet, ByVal dsItem As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("WMS_Save_Allocation", New Object() {dsHeader, dsItem, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMS_Save_AllocationAsync(ByVal dsHeader As System.Data.DataSet, ByVal dsItem As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.WMS_Save_AllocationAsync(dsHeader, dsItem, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMS_Save_AllocationAsync(ByVal dsHeader As System.Data.DataSet, ByVal dsItem As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WMS_Save_AllocationOperationCompleted Is Nothing) Then
                Me.WMS_Save_AllocationOperationCompleted = AddressOf Me.OnWMS_Save_AllocationOperationCompleted
            End If
            Me.InvokeAsync("WMS_Save_Allocation", New Object() {dsHeader, dsItem, OracleLoginData}, Me.WMS_Save_AllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnWMS_Save_AllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.WMS_Save_AllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMS_Save_AllocationCompleted(Me, New WMS_Save_AllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCycleCountData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCycleCountData(ByVal cc_name As String, ByVal seq As Integer, ByVal OracleLoginData As ERPLogin) As GetCycleCount
            Dim results() As Object = Me.Invoke("GetCycleCountData", New Object() {cc_name, seq, OracleLoginData})
            Return CType(results(0),GetCycleCount)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCycleCountDataAsync(ByVal cc_name As String, ByVal seq As Integer, ByVal OracleLoginData As ERPLogin)
            Me.GetCycleCountDataAsync(cc_name, seq, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCycleCountDataAsync(ByVal cc_name As String, ByVal seq As Integer, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetCycleCountDataOperationCompleted Is Nothing) Then
                Me.GetCycleCountDataOperationCompleted = AddressOf Me.OnGetCycleCountDataOperationCompleted
            End If
            Me.InvokeAsync("GetCycleCountData", New Object() {cc_name, seq, OracleLoginData}, Me.GetCycleCountDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCycleCountDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCycleCountDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCycleCountDataCompleted(Me, New GetCycleCountDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCycleCountList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCycleCountList(ByVal cc_name As String, ByVal OracleLoginData As ERPLogin) As GetCycleCount
            Dim results() As Object = Me.Invoke("GetCycleCountList", New Object() {cc_name, OracleLoginData})
            Return CType(results(0),GetCycleCount)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCycleCountListAsync(ByVal cc_name As String, ByVal OracleLoginData As ERPLogin)
            Me.GetCycleCountListAsync(cc_name, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCycleCountListAsync(ByVal cc_name As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetCycleCountListOperationCompleted Is Nothing) Then
                Me.GetCycleCountListOperationCompleted = AddressOf Me.OnGetCycleCountListOperationCompleted
            End If
            Me.InvokeAsync("GetCycleCountList", New Object() {cc_name, OracleLoginData}, Me.GetCycleCountListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCycleCountListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCycleCountListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCycleCountListCompleted(Me, New GetCycleCountListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostCycleCountAllocation", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostCycleCountAllocation(ByVal dsCC As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("PostCycleCountAllocation", New Object() {dsCC, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostCycleCountAllocationAsync(ByVal dsCC As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.PostCycleCountAllocationAsync(dsCC, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostCycleCountAllocationAsync(ByVal dsCC As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.PostCycleCountAllocationOperationCompleted Is Nothing) Then
                Me.PostCycleCountAllocationOperationCompleted = AddressOf Me.OnPostCycleCountAllocationOperationCompleted
            End If
            Me.InvokeAsync("PostCycleCountAllocation", New Object() {dsCC, OracleLoginData}, Me.PostCycleCountAllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostCycleCountAllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostCycleCountAllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostCycleCountAllocationCompleted(Me, New PostCycleCountAllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostOccupiedAllocation", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostOccupiedAllocation(ByVal Rack As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("PostOccupiedAllocation", New Object() {Rack, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostOccupiedAllocationAsync(ByVal Rack As String, ByVal OracleLoginData As ERPLogin)
            Me.PostOccupiedAllocationAsync(Rack, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostOccupiedAllocationAsync(ByVal Rack As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.PostOccupiedAllocationOperationCompleted Is Nothing) Then
                Me.PostOccupiedAllocationOperationCompleted = AddressOf Me.OnPostOccupiedAllocationOperationCompleted
            End If
            Me.InvokeAsync("PostOccupiedAllocation", New Object() {Rack, OracleLoginData}, Me.PostOccupiedAllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostOccupiedAllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostOccupiedAllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostOccupiedAllocationCompleted(Me, New PostOccupiedAllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostEmptyAllocation", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostEmptyAllocation(ByVal Rack As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("PostEmptyAllocation", New Object() {Rack, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostEmptyAllocationAsync(ByVal Rack As String, ByVal OracleLoginData As ERPLogin)
            Me.PostEmptyAllocationAsync(Rack, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostEmptyAllocationAsync(ByVal Rack As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.PostEmptyAllocationOperationCompleted Is Nothing) Then
                Me.PostEmptyAllocationOperationCompleted = AddressOf Me.OnPostEmptyAllocationOperationCompleted
            End If
            Me.InvokeAsync("PostEmptyAllocation", New Object() {Rack, OracleLoginData}, Me.PostEmptyAllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostEmptyAllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostEmptyAllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostEmptyAllocationCompleted(Me, New PostEmptyAllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostConditionalAllocation", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostConditionalAllocation(ByVal Item As String, ByVal CLID As String, ByVal Rack As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("PostConditionalAllocation", New Object() {Item, CLID, Rack, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostConditionalAllocationAsync(ByVal Item As String, ByVal CLID As String, ByVal Rack As String, ByVal OracleLoginData As ERPLogin)
            Me.PostConditionalAllocationAsync(Item, CLID, Rack, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostConditionalAllocationAsync(ByVal Item As String, ByVal CLID As String, ByVal Rack As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.PostConditionalAllocationOperationCompleted Is Nothing) Then
                Me.PostConditionalAllocationOperationCompleted = AddressOf Me.OnPostConditionalAllocationOperationCompleted
            End If
            Me.InvokeAsync("PostConditionalAllocation", New Object() {Item, CLID, Rack, OracleLoginData}, Me.PostConditionalAllocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostConditionalAllocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostConditionalAllocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostConditionalAllocationCompleted(Me, New PostConditionalAllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateCLIDMissing", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCLIDMissing(ByVal EventID As String, ByVal CLID As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("UpdateCLIDMissing", New Object() {EventID, CLID, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCLIDMissingAsync(ByVal EventID As String, ByVal CLID As String, ByVal OracleLoginData As ERPLogin)
            Me.UpdateCLIDMissingAsync(EventID, CLID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCLIDMissingAsync(ByVal EventID As String, ByVal CLID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.UpdateCLIDMissingOperationCompleted Is Nothing) Then
                Me.UpdateCLIDMissingOperationCompleted = AddressOf Me.OnUpdateCLIDMissingOperationCompleted
            End If
            Me.InvokeAsync("UpdateCLIDMissing", New Object() {EventID, CLID, OracleLoginData}, Me.UpdateCLIDMissingOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCLIDMissingOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCLIDMissingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCLIDMissingCompleted(Me, New UpdateCLIDMissingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WMS_Check_EventID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMS_Check_EventID(ByVal EventID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WMS_Check_EventID", New Object() {EventID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMS_Check_EventIDAsync(ByVal EventID As String, ByVal OracleLoginData As ERPLogin)
            Me.WMS_Check_EventIDAsync(EventID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMS_Check_EventIDAsync(ByVal EventID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WMS_Check_EventIDOperationCompleted Is Nothing) Then
                Me.WMS_Check_EventIDOperationCompleted = AddressOf Me.OnWMS_Check_EventIDOperationCompleted
            End If
            Me.InvokeAsync("WMS_Check_EventID", New Object() {EventID, OracleLoginData}, Me.WMS_Check_EventIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnWMS_Check_EventIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.WMS_Check_EventIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMS_Check_EventIDCompleted(Me, New WMS_Check_EventIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WMS_Check_Rack", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMS_Check_Rack(ByVal Rack As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WMS_Check_Rack", New Object() {Rack, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMS_Check_RackAsync(ByVal Rack As String, ByVal OracleLoginData As ERPLogin)
            Me.WMS_Check_RackAsync(Rack, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMS_Check_RackAsync(ByVal Rack As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WMS_Check_RackOperationCompleted Is Nothing) Then
                Me.WMS_Check_RackOperationCompleted = AddressOf Me.OnWMS_Check_RackOperationCompleted
            End If
            Me.InvokeAsync("WMS_Check_Rack", New Object() {Rack, OracleLoginData}, Me.WMS_Check_RackOperationCompleted, userState)
        End Sub
        
        Private Sub OnWMS_Check_RackOperationCompleted(ByVal arg As Object)
            If (Not (Me.WMS_Check_RackCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMS_Check_RackCompleted(Me, New WMS_Check_RackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IsAuthorizedPCB", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsAuthorizedPCB(ByVal model As String, ByVal pcb As String, ByVal userName As String) As String
            Dim results() As Object = Me.Invoke("IsAuthorizedPCB", New Object() {model, pcb, userName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsAuthorizedPCBAsync(ByVal model As String, ByVal pcb As String, ByVal userName As String)
            Me.IsAuthorizedPCBAsync(model, pcb, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsAuthorizedPCBAsync(ByVal model As String, ByVal pcb As String, ByVal userName As String, ByVal userState As Object)
            If (Me.IsAuthorizedPCBOperationCompleted Is Nothing) Then
                Me.IsAuthorizedPCBOperationCompleted = AddressOf Me.OnIsAuthorizedPCBOperationCompleted
            End If
            Me.InvokeAsync("IsAuthorizedPCB", New Object() {model, pcb, userName}, Me.IsAuthorizedPCBOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsAuthorizedPCBOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsAuthorizedPCBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsAuthorizedPCBCompleted(Me, New IsAuthorizedPCBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateKanbanLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateKanbanLabel(ByVal userName As String, ByVal kbCode As String, ByVal subType As String, ByVal qty As Double) As String
            Dim results() As Object = Me.Invoke("UpdateKanbanLabel", New Object() {userName, kbCode, subType, qty})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateKanbanLabelAsync(ByVal userName As String, ByVal kbCode As String, ByVal subType As String, ByVal qty As Double)
            Me.UpdateKanbanLabelAsync(userName, kbCode, subType, qty, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateKanbanLabelAsync(ByVal userName As String, ByVal kbCode As String, ByVal subType As String, ByVal qty As Double, ByVal userState As Object)
            If (Me.UpdateKanbanLabelOperationCompleted Is Nothing) Then
                Me.UpdateKanbanLabelOperationCompleted = AddressOf Me.OnUpdateKanbanLabelOperationCompleted
            End If
            Me.InvokeAsync("UpdateKanbanLabel", New Object() {userName, kbCode, subType, qty}, Me.UpdateKanbanLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateKanbanLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateKanbanLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateKanbanLabelCompleted(Me, New UpdateKanbanLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ErrorLoggingOTO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ErrorLoggingOTO(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ErrorLoggingOTO", New Object() {ModuleName, User, ErrMsg})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ErrorLoggingOTOAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String)
            Me.ErrorLoggingOTOAsync(ModuleName, User, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ErrorLoggingOTOAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ErrorLoggingOTOOperationCompleted Is Nothing) Then
                Me.ErrorLoggingOTOOperationCompleted = AddressOf Me.OnErrorLoggingOTOOperationCompleted
            End If
            Me.InvokeAsync("ErrorLoggingOTO", New Object() {ModuleName, User, ErrMsg}, Me.ErrorLoggingOTOOperationCompleted, userState)
        End Sub
        
        Private Sub OnErrorLoggingOTOOperationCompleted(ByVal arg As Object)
            If (Not (Me.ErrorLoggingOTOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ErrorLoggingOTOCompleted(Me, New ErrorLoggingOTOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/EmployeeIDLoginOTO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EmployeeIDLoginOTO(ByVal EmployeeID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("EmployeeIDLoginOTO", New Object() {EmployeeID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EmployeeIDLoginOTOAsync(ByVal EmployeeID As String)
            Me.EmployeeIDLoginOTOAsync(EmployeeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EmployeeIDLoginOTOAsync(ByVal EmployeeID As String, ByVal userState As Object)
            If (Me.EmployeeIDLoginOTOOperationCompleted Is Nothing) Then
                Me.EmployeeIDLoginOTOOperationCompleted = AddressOf Me.OnEmployeeIDLoginOTOOperationCompleted
            End If
            Me.InvokeAsync("EmployeeIDLoginOTO", New Object() {EmployeeID}, Me.EmployeeIDLoginOTOOperationCompleted, userState)
        End Sub
        
        Private Sub OnEmployeeIDLoginOTOOperationCompleted(ByVal arg As Object)
            If (Not (Me.EmployeeIDLoginOTOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EmployeeIDLoginOTOCompleted(Me, New EmployeeIDLoginOTOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadRepairCode", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRepairCode() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRepairCode", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRepairCodeAsync()
            Me.ReadRepairCodeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRepairCodeAsync(ByVal userState As Object)
            If (Me.ReadRepairCodeOperationCompleted Is Nothing) Then
                Me.ReadRepairCodeOperationCompleted = AddressOf Me.OnReadRepairCodeOperationCompleted
            End If
            Me.InvokeAsync("ReadRepairCode", New Object(-1) {}, Me.ReadRepairCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRepairCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRepairCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRepairCodeCompleted(Me, New ReadRepairCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadRepCodesByCategory", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRepCodesByCategory(ByVal Category As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRepCodesByCategory", New Object() {Category})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRepCodesByCategoryAsync(ByVal Category As String)
            Me.ReadRepCodesByCategoryAsync(Category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRepCodesByCategoryAsync(ByVal Category As String, ByVal userState As Object)
            If (Me.ReadRepCodesByCategoryOperationCompleted Is Nothing) Then
                Me.ReadRepCodesByCategoryOperationCompleted = AddressOf Me.OnReadRepCodesByCategoryOperationCompleted
            End If
            Me.InvokeAsync("ReadRepCodesByCategory", New Object() {Category}, Me.ReadRepCodesByCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRepCodesByCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRepCodesByCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRepCodesByCategoryCompleted(Me, New ReadRepCodesByCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadRepDefectCodeByCategory", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRepDefectCodeByCategory(ByVal Category As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRepDefectCodeByCategory", New Object() {Category})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRepDefectCodeByCategoryAsync(ByVal Category As String)
            Me.ReadRepDefectCodeByCategoryAsync(Category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRepDefectCodeByCategoryAsync(ByVal Category As String, ByVal userState As Object)
            If (Me.ReadRepDefectCodeByCategoryOperationCompleted Is Nothing) Then
                Me.ReadRepDefectCodeByCategoryOperationCompleted = AddressOf Me.OnReadRepDefectCodeByCategoryOperationCompleted
            End If
            Me.InvokeAsync("ReadRepDefectCodeByCategory", New Object() {Category}, Me.ReadRepDefectCodeByCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRepDefectCodeByCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRepDefectCodeByCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRepDefectCodeByCategoryCompleted(Me, New ReadRepDefectCodeByCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadRepCodeGropByDefect", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRepCodeGropByDefect(ByVal DefectCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRepCodeGropByDefect", New Object() {DefectCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRepCodeGropByDefectAsync(ByVal DefectCode As String)
            Me.ReadRepCodeGropByDefectAsync(DefectCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRepCodeGropByDefectAsync(ByVal DefectCode As String, ByVal userState As Object)
            If (Me.ReadRepCodeGropByDefectOperationCompleted Is Nothing) Then
                Me.ReadRepCodeGropByDefectOperationCompleted = AddressOf Me.OnReadRepCodeGropByDefectOperationCompleted
            End If
            Me.InvokeAsync("ReadRepCodeGropByDefect", New Object() {DefectCode}, Me.ReadRepCodeGropByDefectOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRepCodeGropByDefectOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRepCodeGropByDefectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRepCodeGropByDefectCompleted(Me, New ReadRepCodeGropByDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadRepDefectCodeByCause", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRepDefectCodeByCause(ByVal Cause As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRepDefectCodeByCause", New Object() {Cause})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRepDefectCodeByCauseAsync(ByVal Cause As String)
            Me.ReadRepDefectCodeByCauseAsync(Cause, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRepDefectCodeByCauseAsync(ByVal Cause As String, ByVal userState As Object)
            If (Me.ReadRepDefectCodeByCauseOperationCompleted Is Nothing) Then
                Me.ReadRepDefectCodeByCauseOperationCompleted = AddressOf Me.OnReadRepDefectCodeByCauseOperationCompleted
            End If
            Me.InvokeAsync("ReadRepDefectCodeByCause", New Object() {Cause}, Me.ReadRepDefectCodeByCauseOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRepDefectCodeByCauseOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRepDefectCodeByCauseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRepDefectCodeByCauseCompleted(Me, New ReadRepDefectCodeByCauseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadRepairData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRepairData(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRepairData", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRepairDataAsync(ByVal IntSN As String)
            Me.ReadRepairDataAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRepairDataAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.ReadRepairDataOperationCompleted Is Nothing) Then
                Me.ReadRepairDataOperationCompleted = AddressOf Me.OnReadRepairDataOperationCompleted
            End If
            Me.InvokeAsync("ReadRepairData", New Object() {IntSN}, Me.ReadRepairDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRepairDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRepairDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRepairDataCompleted(Me, New ReadRepairDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadFailData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadFailData(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadFailData", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadFailDataAsync(ByVal IntSN As String)
            Me.ReadFailDataAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadFailDataAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.ReadFailDataOperationCompleted Is Nothing) Then
                Me.ReadFailDataOperationCompleted = AddressOf Me.OnReadFailDataOperationCompleted
            End If
            Me.InvokeAsync("ReadFailData", New Object() {IntSN}, Me.ReadFailDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadFailDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadFailDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadFailDataCompleted(Me, New ReadFailDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCLIDData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCLIDData(ByVal CLID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCLIDData", New Object() {CLID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCLIDDataAsync(ByVal CLID As String)
            Me.GetCLIDDataAsync(CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCLIDDataAsync(ByVal CLID As String, ByVal userState As Object)
            If (Me.GetCLIDDataOperationCompleted Is Nothing) Then
                Me.GetCLIDDataOperationCompleted = AddressOf Me.OnGetCLIDDataOperationCompleted
            End If
            Me.InvokeAsync("GetCLIDData", New Object() {CLID}, Me.GetCLIDDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCLIDDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCLIDDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCLIDDataCompleted(Me, New GetCLIDDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckOTO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckOTO(ByVal SN As String, ByVal Type As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckOTO", New Object() {SN, Type})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckOTOAsync(ByVal SN As String, ByVal Type As String)
            Me.CheckOTOAsync(SN, Type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckOTOAsync(ByVal SN As String, ByVal Type As String, ByVal userState As Object)
            If (Me.CheckOTOOperationCompleted Is Nothing) Then
                Me.CheckOTOOperationCompleted = AddressOf Me.OnCheckOTOOperationCompleted
            End If
            Me.InvokeAsync("CheckOTO", New Object() {SN, Type}, Me.CheckOTOOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckOTOOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckOTOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckOTOCompleted(Me, New CheckOTOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveRepairDetailData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveRepairDetailData(ByVal RepData As System.Data.DataSet, ByVal OTO As Boolean, ByVal IntSN As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveRepairDetailData", New Object() {RepData, OTO, IntSN})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveRepairDetailDataAsync(ByVal RepData As System.Data.DataSet, ByVal OTO As Boolean, ByVal IntSN As String)
            Me.SaveRepairDetailDataAsync(RepData, OTO, IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveRepairDetailDataAsync(ByVal RepData As System.Data.DataSet, ByVal OTO As Boolean, ByVal IntSN As String, ByVal userState As Object)
            If (Me.SaveRepairDetailDataOperationCompleted Is Nothing) Then
                Me.SaveRepairDetailDataOperationCompleted = AddressOf Me.OnSaveRepairDetailDataOperationCompleted
            End If
            Me.InvokeAsync("SaveRepairDetailData", New Object() {RepData, OTO, IntSN}, Me.SaveRepairDetailDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveRepairDetailDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveRepairDetailDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveRepairDetailDataCompleted(Me, New SaveRepairDetailDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadStructure", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadStructure(ByVal Model As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadStructure", New Object() {Model})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadStructureAsync(ByVal Model As String)
            Me.ReadStructureAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadStructureAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.ReadStructureOperationCompleted Is Nothing) Then
                Me.ReadStructureOperationCompleted = AddressOf Me.OnReadStructureOperationCompleted
            End If
            Me.InvokeAsync("ReadStructure", New Object() {Model}, Me.ReadStructureOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadStructureOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadStructureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadStructureCompleted(Me, New ReadStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadConfig", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadConfig(ByVal ConfigID As String) As Boolean
            Dim results() As Object = Me.Invoke("ReadConfig", New Object() {ConfigID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadConfigAsync(ByVal ConfigID As String)
            Me.ReadConfigAsync(ConfigID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadConfigAsync(ByVal ConfigID As String, ByVal userState As Object)
            If (Me.ReadConfigOperationCompleted Is Nothing) Then
                Me.ReadConfigOperationCompleted = AddressOf Me.OnReadConfigOperationCompleted
            End If
            Me.InvokeAsync("ReadConfig", New Object() {ConfigID}, Me.ReadConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadConfigCompleted(Me, New ReadConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/StandardTime", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StandardTime() As String
            Dim results() As Object = Me.Invoke("StandardTime", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StandardTimeAsync()
            Me.StandardTimeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StandardTimeAsync(ByVal userState As Object)
            If (Me.StandardTimeOperationCompleted Is Nothing) Then
                Me.StandardTimeOperationCompleted = AddressOf Me.OnStandardTimeOperationCompleted
            End If
            Me.InvokeAsync("StandardTime", New Object(-1) {}, Me.StandardTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnStandardTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.StandardTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StandardTimeCompleted(Me, New StandardTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ServerTime", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ServerTime() As Date
            Dim results() As Object = Me.Invoke("ServerTime", New Object(-1) {})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ServerTimeAsync()
            Me.ServerTimeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ServerTimeAsync(ByVal userState As Object)
            If (Me.ServerTimeOperationCompleted Is Nothing) Then
                Me.ServerTimeOperationCompleted = AddressOf Me.OnServerTimeOperationCompleted
            End If
            Me.InvokeAsync("ServerTime", New Object(-1) {}, Me.ServerTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnServerTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ServerTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ServerTimeCompleted(Me, New ServerTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadWIPFlow", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadWIPFlow(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadWIPFlow", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadWIPFlowAsync(ByVal IntSN As String)
            Me.ReadWIPFlowAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadWIPFlowAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.ReadWIPFlowOperationCompleted Is Nothing) Then
                Me.ReadWIPFlowOperationCompleted = AddressOf Me.OnReadWIPFlowOperationCompleted
            End If
            Me.InvokeAsync("ReadWIPFlow", New Object() {IntSN}, Me.ReadWIPFlowOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadWIPFlowOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadWIPFlowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadWIPFlowCompleted(Me, New ReadWIPFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RepScrap", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RepScrap(ByVal IntSN As String) As Boolean
            Dim results() As Object = Me.Invoke("RepScrap", New Object() {IntSN})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RepScrapAsync(ByVal IntSN As String)
            Me.RepScrapAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RepScrapAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.RepScrapOperationCompleted Is Nothing) Then
                Me.RepScrapOperationCompleted = AddressOf Me.OnRepScrapOperationCompleted
            End If
            Me.InvokeAsync("RepScrap", New Object() {IntSN}, Me.RepScrapOperationCompleted, userState)
        End Sub
        
        Private Sub OnRepScrapOperationCompleted(ByVal arg As Object)
            If (Not (Me.RepScrapCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RepScrapCompleted(Me, New RepScrapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RDCScrap", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RDCScrap(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("RDCScrap", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RDCScrapAsync(ByVal IntSN As String)
            Me.RDCScrapAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RDCScrapAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.RDCScrapOperationCompleted Is Nothing) Then
                Me.RDCScrapOperationCompleted = AddressOf Me.OnRDCScrapOperationCompleted
            End If
            Me.InvokeAsync("RDCScrap", New Object() {IntSN}, Me.RDCScrapOperationCompleted, userState)
        End Sub
        
        Private Sub OnRDCScrapOperationCompleted(ByVal arg As Object)
            If (Not (Me.RDCScrapCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RDCScrapCompleted(Me, New RDCScrapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RDCSaveII", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RDCSaveII(ByVal DS As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("RDCSaveII", New Object() {DS})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RDCSaveIIAsync(ByVal DS As System.Data.DataSet)
            Me.RDCSaveIIAsync(DS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RDCSaveIIAsync(ByVal DS As System.Data.DataSet, ByVal userState As Object)
            If (Me.RDCSaveIIOperationCompleted Is Nothing) Then
                Me.RDCSaveIIOperationCompleted = AddressOf Me.OnRDCSaveIIOperationCompleted
            End If
            Me.InvokeAsync("RDCSaveII", New Object() {DS}, Me.RDCSaveIIOperationCompleted, userState)
        End Sub
        
        Private Sub OnRDCSaveIIOperationCompleted(ByVal arg As Object)
            If (Not (Me.RDCSaveIICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RDCSaveIICompleted(Me, New RDCSaveIICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/FailRecordII", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FailRecordII(ByVal SN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FailRecordII", New Object() {SN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FailRecordIIAsync(ByVal SN As String)
            Me.FailRecordIIAsync(SN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FailRecordIIAsync(ByVal SN As String, ByVal userState As Object)
            If (Me.FailRecordIIOperationCompleted Is Nothing) Then
                Me.FailRecordIIOperationCompleted = AddressOf Me.OnFailRecordIIOperationCompleted
            End If
            Me.InvokeAsync("FailRecordII", New Object() {SN}, Me.FailRecordIIOperationCompleted, userState)
        End Sub
        
        Private Sub OnFailRecordIIOperationCompleted(ByVal arg As Object)
            If (Not (Me.FailRecordIICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FailRecordIICompleted(Me, New FailRecordIICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RDCScrapII", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RDCScrapII(ByVal IntSN As String, ByVal ChangedBy As String) As String
            Dim results() As Object = Me.Invoke("RDCScrapII", New Object() {IntSN, ChangedBy})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RDCScrapIIAsync(ByVal IntSN As String, ByVal ChangedBy As String)
            Me.RDCScrapIIAsync(IntSN, ChangedBy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RDCScrapIIAsync(ByVal IntSN As String, ByVal ChangedBy As String, ByVal userState As Object)
            If (Me.RDCScrapIIOperationCompleted Is Nothing) Then
                Me.RDCScrapIIOperationCompleted = AddressOf Me.OnRDCScrapIIOperationCompleted
            End If
            Me.InvokeAsync("RDCScrapII", New Object() {IntSN, ChangedBy}, Me.RDCScrapIIOperationCompleted, userState)
        End Sub
        
        Private Sub OnRDCScrapIIOperationCompleted(ByVal arg As Object)
            If (Not (Me.RDCScrapIICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RDCScrapIICompleted(Me, New RDCScrapIICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RDC121MatlInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RDC121MatlInfo(ByVal PCBID As String, ByVal Model As String, ByVal PCBA As String, ByVal Circuit As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RDC121MatlInfo", New Object() {PCBID, Model, PCBA, Circuit})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RDC121MatlInfoAsync(ByVal PCBID As String, ByVal Model As String, ByVal PCBA As String, ByVal Circuit As String)
            Me.RDC121MatlInfoAsync(PCBID, Model, PCBA, Circuit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RDC121MatlInfoAsync(ByVal PCBID As String, ByVal Model As String, ByVal PCBA As String, ByVal Circuit As String, ByVal userState As Object)
            If (Me.RDC121MatlInfoOperationCompleted Is Nothing) Then
                Me.RDC121MatlInfoOperationCompleted = AddressOf Me.OnRDC121MatlInfoOperationCompleted
            End If
            Me.InvokeAsync("RDC121MatlInfo", New Object() {PCBID, Model, PCBA, Circuit}, Me.RDC121MatlInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnRDC121MatlInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.RDC121MatlInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RDC121MatlInfoCompleted(Me, New RDC121MatlInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RDCMatInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RDCMatInfo(ByVal DJ As String, ByVal MaterialNo As String, ByVal PCBA As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RDCMatInfo", New Object() {DJ, MaterialNo, PCBA})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RDCMatInfoAsync(ByVal DJ As String, ByVal MaterialNo As String, ByVal PCBA As String)
            Me.RDCMatInfoAsync(DJ, MaterialNo, PCBA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RDCMatInfoAsync(ByVal DJ As String, ByVal MaterialNo As String, ByVal PCBA As String, ByVal userState As Object)
            If (Me.RDCMatInfoOperationCompleted Is Nothing) Then
                Me.RDCMatInfoOperationCompleted = AddressOf Me.OnRDCMatInfoOperationCompleted
            End If
            Me.InvokeAsync("RDCMatInfo", New Object() {DJ, MaterialNo, PCBA}, Me.RDCMatInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnRDCMatInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.RDCMatInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RDCMatInfoCompleted(Me, New RDCMatInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RepRaiseTimes", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RepRaiseTimes(ByVal ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("RepRaiseTimes", New Object() {ds})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RepRaiseTimesAsync(ByVal ds As System.Data.DataSet)
            Me.RepRaiseTimesAsync(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RepRaiseTimesAsync(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.RepRaiseTimesOperationCompleted Is Nothing) Then
                Me.RepRaiseTimesOperationCompleted = AddressOf Me.OnRepRaiseTimesOperationCompleted
            End If
            Me.InvokeAsync("RepRaiseTimes", New Object() {ds}, Me.RepRaiseTimesOperationCompleted, userState)
        End Sub
        
        Private Sub OnRepRaiseTimesOperationCompleted(ByVal arg As Object)
            If (Not (Me.RepRaiseTimesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RepRaiseTimesCompleted(Me, New RepRaiseTimesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveRepairRecordData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveRepairRecordData(ByVal RepData As System.Data.DataSet, ByVal OTO As Boolean, ByVal IntSN As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveRepairRecordData", New Object() {RepData, OTO, IntSN})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveRepairRecordDataAsync(ByVal RepData As System.Data.DataSet, ByVal OTO As Boolean, ByVal IntSN As String)
            Me.SaveRepairRecordDataAsync(RepData, OTO, IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveRepairRecordDataAsync(ByVal RepData As System.Data.DataSet, ByVal OTO As Boolean, ByVal IntSN As String, ByVal userState As Object)
            If (Me.SaveRepairRecordDataOperationCompleted Is Nothing) Then
                Me.SaveRepairRecordDataOperationCompleted = AddressOf Me.OnSaveRepairRecordDataOperationCompleted
            End If
            Me.InvokeAsync("SaveRepairRecordData", New Object() {RepData, OTO, IntSN}, Me.SaveRepairRecordDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveRepairRecordDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveRepairRecordDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveRepairRecordDataCompleted(Me, New SaveRepairRecordDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SkipBI", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SkipBI(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("SkipBI", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SkipBIAsync(ByVal IntSN As String)
            Me.SkipBIAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SkipBIAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.SkipBIOperationCompleted Is Nothing) Then
                Me.SkipBIOperationCompleted = AddressOf Me.OnSkipBIOperationCompleted
            End If
            Me.InvokeAsync("SkipBI", New Object() {IntSN}, Me.SkipBIOperationCompleted, userState)
        End Sub
        
        Private Sub OnSkipBIOperationCompleted(ByVal arg As Object)
            If (Not (Me.SkipBICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SkipBICompleted(Me, New SkipBICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadFailItem", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadFailItem(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadFailItem", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadFailItemAsync(ByVal IntSN As String)
            Me.ReadFailItemAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadFailItemAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.ReadFailItemOperationCompleted Is Nothing) Then
                Me.ReadFailItemOperationCompleted = AddressOf Me.OnReadFailItemOperationCompleted
            End If
            Me.InvokeAsync("ReadFailItem", New Object() {IntSN}, Me.ReadFailItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadFailItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadFailItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadFailItemCompleted(Me, New ReadFailItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadNDFData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadNDFData(ByVal IntSN As String, ByVal OperatorName As String, ByVal Type As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadNDFData", New Object() {IntSN, OperatorName, Type})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadNDFDataAsync(ByVal IntSN As String, ByVal OperatorName As String, ByVal Type As String)
            Me.ReadNDFDataAsync(IntSN, OperatorName, Type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadNDFDataAsync(ByVal IntSN As String, ByVal OperatorName As String, ByVal Type As String, ByVal userState As Object)
            If (Me.ReadNDFDataOperationCompleted Is Nothing) Then
                Me.ReadNDFDataOperationCompleted = AddressOf Me.OnReadNDFDataOperationCompleted
            End If
            Me.InvokeAsync("ReadNDFData", New Object() {IntSN, OperatorName, Type}, Me.ReadNDFDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadNDFDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadNDFDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadNDFDataCompleted(Me, New ReadNDFDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/FailRecord", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FailRecord(ByVal SN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FailRecord", New Object() {SN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FailRecordAsync(ByVal SN As String)
            Me.FailRecordAsync(SN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FailRecordAsync(ByVal SN As String, ByVal userState As Object)
            If (Me.FailRecordOperationCompleted Is Nothing) Then
                Me.FailRecordOperationCompleted = AddressOf Me.OnFailRecordOperationCompleted
            End If
            Me.InvokeAsync("FailRecord", New Object() {SN}, Me.FailRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnFailRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.FailRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FailRecordCompleted(Me, New FailRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/NewFailData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NewFailData(ByVal SN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("NewFailData", New Object() {SN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NewFailDataAsync(ByVal SN As String)
            Me.NewFailDataAsync(SN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NewFailDataAsync(ByVal SN As String, ByVal userState As Object)
            If (Me.NewFailDataOperationCompleted Is Nothing) Then
                Me.NewFailDataOperationCompleted = AddressOf Me.OnNewFailDataOperationCompleted
            End If
            Me.InvokeAsync("NewFailData", New Object() {SN}, Me.NewFailDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnNewFailDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.NewFailDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NewFailDataCompleted(Me, New NewFailDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RDCWIPFLow", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RDCWIPFLow(ByVal WIPID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RDCWIPFLow", New Object() {WIPID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RDCWIPFLowAsync(ByVal WIPID As String)
            Me.RDCWIPFLowAsync(WIPID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RDCWIPFLowAsync(ByVal WIPID As String, ByVal userState As Object)
            If (Me.RDCWIPFLowOperationCompleted Is Nothing) Then
                Me.RDCWIPFLowOperationCompleted = AddressOf Me.OnRDCWIPFLowOperationCompleted
            End If
            Me.InvokeAsync("RDCWIPFLow", New Object() {WIPID}, Me.RDCWIPFLowOperationCompleted, userState)
        End Sub
        
        Private Sub OnRDCWIPFLowOperationCompleted(ByVal arg As Object)
            If (Not (Me.RDCWIPFLowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RDCWIPFLowCompleted(Me, New RDCWIPFLowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RDCSave", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RDCSave(ByVal DS As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("RDCSave", New Object() {DS})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RDCSaveAsync(ByVal DS As System.Data.DataSet)
            Me.RDCSaveAsync(DS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RDCSaveAsync(ByVal DS As System.Data.DataSet, ByVal userState As Object)
            If (Me.RDCSaveOperationCompleted Is Nothing) Then
                Me.RDCSaveOperationCompleted = AddressOf Me.OnRDCSaveOperationCompleted
            End If
            Me.InvokeAsync("RDCSave", New Object() {DS}, Me.RDCSaveOperationCompleted, userState)
        End Sub
        
        Private Sub OnRDCSaveOperationCompleted(ByVal arg As Object)
            If (Not (Me.RDCSaveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RDCSaveCompleted(Me, New RDCSaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSpecifySeatItem", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSpecifySeatItem(ByVal PCB As String, ByVal RefD As String, ByVal DJ As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSpecifySeatItem", New Object() {PCB, RefD, DJ})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSpecifySeatItemAsync(ByVal PCB As String, ByVal RefD As String, ByVal DJ As String)
            Me.GetSpecifySeatItemAsync(PCB, RefD, DJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSpecifySeatItemAsync(ByVal PCB As String, ByVal RefD As String, ByVal DJ As String, ByVal userState As Object)
            If (Me.GetSpecifySeatItemOperationCompleted Is Nothing) Then
                Me.GetSpecifySeatItemOperationCompleted = AddressOf Me.OnGetSpecifySeatItemOperationCompleted
            End If
            Me.InvokeAsync("GetSpecifySeatItem", New Object() {PCB, RefD, DJ}, Me.GetSpecifySeatItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSpecifySeatItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSpecifySeatItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSpecifySeatItemCompleted(Me, New GetSpecifySeatItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSpecifySeatItemByOrg", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSpecifySeatItemByOrg(ByVal PCB As String, ByVal RefD As String, ByVal DJ As String, ByVal Org As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSpecifySeatItemByOrg", New Object() {PCB, RefD, DJ, Org})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSpecifySeatItemByOrgAsync(ByVal PCB As String, ByVal RefD As String, ByVal DJ As String, ByVal Org As String)
            Me.GetSpecifySeatItemByOrgAsync(PCB, RefD, DJ, Org, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSpecifySeatItemByOrgAsync(ByVal PCB As String, ByVal RefD As String, ByVal DJ As String, ByVal Org As String, ByVal userState As Object)
            If (Me.GetSpecifySeatItemByOrgOperationCompleted Is Nothing) Then
                Me.GetSpecifySeatItemByOrgOperationCompleted = AddressOf Me.OnGetSpecifySeatItemByOrgOperationCompleted
            End If
            Me.InvokeAsync("GetSpecifySeatItemByOrg", New Object() {PCB, RefD, DJ, Org}, Me.GetSpecifySeatItemByOrgOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSpecifySeatItemByOrgOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSpecifySeatItemByOrgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSpecifySeatItemByOrgCompleted(Me, New GetSpecifySeatItemByOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPdControlByDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPdControlByDJ(ByVal p_DJ As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPdControlByDJ", New Object() {p_DJ})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPdControlByDJAsync(ByVal p_DJ As String)
            Me.GetPdControlByDJAsync(p_DJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPdControlByDJAsync(ByVal p_DJ As String, ByVal userState As Object)
            If (Me.GetPdControlByDJOperationCompleted Is Nothing) Then
                Me.GetPdControlByDJOperationCompleted = AddressOf Me.OnGetPdControlByDJOperationCompleted
            End If
            Me.InvokeAsync("GetPdControlByDJ", New Object() {p_DJ}, Me.GetPdControlByDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPdControlByDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPdControlByDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPdControlByDJCompleted(Me, New GetPdControlByDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdatePOQty", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePOQty(ByVal PO As String, ByVal OrgCode As String, ByVal Model As String, ByVal ModelRev As String, ByVal POQty As Integer, ByVal TVA As String, ByVal AllowMatching As Boolean, ByVal AllowPacking As Boolean, ByVal ChangedBy As String, ByVal Remarks As String) As String
            Dim results() As Object = Me.Invoke("UpdatePOQty", New Object() {PO, OrgCode, Model, ModelRev, POQty, TVA, AllowMatching, AllowPacking, ChangedBy, Remarks})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePOQtyAsync(ByVal PO As String, ByVal OrgCode As String, ByVal Model As String, ByVal ModelRev As String, ByVal POQty As Integer, ByVal TVA As String, ByVal AllowMatching As Boolean, ByVal AllowPacking As Boolean, ByVal ChangedBy As String, ByVal Remarks As String)
            Me.UpdatePOQtyAsync(PO, OrgCode, Model, ModelRev, POQty, TVA, AllowMatching, AllowPacking, ChangedBy, Remarks, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePOQtyAsync(ByVal PO As String, ByVal OrgCode As String, ByVal Model As String, ByVal ModelRev As String, ByVal POQty As Integer, ByVal TVA As String, ByVal AllowMatching As Boolean, ByVal AllowPacking As Boolean, ByVal ChangedBy As String, ByVal Remarks As String, ByVal userState As Object)
            If (Me.UpdatePOQtyOperationCompleted Is Nothing) Then
                Me.UpdatePOQtyOperationCompleted = AddressOf Me.OnUpdatePOQtyOperationCompleted
            End If
            Me.InvokeAsync("UpdatePOQty", New Object() {PO, OrgCode, Model, ModelRev, POQty, TVA, AllowMatching, AllowPacking, ChangedBy, Remarks}, Me.UpdatePOQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePOQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePOQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePOQtyCompleted(Me, New UpdatePOQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATELockingRDCWIPIN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATELockingRDCWIPIN(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("ATELockingRDCWIPIN", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATELockingRDCWIPINAsync(ByVal IntSN As String)
            Me.ATELockingRDCWIPINAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATELockingRDCWIPINAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.ATELockingRDCWIPINOperationCompleted Is Nothing) Then
                Me.ATELockingRDCWIPINOperationCompleted = AddressOf Me.OnATELockingRDCWIPINOperationCompleted
            End If
            Me.InvokeAsync("ATELockingRDCWIPIN", New Object() {IntSN}, Me.ATELockingRDCWIPINOperationCompleted, userState)
        End Sub
        
        Private Sub OnATELockingRDCWIPINOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATELockingRDCWIPINCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATELockingRDCWIPINCompleted(Me, New ATELockingRDCWIPINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateOraItem", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOraItem(ByVal Logindata As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOraItem", New Object() {Logindata})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOraItemAsync(ByVal Logindata As ERPLogin)
            Me.UpdateOraItemAsync(Logindata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOraItemAsync(ByVal Logindata As ERPLogin, ByVal userState As Object)
            If (Me.UpdateOraItemOperationCompleted Is Nothing) Then
                Me.UpdateOraItemOperationCompleted = AddressOf Me.OnUpdateOraItemOperationCompleted
            End If
            Me.InvokeAsync("UpdateOraItem", New Object() {Logindata}, Me.UpdateOraItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOraItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOraItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOraItemCompleted(Me, New UpdateOraItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ArchiveCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ArchiveCLID(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ArchiveCLID", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ArchiveCLIDAsync(ByVal OracleLoginData As ERPLogin)
            Me.ArchiveCLIDAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ArchiveCLIDAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ArchiveCLIDOperationCompleted Is Nothing) Then
                Me.ArchiveCLIDOperationCompleted = AddressOf Me.OnArchiveCLIDOperationCompleted
            End If
            Me.InvokeAsync("ArchiveCLID", New Object() {OracleLoginData}, Me.ArchiveCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnArchiveCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ArchiveCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ArchiveCLIDCompleted(Me, New ArchiveCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateSTypeBin", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSTypeBin(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("UpdateSTypeBin", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSTypeBinAsync(ByVal OracleLoginData As ERPLogin)
            Me.UpdateSTypeBinAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSTypeBinAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.UpdateSTypeBinOperationCompleted Is Nothing) Then
                Me.UpdateSTypeBinOperationCompleted = AddressOf Me.OnUpdateSTypeBinOperationCompleted
            End If
            Me.InvokeAsync("UpdateSTypeBin", New Object() {OracleLoginData}, Me.UpdateSTypeBinOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSTypeBinOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSTypeBinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSTypeBinCompleted(Me, New UpdateSTypeBinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DisableManualItems", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DisableManualItems(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("DisableManualItems", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DisableManualItemsAsync(ByVal OracleLoginData As ERPLogin)
            Me.DisableManualItemsAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DisableManualItemsAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.DisableManualItemsOperationCompleted Is Nothing) Then
                Me.DisableManualItemsOperationCompleted = AddressOf Me.OnDisableManualItemsOperationCompleted
            End If
            Me.InvokeAsync("DisableManualItems", New Object() {OracleLoginData}, Me.DisableManualItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDisableManualItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisableManualItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisableManualItemsCompleted(Me, New DisableManualItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckNoMapping", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckNoMapping(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("CheckNoMapping", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckNoMappingAsync(ByVal OracleLoginData As ERPLogin)
            Me.CheckNoMappingAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckNoMappingAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckNoMappingOperationCompleted Is Nothing) Then
                Me.CheckNoMappingOperationCompleted = AddressOf Me.OnCheckNoMappingOperationCompleted
            End If
            Me.InvokeAsync("CheckNoMapping", New Object() {OracleLoginData}, Me.CheckNoMappingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckNoMappingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckNoMappingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckNoMappingCompleted(Me, New CheckNoMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CountNoMapping", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CountNoMapping(ByVal OracleLoginData As ERPLogin) As Integer
            Dim results() As Object = Me.Invoke("CountNoMapping", New Object() {OracleLoginData})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CountNoMappingAsync(ByVal OracleLoginData As ERPLogin)
            Me.CountNoMappingAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CountNoMappingAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CountNoMappingOperationCompleted Is Nothing) Then
                Me.CountNoMappingOperationCompleted = AddressOf Me.OnCountNoMappingOperationCompleted
            End If
            Me.InvokeAsync("CountNoMapping", New Object() {OracleLoginData}, Me.CountNoMappingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCountNoMappingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CountNoMappingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CountNoMappingCompleted(Me, New CountNoMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckMigrateStatus", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckMigrateStatus(ByVal OracleLoginData As ERPLogin) As Integer
            Dim results() As Object = Me.Invoke("CheckMigrateStatus", New Object() {OracleLoginData})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckMigrateStatusAsync(ByVal OracleLoginData As ERPLogin)
            Me.CheckMigrateStatusAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckMigrateStatusAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckMigrateStatusOperationCompleted Is Nothing) Then
                Me.CheckMigrateStatusOperationCompleted = AddressOf Me.OnCheckMigrateStatusOperationCompleted
            End If
            Me.InvokeAsync("CheckMigrateStatus", New Object() {OracleLoginData}, Me.CheckMigrateStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckMigrateStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckMigrateStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckMigrateStatusCompleted(Me, New CheckMigrateStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateCLMaster", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCLMaster(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("UpdateCLMaster", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCLMasterAsync(ByVal OracleLoginData As ERPLogin)
            Me.UpdateCLMasterAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCLMasterAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.UpdateCLMasterOperationCompleted Is Nothing) Then
                Me.UpdateCLMasterOperationCompleted = AddressOf Me.OnUpdateCLMasterOperationCompleted
            End If
            Me.InvokeAsync("UpdateCLMaster", New Object() {OracleLoginData}, Me.UpdateCLMasterOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCLMasterOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCLMasterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCLMasterCompleted(Me, New UpdateCLMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SumSAPIM", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SumSAPIM(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("SumSAPIM", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SumSAPIMAsync(ByVal OracleLoginData As ERPLogin)
            Me.SumSAPIMAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SumSAPIMAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.SumSAPIMOperationCompleted Is Nothing) Then
                Me.SumSAPIMOperationCompleted = AddressOf Me.OnSumSAPIMOperationCompleted
            End If
            Me.InvokeAsync("SumSAPIM", New Object() {OracleLoginData}, Me.SumSAPIMOperationCompleted, userState)
        End Sub
        
        Private Sub OnSumSAPIMOperationCompleted(ByVal arg As Object)
            If (Not (Me.SumSAPIMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SumSAPIMCompleted(Me, New SumSAPIMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckQtyMatch", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckQtyMatch(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("CheckQtyMatch", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckQtyMatchAsync(ByVal OracleLoginData As ERPLogin)
            Me.CheckQtyMatchAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckQtyMatchAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckQtyMatchOperationCompleted Is Nothing) Then
                Me.CheckQtyMatchOperationCompleted = AddressOf Me.OnCheckQtyMatchOperationCompleted
            End If
            Me.InvokeAsync("CheckQtyMatch", New Object() {OracleLoginData}, Me.CheckQtyMatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckQtyMatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckQtyMatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckQtyMatchCompleted(Me, New CheckQtyMatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AssignClientID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignClientID(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("AssignClientID", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignClientIDAsync(ByVal OracleLoginData As ERPLogin)
            Me.AssignClientIDAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignClientIDAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.AssignClientIDOperationCompleted Is Nothing) Then
                Me.AssignClientIDOperationCompleted = AddressOf Me.OnAssignClientIDOperationCompleted
            End If
            Me.InvokeAsync("AssignClientID", New Object() {OracleLoginData}, Me.AssignClientIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignClientIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignClientIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignClientIDCompleted(Me, New AssignClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadToOracle", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadToOracle(ByVal ClientID As String, ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("UploadToOracle", New Object() {ClientID, OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadToOracleAsync(ByVal ClientID As String, ByVal OracleLoginData As ERPLogin)
            Me.UploadToOracleAsync(ClientID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadToOracleAsync(ByVal ClientID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.UploadToOracleOperationCompleted Is Nothing) Then
                Me.UploadToOracleOperationCompleted = AddressOf Me.OnUploadToOracleOperationCompleted
            End If
            Me.InvokeAsync("UploadToOracle", New Object() {ClientID, OracleLoginData}, Me.UploadToOracleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadToOracleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadToOracleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadToOracleCompleted(Me, New UploadToOracleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IssueFmOracle", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IssueFmOracle(ByVal ClientID As String, ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("IssueFmOracle", New Object() {ClientID, OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IssueFmOracleAsync(ByVal ClientID As String, ByVal OracleLoginData As ERPLogin)
            Me.IssueFmOracleAsync(ClientID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IssueFmOracleAsync(ByVal ClientID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.IssueFmOracleOperationCompleted Is Nothing) Then
                Me.IssueFmOracleOperationCompleted = AddressOf Me.OnIssueFmOracleOperationCompleted
            End If
            Me.InvokeAsync("IssueFmOracle", New Object() {ClientID, OracleLoginData}, Me.IssueFmOracleOperationCompleted, userState)
        End Sub
        
        Private Sub OnIssueFmOracleOperationCompleted(ByVal arg As Object)
            If (Not (Me.IssueFmOracleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IssueFmOracleCompleted(Me, New IssueFmOracleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckSAPPN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckSAPPN(ByVal SAPPN As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("CheckSAPPN", New Object() {SAPPN, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckSAPPNAsync(ByVal SAPPN As String, ByVal OracleLoginData As ERPLogin)
            Me.CheckSAPPNAsync(SAPPN, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckSAPPNAsync(ByVal SAPPN As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckSAPPNOperationCompleted Is Nothing) Then
                Me.CheckSAPPNOperationCompleted = AddressOf Me.OnCheckSAPPNOperationCompleted
            End If
            Me.InvokeAsync("CheckSAPPN", New Object() {SAPPN, OracleLoginData}, Me.CheckSAPPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckSAPPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckSAPPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckSAPPNCompleted(Me, New CheckSAPPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Check_SAPPN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Check_SAPPN(ByVal SAPPN As String, ByVal OracleLoginData As ERPLogin) As SAPPN_Check
            Dim results() As Object = Me.Invoke("Check_SAPPN", New Object() {SAPPN, OracleLoginData})
            Return CType(results(0),SAPPN_Check)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Check_SAPPNAsync(ByVal SAPPN As String, ByVal OracleLoginData As ERPLogin)
            Me.Check_SAPPNAsync(SAPPN, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Check_SAPPNAsync(ByVal SAPPN As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Check_SAPPNOperationCompleted Is Nothing) Then
                Me.Check_SAPPNOperationCompleted = AddressOf Me.OnCheck_SAPPNOperationCompleted
            End If
            Me.InvokeAsync("Check_SAPPN", New Object() {SAPPN, OracleLoginData}, Me.Check_SAPPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheck_SAPPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.Check_SAPPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Check_SAPPNCompleted(Me, New Check_SAPPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RollbackCLIDInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RollbackCLIDInfo(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("RollbackCLIDInfo", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RollbackCLIDInfoAsync(ByVal OracleLoginData As ERPLogin)
            Me.RollbackCLIDInfoAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RollbackCLIDInfoAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.RollbackCLIDInfoOperationCompleted Is Nothing) Then
                Me.RollbackCLIDInfoOperationCompleted = AddressOf Me.OnRollbackCLIDInfoOperationCompleted
            End If
            Me.InvokeAsync("RollbackCLIDInfo", New Object() {OracleLoginData}, Me.RollbackCLIDInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnRollbackCLIDInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.RollbackCLIDInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RollbackCLIDInfoCompleted(Me, New RollbackCLIDInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_STCtrlList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_STCtrlList(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_STCtrlList", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_STCtrlListAsync(ByVal OracleLoginData As ERPLogin)
            Me.Get_STCtrlListAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_STCtrlListAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_STCtrlListOperationCompleted Is Nothing) Then
                Me.Get_STCtrlListOperationCompleted = AddressOf Me.OnGet_STCtrlListOperationCompleted
            End If
            Me.InvokeAsync("Get_STCtrlList", New Object() {OracleLoginData}, Me.Get_STCtrlListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_STCtrlListOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_STCtrlListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_STCtrlListCompleted(Me, New Get_STCtrlListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ST_CheckAction", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ST_CheckAction(ByVal Action As String, ByVal OracleLogindata As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ST_CheckAction", New Object() {Action, OracleLogindata})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ST_CheckActionAsync(ByVal Action As String, ByVal OracleLogindata As ERPLogin)
            Me.ST_CheckActionAsync(Action, OracleLogindata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ST_CheckActionAsync(ByVal Action As String, ByVal OracleLogindata As ERPLogin, ByVal userState As Object)
            If (Me.ST_CheckActionOperationCompleted Is Nothing) Then
                Me.ST_CheckActionOperationCompleted = AddressOf Me.OnST_CheckActionOperationCompleted
            End If
            Me.InvokeAsync("ST_CheckAction", New Object() {Action, OracleLogindata}, Me.ST_CheckActionOperationCompleted, userState)
        End Sub
        
        Private Sub OnST_CheckActionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ST_CheckActionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ST_CheckActionCompleted(Me, New ST_CheckActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ST_CompAction", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ST_CompAction(ByVal Action As String, ByVal OracleLogindata As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ST_CompAction", New Object() {Action, OracleLogindata})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ST_CompActionAsync(ByVal Action As String, ByVal OracleLogindata As ERPLogin)
            Me.ST_CompActionAsync(Action, OracleLogindata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ST_CompActionAsync(ByVal Action As String, ByVal OracleLogindata As ERPLogin, ByVal userState As Object)
            If (Me.ST_CompActionOperationCompleted Is Nothing) Then
                Me.ST_CompActionOperationCompleted = AddressOf Me.OnST_CompActionOperationCompleted
            End If
            Me.InvokeAsync("ST_CompAction", New Object() {Action, OracleLogindata}, Me.ST_CompActionOperationCompleted, userState)
        End Sub
        
        Private Sub OnST_CompActionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ST_CompActionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ST_CompActionCompleted(Me, New ST_CompActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateActionStatus", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateActionStatus(ByVal Action As String, ByVal Enabled As Boolean, ByVal Done As Boolean, ByVal OracleLogindata As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("UpdateActionStatus", New Object() {Action, Enabled, Done, OracleLogindata})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateActionStatusAsync(ByVal Action As String, ByVal Enabled As Boolean, ByVal Done As Boolean, ByVal OracleLogindata As ERPLogin)
            Me.UpdateActionStatusAsync(Action, Enabled, Done, OracleLogindata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateActionStatusAsync(ByVal Action As String, ByVal Enabled As Boolean, ByVal Done As Boolean, ByVal OracleLogindata As ERPLogin, ByVal userState As Object)
            If (Me.UpdateActionStatusOperationCompleted Is Nothing) Then
                Me.UpdateActionStatusOperationCompleted = AddressOf Me.OnUpdateActionStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateActionStatus", New Object() {Action, Enabled, Done, OracleLogindata}, Me.UpdateActionStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateActionStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateActionStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateActionStatusCompleted(Me, New UpdateActionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Lock_eTrace", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Lock_eTrace(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("Lock_eTrace", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Lock_eTraceAsync(ByVal OracleLoginData As ERPLogin)
            Me.Lock_eTraceAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Lock_eTraceAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Lock_eTraceOperationCompleted Is Nothing) Then
                Me.Lock_eTraceOperationCompleted = AddressOf Me.OnLock_eTraceOperationCompleted
            End If
            Me.InvokeAsync("Lock_eTrace", New Object() {OracleLoginData}, Me.Lock_eTraceOperationCompleted, userState)
        End Sub
        
        Private Sub OnLock_eTraceOperationCompleted(ByVal arg As Object)
            If (Not (Me.Lock_eTraceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Lock_eTraceCompleted(Me, New Lock_eTraceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UnLock_eTrace", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnLock_eTrace(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("UnLock_eTrace", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnLock_eTraceAsync(ByVal OracleLoginData As ERPLogin)
            Me.UnLock_eTraceAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnLock_eTraceAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.UnLock_eTraceOperationCompleted Is Nothing) Then
                Me.UnLock_eTraceOperationCompleted = AddressOf Me.OnUnLock_eTraceOperationCompleted
            End If
            Me.InvokeAsync("UnLock_eTrace", New Object() {OracleLoginData}, Me.UnLock_eTraceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnLock_eTraceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnLock_eTraceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnLock_eTraceCompleted(Me, New UnLock_eTraceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ClearPIName", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClearPIName(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ClearPIName", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClearPINameAsync(ByVal OracleLoginData As ERPLogin)
            Me.ClearPINameAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearPINameAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ClearPINameOperationCompleted Is Nothing) Then
                Me.ClearPINameOperationCompleted = AddressOf Me.OnClearPINameOperationCompleted
            End If
            Me.InvokeAsync("ClearPIName", New Object() {OracleLoginData}, Me.ClearPINameOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearPINameOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearPINameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearPINameCompleted(Me, New ClearPINameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetOrgList_StockTake", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrgList_StockTake(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("GetOrgList_StockTake", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrgList_StockTakeAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetOrgList_StockTakeAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrgList_StockTakeAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetOrgList_StockTakeOperationCompleted Is Nothing) Then
                Me.GetOrgList_StockTakeOperationCompleted = AddressOf Me.OnGetOrgList_StockTakeOperationCompleted
            End If
            Me.InvokeAsync("GetOrgList_StockTake", New Object() {OracleLoginData}, Me.GetOrgList_StockTakeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrgList_StockTakeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrgList_StockTakeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrgList_StockTakeCompleted(Me, New GetOrgList_StockTakeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AddPIName", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPIName(ByVal OrgCode As String, ByVal PIName As String, ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("AddPIName", New Object() {OrgCode, PIName, OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPINameAsync(ByVal OrgCode As String, ByVal PIName As String, ByVal OracleLoginData As ERPLogin)
            Me.AddPINameAsync(OrgCode, PIName, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPINameAsync(ByVal OrgCode As String, ByVal PIName As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.AddPINameOperationCompleted Is Nothing) Then
                Me.AddPINameOperationCompleted = AddressOf Me.OnAddPINameOperationCompleted
            End If
            Me.InvokeAsync("AddPIName", New Object() {OrgCode, PIName, OracleLoginData}, Me.AddPINameOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPINameOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPINameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPINameCompleted(Me, New AddPINameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/StockTake_CpySubLoc", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StockTake_CpySubLoc(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("StockTake_CpySubLoc", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StockTake_CpySubLocAsync(ByVal OracleLoginData As ERPLogin)
            Me.StockTake_CpySubLocAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StockTake_CpySubLocAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.StockTake_CpySubLocOperationCompleted Is Nothing) Then
                Me.StockTake_CpySubLocOperationCompleted = AddressOf Me.OnStockTake_CpySubLocOperationCompleted
            End If
            Me.InvokeAsync("StockTake_CpySubLoc", New Object() {OracleLoginData}, Me.StockTake_CpySubLocOperationCompleted, userState)
        End Sub
        
        Private Sub OnStockTake_CpySubLocOperationCompleted(ByVal arg As Object)
            If (Not (Me.StockTake_CpySubLocCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StockTake_CpySubLocCompleted(Me, New StockTake_CpySubLocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CopyPI", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyPI(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("CopyPI", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyPIAsync(ByVal OracleLoginData As ERPLogin)
            Me.CopyPIAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyPIAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CopyPIOperationCompleted Is Nothing) Then
                Me.CopyPIOperationCompleted = AddressOf Me.OnCopyPIOperationCompleted
            End If
            Me.InvokeAsync("CopyPI", New Object() {OracleLoginData}, Me.CopyPIOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyPIOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyPICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyPICompleted(Me, New CopyPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CopyCLMaster", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyCLMaster(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("CopyCLMaster", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyCLMasterAsync(ByVal OracleLoginData As ERPLogin)
            Me.CopyCLMasterAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCLMasterAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CopyCLMasterOperationCompleted Is Nothing) Then
                Me.CopyCLMasterOperationCompleted = AddressOf Me.OnCopyCLMasterOperationCompleted
            End If
            Me.InvokeAsync("CopyCLMaster", New Object() {OracleLoginData}, Me.CopyCLMasterOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCLMasterOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCLMasterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCLMasterCompleted(Me, New CopyCLMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ExtCnt2", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExtCnt2(ByVal OracleLogindata As ERPLogin) As String
            Dim results() As Object = Me.Invoke("ExtCnt2", New Object() {OracleLogindata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExtCnt2Async(ByVal OracleLogindata As ERPLogin)
            Me.ExtCnt2Async(OracleLogindata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExtCnt2Async(ByVal OracleLogindata As ERPLogin, ByVal userState As Object)
            If (Me.ExtCnt2OperationCompleted Is Nothing) Then
                Me.ExtCnt2OperationCompleted = AddressOf Me.OnExtCnt2OperationCompleted
            End If
            Me.InvokeAsync("ExtCnt2", New Object() {OracleLogindata}, Me.ExtCnt2OperationCompleted, userState)
        End Sub
        
        Private Sub OnExtCnt2OperationCompleted(ByVal arg As Object)
            If (Not (Me.ExtCnt2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExtCnt2Completed(Me, New ExtCnt2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SetCount1", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCount1(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("SetCount1", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCount1Async(ByVal OracleLoginData As ERPLogin)
            Me.SetCount1Async(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCount1Async(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.SetCount1OperationCompleted Is Nothing) Then
                Me.SetCount1OperationCompleted = AddressOf Me.OnSetCount1OperationCompleted
            End If
            Me.InvokeAsync("SetCount1", New Object() {OracleLoginData}, Me.SetCount1OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCount1OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCount1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCount1Completed(Me, New SetCount1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SetCount2", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCount2(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("SetCount2", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCount2Async(ByVal OracleLoginData As ERPLogin)
            Me.SetCount2Async(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCount2Async(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.SetCount2OperationCompleted Is Nothing) Then
                Me.SetCount2OperationCompleted = AddressOf Me.OnSetCount2OperationCompleted
            End If
            Me.InvokeAsync("SetCount2", New Object() {OracleLoginData}, Me.SetCount2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCount2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCount2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCount2Completed(Me, New SetCount2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckCountOption", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckCountOption(ByVal OracleLogindata As ERPLogin) As String
            Dim results() As Object = Me.Invoke("CheckCountOption", New Object() {OracleLogindata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckCountOptionAsync(ByVal OracleLogindata As ERPLogin)
            Me.CheckCountOptionAsync(OracleLogindata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckCountOptionAsync(ByVal OracleLogindata As ERPLogin, ByVal userState As Object)
            If (Me.CheckCountOptionOperationCompleted Is Nothing) Then
                Me.CheckCountOptionOperationCompleted = AddressOf Me.OnCheckCountOptionOperationCompleted
            End If
            Me.InvokeAsync("CheckCountOption", New Object() {OracleLogindata}, Me.CheckCountOptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckCountOptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckCountOptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckCountOptionCompleted(Me, New CheckCountOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/StockTake_ValidateSubLoc", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StockTake_ValidateSubLoc(ByVal OracleLoginData As ERPLogin, ByVal Subinv As String, ByVal Locator As String) As String
            Dim results() As Object = Me.Invoke("StockTake_ValidateSubLoc", New Object() {OracleLoginData, Subinv, Locator})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StockTake_ValidateSubLocAsync(ByVal OracleLoginData As ERPLogin, ByVal Subinv As String, ByVal Locator As String)
            Me.StockTake_ValidateSubLocAsync(OracleLoginData, Subinv, Locator, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StockTake_ValidateSubLocAsync(ByVal OracleLoginData As ERPLogin, ByVal Subinv As String, ByVal Locator As String, ByVal userState As Object)
            If (Me.StockTake_ValidateSubLocOperationCompleted Is Nothing) Then
                Me.StockTake_ValidateSubLocOperationCompleted = AddressOf Me.OnStockTake_ValidateSubLocOperationCompleted
            End If
            Me.InvokeAsync("StockTake_ValidateSubLoc", New Object() {OracleLoginData, Subinv, Locator}, Me.StockTake_ValidateSubLocOperationCompleted, userState)
        End Sub
        
        Private Sub OnStockTake_ValidateSubLocOperationCompleted(ByVal arg As Object)
            If (Not (Me.StockTake_ValidateSubLocCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StockTake_ValidateSubLocCompleted(Me, New StockTake_ValidateSubLocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckInSubLocList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckInSubLocList(ByVal LoginData As ERPLogin, ByVal SubInv As String, ByVal Locator As String) As String
            Dim results() As Object = Me.Invoke("CheckInSubLocList", New Object() {LoginData, SubInv, Locator})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckInSubLocListAsync(ByVal LoginData As ERPLogin, ByVal SubInv As String, ByVal Locator As String)
            Me.CheckInSubLocListAsync(LoginData, SubInv, Locator, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckInSubLocListAsync(ByVal LoginData As ERPLogin, ByVal SubInv As String, ByVal Locator As String, ByVal userState As Object)
            If (Me.CheckInSubLocListOperationCompleted Is Nothing) Then
                Me.CheckInSubLocListOperationCompleted = AddressOf Me.OnCheckInSubLocListOperationCompleted
            End If
            Me.InvokeAsync("CheckInSubLocList", New Object() {LoginData, SubInv, Locator}, Me.CheckInSubLocListOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckInSubLocListOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckInSubLocListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckInSubLocListCompleted(Me, New CheckInSubLocListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckBFSubinv", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBFSubinv(ByVal Subinv As String, ByVal OracleLogindata As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("CheckBFSubinv", New Object() {Subinv, OracleLogindata})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBFSubinvAsync(ByVal Subinv As String, ByVal OracleLogindata As ERPLogin)
            Me.CheckBFSubinvAsync(Subinv, OracleLogindata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBFSubinvAsync(ByVal Subinv As String, ByVal OracleLogindata As ERPLogin, ByVal userState As Object)
            If (Me.CheckBFSubinvOperationCompleted Is Nothing) Then
                Me.CheckBFSubinvOperationCompleted = AddressOf Me.OnCheckBFSubinvOperationCompleted
            End If
            Me.InvokeAsync("CheckBFSubinv", New Object() {Subinv, OracleLogindata}, Me.CheckBFSubinvOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBFSubinvOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBFSubinvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBFSubinvCompleted(Me, New CheckBFSubinvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCLIDInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCLIDInfo(ByVal CLID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCLIDInfo", New Object() {CLID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCLIDInfoAsync(ByVal CLID As String, ByVal OracleLoginData As ERPLogin)
            Me.GetCLIDInfoAsync(CLID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCLIDInfoAsync(ByVal CLID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetCLIDInfoOperationCompleted Is Nothing) Then
                Me.GetCLIDInfoOperationCompleted = AddressOf Me.OnGetCLIDInfoOperationCompleted
            End If
            Me.InvokeAsync("GetCLIDInfo", New Object() {CLID, OracleLoginData}, Me.GetCLIDInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCLIDInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCLIDInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCLIDInfoCompleted(Me, New GetCLIDInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckStopFlag", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckStopFlag(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("CheckStopFlag", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckStopFlagAsync(ByVal OracleLoginData As ERPLogin)
            Me.CheckStopFlagAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckStopFlagAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckStopFlagOperationCompleted Is Nothing) Then
                Me.CheckStopFlagOperationCompleted = AddressOf Me.OnCheckStopFlagOperationCompleted
            End If
            Me.InvokeAsync("CheckStopFlag", New Object() {OracleLoginData}, Me.CheckStopFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckStopFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckStopFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckStopFlagCompleted(Me, New CheckStopFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Save_STChange", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Save_STChange(ByVal pstInfo As System.Data.DataSet, ByVal CountSeq As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("Save_STChange", New Object() {pstInfo, CountSeq, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Save_STChangeAsync(ByVal pstInfo As System.Data.DataSet, ByVal CountSeq As String, ByVal OracleLoginData As ERPLogin)
            Me.Save_STChangeAsync(pstInfo, CountSeq, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Save_STChangeAsync(ByVal pstInfo As System.Data.DataSet, ByVal CountSeq As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Save_STChangeOperationCompleted Is Nothing) Then
                Me.Save_STChangeOperationCompleted = AddressOf Me.OnSave_STChangeOperationCompleted
            End If
            Me.InvokeAsync("Save_STChange", New Object() {pstInfo, CountSeq, OracleLoginData}, Me.Save_STChangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnSave_STChangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.Save_STChangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Save_STChangeCompleted(Me, New Save_STChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckNotFound", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckNotFound(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("CheckNotFound", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckNotFoundAsync(ByVal OracleLoginData As ERPLogin)
            Me.CheckNotFoundAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckNotFoundAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckNotFoundOperationCompleted Is Nothing) Then
                Me.CheckNotFoundOperationCompleted = AddressOf Me.OnCheckNotFoundOperationCompleted
            End If
            Me.InvokeAsync("CheckNotFound", New Object() {OracleLoginData}, Me.CheckNotFoundOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckNotFoundOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckNotFoundCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckNotFoundCompleted(Me, New CheckNotFoundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GenVarRpt", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GenVarRpt(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GenVarRpt", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GenVarRptAsync(ByVal OracleLoginData As ERPLogin)
            Me.GenVarRptAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GenVarRptAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GenVarRptOperationCompleted Is Nothing) Then
                Me.GenVarRptOperationCompleted = AddressOf Me.OnGenVarRptOperationCompleted
            End If
            Me.InvokeAsync("GenVarRpt", New Object() {OracleLoginData}, Me.GenVarRptOperationCompleted, userState)
        End Sub
        
        Private Sub OnGenVarRptOperationCompleted(ByVal arg As Object)
            If (Not (Me.GenVarRptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GenVarRptCompleted(Me, New GenVarRptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/EnableScan", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnableScan(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("EnableScan", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnableScanAsync(ByVal OracleLoginData As ERPLogin)
            Me.EnableScanAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnableScanAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.EnableScanOperationCompleted Is Nothing) Then
                Me.EnableScanOperationCompleted = AddressOf Me.OnEnableScanOperationCompleted
            End If
            Me.InvokeAsync("EnableScan", New Object() {OracleLoginData}, Me.EnableScanOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnableScanOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnableScanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnableScanCompleted(Me, New EnableScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/StopScan", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StopScan(ByVal SeqNo As String, ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("StopScan", New Object() {SeqNo, OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StopScanAsync(ByVal SeqNo As String, ByVal OracleLoginData As ERPLogin)
            Me.StopScanAsync(SeqNo, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StopScanAsync(ByVal SeqNo As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.StopScanOperationCompleted Is Nothing) Then
                Me.StopScanOperationCompleted = AddressOf Me.OnStopScanOperationCompleted
            End If
            Me.InvokeAsync("StopScan", New Object() {SeqNo, OracleLoginData}, Me.StopScanOperationCompleted, userState)
        End Sub
        
        Private Sub OnStopScanOperationCompleted(ByVal arg As Object)
            If (Not (Me.StopScanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StopScanCompleted(Me, New StopScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/NoValidate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NoValidate(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("NoValidate", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NoValidateAsync(ByVal OracleLoginData As ERPLogin)
            Me.NoValidateAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NoValidateAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.NoValidateOperationCompleted Is Nothing) Then
                Me.NoValidateOperationCompleted = AddressOf Me.OnNoValidateOperationCompleted
            End If
            Me.InvokeAsync("NoValidate", New Object() {OracleLoginData}, Me.NoValidateOperationCompleted, userState)
        End Sub
        
        Private Sub OnNoValidateOperationCompleted(ByVal arg As Object)
            If (Not (Me.NoValidateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NoValidateCompleted(Me, New NoValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WithValidate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WithValidate(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("WithValidate", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WithValidateAsync(ByVal OracleLoginData As ERPLogin)
            Me.WithValidateAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WithValidateAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WithValidateOperationCompleted Is Nothing) Then
                Me.WithValidateOperationCompleted = AddressOf Me.OnWithValidateOperationCompleted
            End If
            Me.InvokeAsync("WithValidate", New Object() {OracleLoginData}, Me.WithValidateOperationCompleted, userState)
        End Sub
        
        Private Sub OnWithValidateOperationCompleted(ByVal arg As Object)
            If (Not (Me.WithValidateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WithValidateCompleted(Me, New WithValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BkpRmv", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BkpRmv(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("BkpRmv", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BkpRmvAsync(ByVal OracleLoginData As ERPLogin)
            Me.BkpRmvAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BkpRmvAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.BkpRmvOperationCompleted Is Nothing) Then
                Me.BkpRmvOperationCompleted = AddressOf Me.OnBkpRmvOperationCompleted
            End If
            Me.InvokeAsync("BkpRmv", New Object() {OracleLoginData}, Me.BkpRmvOperationCompleted, userState)
        End Sub
        
        Private Sub OnBkpRmvOperationCompleted(ByVal arg As Object)
            If (Not (Me.BkpRmvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BkpRmvCompleted(Me, New BkpRmvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SumQtyForPI", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SumQtyForPI(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("SumQtyForPI", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SumQtyForPIAsync(ByVal OracleLoginData As ERPLogin)
            Me.SumQtyForPIAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SumQtyForPIAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.SumQtyForPIOperationCompleted Is Nothing) Then
                Me.SumQtyForPIOperationCompleted = AddressOf Me.OnSumQtyForPIOperationCompleted
            End If
            Me.InvokeAsync("SumQtyForPI", New Object() {OracleLoginData}, Me.SumQtyForPIOperationCompleted, userState)
        End Sub
        
        Private Sub OnSumQtyForPIOperationCompleted(ByVal arg As Object)
            If (Not (Me.SumQtyForPICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SumQtyForPICompleted(Me, New SumQtyForPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/StockTake_AssignExpDate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StockTake_AssignExpDate(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("StockTake_AssignExpDate", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StockTake_AssignExpDateAsync(ByVal OracleLoginData As ERPLogin)
            Me.StockTake_AssignExpDateAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StockTake_AssignExpDateAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.StockTake_AssignExpDateOperationCompleted Is Nothing) Then
                Me.StockTake_AssignExpDateOperationCompleted = AddressOf Me.OnStockTake_AssignExpDateOperationCompleted
            End If
            Me.InvokeAsync("StockTake_AssignExpDate", New Object() {OracleLoginData}, Me.StockTake_AssignExpDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnStockTake_AssignExpDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.StockTake_AssignExpDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StockTake_AssignExpDateCompleted(Me, New StockTake_AssignExpDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateDiffLocator", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDiffLocator(ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("UpdateDiffLocator", New Object() {OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDiffLocatorAsync(ByVal OracleLoginData As ERPLogin)
            Me.UpdateDiffLocatorAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDiffLocatorAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.UpdateDiffLocatorOperationCompleted Is Nothing) Then
                Me.UpdateDiffLocatorOperationCompleted = AddressOf Me.OnUpdateDiffLocatorOperationCompleted
            End If
            Me.InvokeAsync("UpdateDiffLocator", New Object() {OracleLoginData}, Me.UpdateDiffLocatorOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDiffLocatorOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDiffLocatorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDiffLocatorCompleted(Me, New UpdateDiffLocatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPIResult", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPIResult(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPIResult", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPIResultAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetPIResultAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPIResultAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetPIResultOperationCompleted Is Nothing) Then
                Me.GetPIResultOperationCompleted = AddressOf Me.OnGetPIResultOperationCompleted
            End If
            Me.InvokeAsync("GetPIResult", New Object() {OracleLoginData}, Me.GetPIResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPIResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPIResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPIResultCompleted(Me, New GetPIResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPropertiesName", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropertiesName(ByVal intSN As String, ByVal processname As String) As String
            Dim results() As Object = Me.Invoke("GetPropertiesName", New Object() {intSN, processname})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropertiesNameAsync(ByVal intSN As String, ByVal processname As String)
            Me.GetPropertiesNameAsync(intSN, processname, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropertiesNameAsync(ByVal intSN As String, ByVal processname As String, ByVal userState As Object)
            If (Me.GetPropertiesNameOperationCompleted Is Nothing) Then
                Me.GetPropertiesNameOperationCompleted = AddressOf Me.OnGetPropertiesNameOperationCompleted
            End If
            Me.InvokeAsync("GetPropertiesName", New Object() {intSN, processname}, Me.GetPropertiesNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropertiesNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropertiesNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropertiesNameCompleted(Me, New GetPropertiesNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMaxTestRound", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaxTestRound(ByVal intSN As String, ByVal ProcessName As String) As Integer
            Dim results() As Object = Me.Invoke("GetMaxTestRound", New Object() {intSN, ProcessName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaxTestRoundAsync(ByVal intSN As String, ByVal ProcessName As String)
            Me.GetMaxTestRoundAsync(intSN, ProcessName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaxTestRoundAsync(ByVal intSN As String, ByVal ProcessName As String, ByVal userState As Object)
            If (Me.GetMaxTestRoundOperationCompleted Is Nothing) Then
                Me.GetMaxTestRoundOperationCompleted = AddressOf Me.OnGetMaxTestRoundOperationCompleted
            End If
            Me.InvokeAsync("GetMaxTestRound", New Object() {intSN, ProcessName}, Me.GetMaxTestRoundOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaxTestRoundOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaxTestRoundCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaxTestRoundCompleted(Me, New GetMaxTestRoundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMaxFailure", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaxFailure(ByVal intSN As String, ByVal ProcessName As String) As Integer
            Dim results() As Object = Me.Invoke("GetMaxFailure", New Object() {intSN, ProcessName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaxFailureAsync(ByVal intSN As String, ByVal ProcessName As String)
            Me.GetMaxFailureAsync(intSN, ProcessName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaxFailureAsync(ByVal intSN As String, ByVal ProcessName As String, ByVal userState As Object)
            If (Me.GetMaxFailureOperationCompleted Is Nothing) Then
                Me.GetMaxFailureOperationCompleted = AddressOf Me.OnGetMaxFailureOperationCompleted
            End If
            Me.InvokeAsync("GetMaxFailure", New Object() {intSN, ProcessName}, Me.GetMaxFailureOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaxFailureOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaxFailureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaxFailureCompleted(Me, New GetMaxFailureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CleanTestResult", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CleanTestResult(ByVal intSN As String, ByVal ProcessName As String) As Boolean
            Dim results() As Object = Me.Invoke("CleanTestResult", New Object() {intSN, ProcessName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CleanTestResultAsync(ByVal intSN As String, ByVal ProcessName As String)
            Me.CleanTestResultAsync(intSN, ProcessName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CleanTestResultAsync(ByVal intSN As String, ByVal ProcessName As String, ByVal userState As Object)
            If (Me.CleanTestResultOperationCompleted Is Nothing) Then
                Me.CleanTestResultOperationCompleted = AddressOf Me.OnCleanTestResultOperationCompleted
            End If
            Me.InvokeAsync("CleanTestResult", New Object() {intSN, ProcessName}, Me.CleanTestResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnCleanTestResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.CleanTestResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CleanTestResultCompleted(Me, New CleanTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPInOQA", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPInOQA(ByVal ExtSN As String, ByVal OperatorName As String, ByVal OrgCode As String) As String
            Dim results() As Object = Me.Invoke("WIPInOQA", New Object() {ExtSN, OperatorName, OrgCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPInOQAAsync(ByVal ExtSN As String, ByVal OperatorName As String, ByVal OrgCode As String)
            Me.WIPInOQAAsync(ExtSN, OperatorName, OrgCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPInOQAAsync(ByVal ExtSN As String, ByVal OperatorName As String, ByVal OrgCode As String, ByVal userState As Object)
            If (Me.WIPInOQAOperationCompleted Is Nothing) Then
                Me.WIPInOQAOperationCompleted = AddressOf Me.OnWIPInOQAOperationCompleted
            End If
            Me.InvokeAsync("WIPInOQA", New Object() {ExtSN, OperatorName, OrgCode}, Me.WIPInOQAOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPInOQAOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPInOQACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPInOQACompleted(Me, New WIPInOQACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckExtSNSameIntSNByModel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckExtSNSameIntSNByModel(ByVal Model As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckExtSNSameIntSNByModel", New Object() {Model})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckExtSNSameIntSNByModelAsync(ByVal Model As String)
            Me.CheckExtSNSameIntSNByModelAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckExtSNSameIntSNByModelAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.CheckExtSNSameIntSNByModelOperationCompleted Is Nothing) Then
                Me.CheckExtSNSameIntSNByModelOperationCompleted = AddressOf Me.OnCheckExtSNSameIntSNByModelOperationCompleted
            End If
            Me.InvokeAsync("CheckExtSNSameIntSNByModel", New Object() {Model}, Me.CheckExtSNSameIntSNByModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckExtSNSameIntSNByModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckExtSNSameIntSNByModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckExtSNSameIntSNByModelCompleted(Me, New CheckExtSNSameIntSNByModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Employee_Login", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Employee_Login(ByVal AccessCardID As String) As String
            Dim results() As Object = Me.Invoke("Employee_Login", New Object() {AccessCardID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Employee_LoginAsync(ByVal AccessCardID As String)
            Me.Employee_LoginAsync(AccessCardID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Employee_LoginAsync(ByVal AccessCardID As String, ByVal userState As Object)
            If (Me.Employee_LoginOperationCompleted Is Nothing) Then
                Me.Employee_LoginOperationCompleted = AddressOf Me.OnEmployee_LoginOperationCompleted
            End If
            Me.InvokeAsync("Employee_Login", New Object() {AccessCardID}, Me.Employee_LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnEmployee_LoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.Employee_LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Employee_LoginCompleted(Me, New Employee_LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Employee_Certify", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Employee_Certify(ByVal AccessCardID As String, ByVal CourseCode As String) As String
            Dim results() As Object = Me.Invoke("Employee_Certify", New Object() {AccessCardID, CourseCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Employee_CertifyAsync(ByVal AccessCardID As String, ByVal CourseCode As String)
            Me.Employee_CertifyAsync(AccessCardID, CourseCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Employee_CertifyAsync(ByVal AccessCardID As String, ByVal CourseCode As String, ByVal userState As Object)
            If (Me.Employee_CertifyOperationCompleted Is Nothing) Then
                Me.Employee_CertifyOperationCompleted = AddressOf Me.OnEmployee_CertifyOperationCompleted
            End If
            Me.InvokeAsync("Employee_Certify", New Object() {AccessCardID, CourseCode}, Me.Employee_CertifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnEmployee_CertifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.Employee_CertifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Employee_CertifyCompleted(Me, New Employee_CertifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Loading_CheckModel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Loading_CheckModel(ByVal Model As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Loading_CheckModel", New Object() {Model})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Loading_CheckModelAsync(ByVal Model As String)
            Me.Loading_CheckModelAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Loading_CheckModelAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.Loading_CheckModelOperationCompleted Is Nothing) Then
                Me.Loading_CheckModelOperationCompleted = AddressOf Me.OnLoading_CheckModelOperationCompleted
            End If
            Me.InvokeAsync("Loading_CheckModel", New Object() {Model}, Me.Loading_CheckModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoading_CheckModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.Loading_CheckModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Loading_CheckModelCompleted(Me, New Loading_CheckModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AutoStopLine", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AutoStopLine(ByVal TestData As String, ByVal Type As String) As String
            Dim results() As Object = Me.Invoke("AutoStopLine", New Object() {TestData, Type})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AutoStopLineAsync(ByVal TestData As String, ByVal Type As String)
            Me.AutoStopLineAsync(TestData, Type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AutoStopLineAsync(ByVal TestData As String, ByVal Type As String, ByVal userState As Object)
            If (Me.AutoStopLineOperationCompleted Is Nothing) Then
                Me.AutoStopLineOperationCompleted = AddressOf Me.OnAutoStopLineOperationCompleted
            End If
            Me.InvokeAsync("AutoStopLine", New Object() {TestData, Type}, Me.AutoStopLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnAutoStopLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.AutoStopLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AutoStopLineCompleted(Me, New AutoStopLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Laser_VerifyUnit", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Laser_VerifyUnit(ByVal Model As String, ByVal IntSN As String, ByVal Computer As String, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("Laser_VerifyUnit", New Object() {Model, IntSN, Computer, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Laser_VerifyUnitAsync(ByVal Model As String, ByVal IntSN As String, ByVal Computer As String, ByVal User As String)
            Me.Laser_VerifyUnitAsync(Model, IntSN, Computer, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Laser_VerifyUnitAsync(ByVal Model As String, ByVal IntSN As String, ByVal Computer As String, ByVal User As String, ByVal userState As Object)
            If (Me.Laser_VerifyUnitOperationCompleted Is Nothing) Then
                Me.Laser_VerifyUnitOperationCompleted = AddressOf Me.OnLaser_VerifyUnitOperationCompleted
            End If
            Me.InvokeAsync("Laser_VerifyUnit", New Object() {Model, IntSN, Computer, User}, Me.Laser_VerifyUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnLaser_VerifyUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.Laser_VerifyUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Laser_VerifyUnitCompleted(Me, New Laser_VerifyUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Laser_VerifyUnitTest", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Laser_VerifyUnitTest(ByVal Model As String, ByVal IntSN As String, ByVal Computer As String, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("Laser_VerifyUnitTest", New Object() {Model, IntSN, Computer, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Laser_VerifyUnitTestAsync(ByVal Model As String, ByVal IntSN As String, ByVal Computer As String, ByVal User As String)
            Me.Laser_VerifyUnitTestAsync(Model, IntSN, Computer, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Laser_VerifyUnitTestAsync(ByVal Model As String, ByVal IntSN As String, ByVal Computer As String, ByVal User As String, ByVal userState As Object)
            If (Me.Laser_VerifyUnitTestOperationCompleted Is Nothing) Then
                Me.Laser_VerifyUnitTestOperationCompleted = AddressOf Me.OnLaser_VerifyUnitTestOperationCompleted
            End If
            Me.InvokeAsync("Laser_VerifyUnitTest", New Object() {Model, IntSN, Computer, User}, Me.Laser_VerifyUnitTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnLaser_VerifyUnitTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.Laser_VerifyUnitTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Laser_VerifyUnitTestCompleted(Me, New Laser_VerifyUnitTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_Register", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_Register(ByVal Type As String, ByVal FixtureID As String, ByVal MaxUse As Integer, ByVal Description As String, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("Fixture_Register", New Object() {Type, FixtureID, MaxUse, Description, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_RegisterAsync(ByVal Type As String, ByVal FixtureID As String, ByVal MaxUse As Integer, ByVal Description As String, ByVal User As String)
            Me.Fixture_RegisterAsync(Type, FixtureID, MaxUse, Description, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_RegisterAsync(ByVal Type As String, ByVal FixtureID As String, ByVal MaxUse As Integer, ByVal Description As String, ByVal User As String, ByVal userState As Object)
            If (Me.Fixture_RegisterOperationCompleted Is Nothing) Then
                Me.Fixture_RegisterOperationCompleted = AddressOf Me.OnFixture_RegisterOperationCompleted
            End If
            Me.InvokeAsync("Fixture_Register", New Object() {Type, FixtureID, MaxUse, Description, User}, Me.Fixture_RegisterOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_RegisterOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_RegisterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_RegisterCompleted(Me, New Fixture_RegisterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_Type", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_Type(ByVal Type As String, ByVal Slot As Integer, ByVal Warning As Integer, ByVal Maintenance As Integer, ByVal Repair As Integer, ByVal DefaultMax As Integer, ByVal Description As String, ByVal User As String) As Boolean
            Dim results() As Object = Me.Invoke("Fixture_Type", New Object() {Type, Slot, Warning, Maintenance, Repair, DefaultMax, Description, User})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_TypeAsync(ByVal Type As String, ByVal Slot As Integer, ByVal Warning As Integer, ByVal Maintenance As Integer, ByVal Repair As Integer, ByVal DefaultMax As Integer, ByVal Description As String, ByVal User As String)
            Me.Fixture_TypeAsync(Type, Slot, Warning, Maintenance, Repair, DefaultMax, Description, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_TypeAsync(ByVal Type As String, ByVal Slot As Integer, ByVal Warning As Integer, ByVal Maintenance As Integer, ByVal Repair As Integer, ByVal DefaultMax As Integer, ByVal Description As String, ByVal User As String, ByVal userState As Object)
            If (Me.Fixture_TypeOperationCompleted Is Nothing) Then
                Me.Fixture_TypeOperationCompleted = AddressOf Me.OnFixture_TypeOperationCompleted
            End If
            Me.InvokeAsync("Fixture_Type", New Object() {Type, Slot, Warning, Maintenance, Repair, DefaultMax, Description, User}, Me.Fixture_TypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_TypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_TypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_TypeCompleted(Me, New Fixture_TypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_Maintain", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_Maintain(ByVal FixtureID As String, ByVal Description As String, ByVal User As String) As Boolean
            Dim results() As Object = Me.Invoke("Fixture_Maintain", New Object() {FixtureID, Description, User})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_MaintainAsync(ByVal FixtureID As String, ByVal Description As String, ByVal User As String)
            Me.Fixture_MaintainAsync(FixtureID, Description, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_MaintainAsync(ByVal FixtureID As String, ByVal Description As String, ByVal User As String, ByVal userState As Object)
            If (Me.Fixture_MaintainOperationCompleted Is Nothing) Then
                Me.Fixture_MaintainOperationCompleted = AddressOf Me.OnFixture_MaintainOperationCompleted
            End If
            Me.InvokeAsync("Fixture_Maintain", New Object() {FixtureID, Description, User}, Me.Fixture_MaintainOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_MaintainOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_MaintainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_MaintainCompleted(Me, New Fixture_MaintainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_Repair", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_Repair(ByVal FixtureID As String, ByVal Description As String, ByVal User As String) As Boolean
            Dim results() As Object = Me.Invoke("Fixture_Repair", New Object() {FixtureID, Description, User})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_RepairAsync(ByVal FixtureID As String, ByVal Description As String, ByVal User As String)
            Me.Fixture_RepairAsync(FixtureID, Description, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_RepairAsync(ByVal FixtureID As String, ByVal Description As String, ByVal User As String, ByVal userState As Object)
            If (Me.Fixture_RepairOperationCompleted Is Nothing) Then
                Me.Fixture_RepairOperationCompleted = AddressOf Me.OnFixture_RepairOperationCompleted
            End If
            Me.InvokeAsync("Fixture_Repair", New Object() {FixtureID, Description, User}, Me.Fixture_RepairOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_RepairOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_RepairCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_RepairCompleted(Me, New Fixture_RepairCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_InActive", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_InActive(ByVal FixtureID As String, ByVal Description As String, ByVal User As String) As Boolean
            Dim results() As Object = Me.Invoke("Fixture_InActive", New Object() {FixtureID, Description, User})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_InActiveAsync(ByVal FixtureID As String, ByVal Description As String, ByVal User As String)
            Me.Fixture_InActiveAsync(FixtureID, Description, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_InActiveAsync(ByVal FixtureID As String, ByVal Description As String, ByVal User As String, ByVal userState As Object)
            If (Me.Fixture_InActiveOperationCompleted Is Nothing) Then
                Me.Fixture_InActiveOperationCompleted = AddressOf Me.OnFixture_InActiveOperationCompleted
            End If
            Me.InvokeAsync("Fixture_InActive", New Object() {FixtureID, Description, User}, Me.Fixture_InActiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_InActiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_InActiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_InActiveCompleted(Me, New Fixture_InActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_RegisterView", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_RegisterView(ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("Fixture_RegisterView", New Object() {FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_RegisterViewAsync(ByVal FixtureID As String)
            Me.Fixture_RegisterViewAsync(FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_RegisterViewAsync(ByVal FixtureID As String, ByVal userState As Object)
            If (Me.Fixture_RegisterViewOperationCompleted Is Nothing) Then
                Me.Fixture_RegisterViewOperationCompleted = AddressOf Me.OnFixture_RegisterViewOperationCompleted
            End If
            Me.InvokeAsync("Fixture_RegisterView", New Object() {FixtureID}, Me.Fixture_RegisterViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_RegisterViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_RegisterViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_RegisterViewCompleted(Me, New Fixture_RegisterViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_InActiveLog", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_InActiveLog() As String
            Dim results() As Object = Me.Invoke("Fixture_InActiveLog", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_InActiveLogAsync()
            Me.Fixture_InActiveLogAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_InActiveLogAsync(ByVal userState As Object)
            If (Me.Fixture_InActiveLogOperationCompleted Is Nothing) Then
                Me.Fixture_InActiveLogOperationCompleted = AddressOf Me.OnFixture_InActiveLogOperationCompleted
            End If
            Me.InvokeAsync("Fixture_InActiveLog", New Object(-1) {}, Me.Fixture_InActiveLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_InActiveLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_InActiveLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_InActiveLogCompleted(Me, New Fixture_InActiveLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_InActiveLogByFixture", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_InActiveLogByFixture(ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("Fixture_InActiveLogByFixture", New Object() {FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_InActiveLogByFixtureAsync(ByVal FixtureID As String)
            Me.Fixture_InActiveLogByFixtureAsync(FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_InActiveLogByFixtureAsync(ByVal FixtureID As String, ByVal userState As Object)
            If (Me.Fixture_InActiveLogByFixtureOperationCompleted Is Nothing) Then
                Me.Fixture_InActiveLogByFixtureOperationCompleted = AddressOf Me.OnFixture_InActiveLogByFixtureOperationCompleted
            End If
            Me.InvokeAsync("Fixture_InActiveLogByFixture", New Object() {FixtureID}, Me.Fixture_InActiveLogByFixtureOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_InActiveLogByFixtureOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_InActiveLogByFixtureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_InActiveLogByFixtureCompleted(Me, New Fixture_InActiveLogByFixtureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_MaintainLog", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_MaintainLog(ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("Fixture_MaintainLog", New Object() {FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_MaintainLogAsync(ByVal FixtureID As String)
            Me.Fixture_MaintainLogAsync(FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_MaintainLogAsync(ByVal FixtureID As String, ByVal userState As Object)
            If (Me.Fixture_MaintainLogOperationCompleted Is Nothing) Then
                Me.Fixture_MaintainLogOperationCompleted = AddressOf Me.OnFixture_MaintainLogOperationCompleted
            End If
            Me.InvokeAsync("Fixture_MaintainLog", New Object() {FixtureID}, Me.Fixture_MaintainLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_MaintainLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_MaintainLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_MaintainLogCompleted(Me, New Fixture_MaintainLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_RepairLog", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_RepairLog(ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("Fixture_RepairLog", New Object() {FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_RepairLogAsync(ByVal FixtureID As String)
            Me.Fixture_RepairLogAsync(FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_RepairLogAsync(ByVal FixtureID As String, ByVal userState As Object)
            If (Me.Fixture_RepairLogOperationCompleted Is Nothing) Then
                Me.Fixture_RepairLogOperationCompleted = AddressOf Me.OnFixture_RepairLogOperationCompleted
            End If
            Me.InvokeAsync("Fixture_RepairLog", New Object() {FixtureID}, Me.Fixture_RepairLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_RepairLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_RepairLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_RepairLogCompleted(Me, New Fixture_RepairLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_TypeView", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_TypeView() As String
            Dim results() As Object = Me.Invoke("Fixture_TypeView", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_TypeViewAsync()
            Me.Fixture_TypeViewAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_TypeViewAsync(ByVal userState As Object)
            If (Me.Fixture_TypeViewOperationCompleted Is Nothing) Then
                Me.Fixture_TypeViewOperationCompleted = AddressOf Me.OnFixture_TypeViewOperationCompleted
            End If
            Me.InvokeAsync("Fixture_TypeView", New Object(-1) {}, Me.Fixture_TypeViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_TypeViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_TypeViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_TypeViewCompleted(Me, New Fixture_TypeViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Fixture_Update", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fixture_Update(ByVal FixtureID As String, ByVal Type As String, ByVal MaxUse As Integer, ByVal Description As String, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("Fixture_Update", New Object() {FixtureID, Type, MaxUse, Description, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Fixture_UpdateAsync(ByVal FixtureID As String, ByVal Type As String, ByVal MaxUse As Integer, ByVal Description As String, ByVal User As String)
            Me.Fixture_UpdateAsync(FixtureID, Type, MaxUse, Description, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Fixture_UpdateAsync(ByVal FixtureID As String, ByVal Type As String, ByVal MaxUse As Integer, ByVal Description As String, ByVal User As String, ByVal userState As Object)
            If (Me.Fixture_UpdateOperationCompleted Is Nothing) Then
                Me.Fixture_UpdateOperationCompleted = AddressOf Me.OnFixture_UpdateOperationCompleted
            End If
            Me.InvokeAsync("Fixture_Update", New Object() {FixtureID, Type, MaxUse, Description, User}, Me.Fixture_UpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixture_UpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.Fixture_UpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Fixture_UpdateCompleted(Me, New Fixture_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATE_FixtureVerify", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATE_FixtureVerify(ByVal FixtureID As String, ByVal Type As String) As String
            Dim results() As Object = Me.Invoke("ATE_FixtureVerify", New Object() {FixtureID, Type})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATE_FixtureVerifyAsync(ByVal FixtureID As String, ByVal Type As String)
            Me.ATE_FixtureVerifyAsync(FixtureID, Type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATE_FixtureVerifyAsync(ByVal FixtureID As String, ByVal Type As String, ByVal userState As Object)
            If (Me.ATE_FixtureVerifyOperationCompleted Is Nothing) Then
                Me.ATE_FixtureVerifyOperationCompleted = AddressOf Me.OnATE_FixtureVerifyOperationCompleted
            End If
            Me.InvokeAsync("ATE_FixtureVerify", New Object() {FixtureID, Type}, Me.ATE_FixtureVerifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnATE_FixtureVerifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATE_FixtureVerifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATE_FixtureVerifyCompleted(Me, New ATE_FixtureVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATE_CreateRelation", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATE_CreateRelation(ByVal FixtureID As String, ByVal Slot As Integer, ByVal Model As String, ByVal IntSN As String, ByVal Process As String, ByVal User As String) As String
            Dim results() As Object = Me.Invoke("ATE_CreateRelation", New Object() {FixtureID, Slot, Model, IntSN, Process, User})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATE_CreateRelationAsync(ByVal FixtureID As String, ByVal Slot As Integer, ByVal Model As String, ByVal IntSN As String, ByVal Process As String, ByVal User As String)
            Me.ATE_CreateRelationAsync(FixtureID, Slot, Model, IntSN, Process, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATE_CreateRelationAsync(ByVal FixtureID As String, ByVal Slot As Integer, ByVal Model As String, ByVal IntSN As String, ByVal Process As String, ByVal User As String, ByVal userState As Object)
            If (Me.ATE_CreateRelationOperationCompleted Is Nothing) Then
                Me.ATE_CreateRelationOperationCompleted = AddressOf Me.OnATE_CreateRelationOperationCompleted
            End If
            Me.InvokeAsync("ATE_CreateRelation", New Object() {FixtureID, Slot, Model, IntSN, Process, User}, Me.ATE_CreateRelationOperationCompleted, userState)
        End Sub
        
        Private Sub OnATE_CreateRelationOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATE_CreateRelationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATE_CreateRelationCompleted(Me, New ATE_CreateRelationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATE_FixtureSign", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATE_FixtureSign(ByVal FixtureID As String, ByVal User As String) As Boolean
            Dim results() As Object = Me.Invoke("ATE_FixtureSign", New Object() {FixtureID, User})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATE_FixtureSignAsync(ByVal FixtureID As String, ByVal User As String)
            Me.ATE_FixtureSignAsync(FixtureID, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATE_FixtureSignAsync(ByVal FixtureID As String, ByVal User As String, ByVal userState As Object)
            If (Me.ATE_FixtureSignOperationCompleted Is Nothing) Then
                Me.ATE_FixtureSignOperationCompleted = AddressOf Me.OnATE_FixtureSignOperationCompleted
            End If
            Me.InvokeAsync("ATE_FixtureSign", New Object() {FixtureID, User}, Me.ATE_FixtureSignOperationCompleted, userState)
        End Sub
        
        Private Sub OnATE_FixtureSignOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATE_FixtureSignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATE_FixtureSignCompleted(Me, New ATE_FixtureSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATE_ReturnSNbySlot", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATE_ReturnSNbySlot(ByVal FixtureID As String, ByVal sLot As Integer) As String
            Dim results() As Object = Me.Invoke("ATE_ReturnSNbySlot", New Object() {FixtureID, sLot})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATE_ReturnSNbySlotAsync(ByVal FixtureID As String, ByVal sLot As Integer)
            Me.ATE_ReturnSNbySlotAsync(FixtureID, sLot, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATE_ReturnSNbySlotAsync(ByVal FixtureID As String, ByVal sLot As Integer, ByVal userState As Object)
            If (Me.ATE_ReturnSNbySlotOperationCompleted Is Nothing) Then
                Me.ATE_ReturnSNbySlotOperationCompleted = AddressOf Me.OnATE_ReturnSNbySlotOperationCompleted
            End If
            Me.InvokeAsync("ATE_ReturnSNbySlot", New Object() {FixtureID, sLot}, Me.ATE_ReturnSNbySlotOperationCompleted, userState)
        End Sub
        
        Private Sub OnATE_ReturnSNbySlotOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATE_ReturnSNbySlotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATE_ReturnSNbySlotCompleted(Me, New ATE_ReturnSNbySlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATE_ReturnSNbyFixture", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATE_ReturnSNbyFixture(ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("ATE_ReturnSNbyFixture", New Object() {FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATE_ReturnSNbyFixtureAsync(ByVal FixtureID As String)
            Me.ATE_ReturnSNbyFixtureAsync(FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATE_ReturnSNbyFixtureAsync(ByVal FixtureID As String, ByVal userState As Object)
            If (Me.ATE_ReturnSNbyFixtureOperationCompleted Is Nothing) Then
                Me.ATE_ReturnSNbyFixtureOperationCompleted = AddressOf Me.OnATE_ReturnSNbyFixtureOperationCompleted
            End If
            Me.InvokeAsync("ATE_ReturnSNbyFixture", New Object() {FixtureID}, Me.ATE_ReturnSNbyFixtureOperationCompleted, userState)
        End Sub
        
        Private Sub OnATE_ReturnSNbyFixtureOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATE_ReturnSNbyFixtureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATE_ReturnSNbyFixtureCompleted(Me, New ATE_ReturnSNbyFixtureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATE_ReleaseRelationbySlot", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATE_ReleaseRelationbySlot(ByVal FixtureID As String, ByVal Slot As Integer, ByVal User As String) As Boolean
            Dim results() As Object = Me.Invoke("ATE_ReleaseRelationbySlot", New Object() {FixtureID, Slot, User})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATE_ReleaseRelationbySlotAsync(ByVal FixtureID As String, ByVal Slot As Integer, ByVal User As String)
            Me.ATE_ReleaseRelationbySlotAsync(FixtureID, Slot, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATE_ReleaseRelationbySlotAsync(ByVal FixtureID As String, ByVal Slot As Integer, ByVal User As String, ByVal userState As Object)
            If (Me.ATE_ReleaseRelationbySlotOperationCompleted Is Nothing) Then
                Me.ATE_ReleaseRelationbySlotOperationCompleted = AddressOf Me.OnATE_ReleaseRelationbySlotOperationCompleted
            End If
            Me.InvokeAsync("ATE_ReleaseRelationbySlot", New Object() {FixtureID, Slot, User}, Me.ATE_ReleaseRelationbySlotOperationCompleted, userState)
        End Sub
        
        Private Sub OnATE_ReleaseRelationbySlotOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATE_ReleaseRelationbySlotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATE_ReleaseRelationbySlotCompleted(Me, New ATE_ReleaseRelationbySlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATE_ReleaseRelationbyFixture", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATE_ReleaseRelationbyFixture(ByVal FixtureID As String, ByVal User As String) As Boolean
            Dim results() As Object = Me.Invoke("ATE_ReleaseRelationbyFixture", New Object() {FixtureID, User})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATE_ReleaseRelationbyFixtureAsync(ByVal FixtureID As String, ByVal User As String)
            Me.ATE_ReleaseRelationbyFixtureAsync(FixtureID, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATE_ReleaseRelationbyFixtureAsync(ByVal FixtureID As String, ByVal User As String, ByVal userState As Object)
            If (Me.ATE_ReleaseRelationbyFixtureOperationCompleted Is Nothing) Then
                Me.ATE_ReleaseRelationbyFixtureOperationCompleted = AddressOf Me.OnATE_ReleaseRelationbyFixtureOperationCompleted
            End If
            Me.InvokeAsync("ATE_ReleaseRelationbyFixture", New Object() {FixtureID, User}, Me.ATE_ReleaseRelationbyFixtureOperationCompleted, userState)
        End Sub
        
        Private Sub OnATE_ReleaseRelationbyFixtureOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATE_ReleaseRelationbyFixtureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATE_ReleaseRelationbyFixtureCompleted(Me, New ATE_ReleaseRelationbyFixtureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATE_IntSlotReview", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATE_IntSlotReview(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("ATE_IntSlotReview", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATE_IntSlotReviewAsync(ByVal IntSN As String)
            Me.ATE_IntSlotReviewAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATE_IntSlotReviewAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.ATE_IntSlotReviewOperationCompleted Is Nothing) Then
                Me.ATE_IntSlotReviewOperationCompleted = AddressOf Me.OnATE_IntSlotReviewOperationCompleted
            End If
            Me.InvokeAsync("ATE_IntSlotReview", New Object() {IntSN}, Me.ATE_IntSlotReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnATE_IntSlotReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATE_IntSlotReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATE_IntSlotReviewCompleted(Me, New ATE_IntSlotReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Function_ProcessVerify", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Function_ProcessVerify(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("Function_ProcessVerify", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Function_ProcessVerifyAsync(ByVal IntSN As String)
            Me.Function_ProcessVerifyAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Function_ProcessVerifyAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.Function_ProcessVerifyOperationCompleted Is Nothing) Then
                Me.Function_ProcessVerifyOperationCompleted = AddressOf Me.OnFunction_ProcessVerifyOperationCompleted
            End If
            Me.InvokeAsync("Function_ProcessVerify", New Object() {IntSN}, Me.Function_ProcessVerifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnFunction_ProcessVerifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.Function_ProcessVerifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Function_ProcessVerifyCompleted(Me, New Function_ProcessVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Depanel_VerifyMatching1", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Depanel_VerifyMatching1(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Depanel_VerifyMatching1", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Depanel_VerifyMatching1Async(ByVal IntSN As String)
            Me.Depanel_VerifyMatching1Async(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Depanel_VerifyMatching1Async(ByVal IntSN As String, ByVal userState As Object)
            If (Me.Depanel_VerifyMatching1OperationCompleted Is Nothing) Then
                Me.Depanel_VerifyMatching1OperationCompleted = AddressOf Me.OnDepanel_VerifyMatching1OperationCompleted
            End If
            Me.InvokeAsync("Depanel_VerifyMatching1", New Object() {IntSN}, Me.Depanel_VerifyMatching1OperationCompleted, userState)
        End Sub
        
        Private Sub OnDepanel_VerifyMatching1OperationCompleted(ByVal arg As Object)
            If (Not (Me.Depanel_VerifyMatching1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Depanel_VerifyMatching1Completed(Me, New Depanel_VerifyMatching1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Test_Reflow", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Test_Reflow(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Test_Reflow", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Test_ReflowAsync(ByVal IntSN As String)
            Me.Test_ReflowAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Test_ReflowAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.Test_ReflowOperationCompleted Is Nothing) Then
                Me.Test_ReflowOperationCompleted = AddressOf Me.OnTest_ReflowOperationCompleted
            End If
            Me.InvokeAsync("Test_Reflow", New Object() {IntSN}, Me.Test_ReflowOperationCompleted, userState)
        End Sub
        
        Private Sub OnTest_ReflowOperationCompleted(ByVal arg As Object)
            If (Not (Me.Test_ReflowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Test_ReflowCompleted(Me, New Test_ReflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Test_ItemData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Test_ItemData(ByVal IntSN As String, ByVal Process As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Test_ItemData", New Object() {IntSN, Process})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Test_ItemDataAsync(ByVal IntSN As String, ByVal Process As String)
            Me.Test_ItemDataAsync(IntSN, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Test_ItemDataAsync(ByVal IntSN As String, ByVal Process As String, ByVal userState As Object)
            If (Me.Test_ItemDataOperationCompleted Is Nothing) Then
                Me.Test_ItemDataOperationCompleted = AddressOf Me.OnTest_ItemDataOperationCompleted
            End If
            Me.InvokeAsync("Test_ItemData", New Object() {IntSN, Process}, Me.Test_ItemDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnTest_ItemDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.Test_ItemDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Test_ItemDataCompleted(Me, New Test_ItemDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSystemGMTDateTime", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSystemGMTDateTime(ByVal TimeZone As String) As String
            Dim results() As Object = Me.Invoke("GetSystemGMTDateTime", New Object() {TimeZone})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSystemGMTDateTimeAsync(ByVal TimeZone As String)
            Me.GetSystemGMTDateTimeAsync(TimeZone, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSystemGMTDateTimeAsync(ByVal TimeZone As String, ByVal userState As Object)
            If (Me.GetSystemGMTDateTimeOperationCompleted Is Nothing) Then
                Me.GetSystemGMTDateTimeOperationCompleted = AddressOf Me.OnGetSystemGMTDateTimeOperationCompleted
            End If
            Me.InvokeAsync("GetSystemGMTDateTime", New Object() {TimeZone}, Me.GetSystemGMTDateTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSystemGMTDateTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSystemGMTDateTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSystemGMTDateTimeCompleted(Me, New GetSystemGMTDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIP_UpdateStatus", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIP_UpdateStatus(ByVal IntSN As String, ByVal Process As String, ByVal OperatorName As String) As String
            Dim results() As Object = Me.Invoke("WIP_UpdateStatus", New Object() {IntSN, Process, OperatorName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIP_UpdateStatusAsync(ByVal IntSN As String, ByVal Process As String, ByVal OperatorName As String)
            Me.WIP_UpdateStatusAsync(IntSN, Process, OperatorName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIP_UpdateStatusAsync(ByVal IntSN As String, ByVal Process As String, ByVal OperatorName As String, ByVal userState As Object)
            If (Me.WIP_UpdateStatusOperationCompleted Is Nothing) Then
                Me.WIP_UpdateStatusOperationCompleted = AddressOf Me.OnWIP_UpdateStatusOperationCompleted
            End If
            Me.InvokeAsync("WIP_UpdateStatus", New Object() {IntSN, Process, OperatorName}, Me.WIP_UpdateStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIP_UpdateStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIP_UpdateStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIP_UpdateStatusCompleted(Me, New WIP_UpdateStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Test_ReflowProcess", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Test_ReflowProcess(ByVal IntSN As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("Test_ReflowProcess", New Object() {IntSN, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Test_ReflowProcessAsync(ByVal IntSN As String, ByVal Process As String)
            Me.Test_ReflowProcessAsync(IntSN, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Test_ReflowProcessAsync(ByVal IntSN As String, ByVal Process As String, ByVal userState As Object)
            If (Me.Test_ReflowProcessOperationCompleted Is Nothing) Then
                Me.Test_ReflowProcessOperationCompleted = AddressOf Me.OnTest_ReflowProcessOperationCompleted
            End If
            Me.InvokeAsync("Test_ReflowProcess", New Object() {IntSN, Process}, Me.Test_ReflowProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnTest_ReflowProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.Test_ReflowProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Test_ReflowProcessCompleted(Me, New Test_ReflowProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Depanel_VerifyLastTest", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Depanel_VerifyLastTest(ByVal IntSN As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Depanel_VerifyLastTest", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Depanel_VerifyLastTestAsync(ByVal IntSN As System.Data.DataSet)
            Me.Depanel_VerifyLastTestAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Depanel_VerifyLastTestAsync(ByVal IntSN As System.Data.DataSet, ByVal userState As Object)
            If (Me.Depanel_VerifyLastTestOperationCompleted Is Nothing) Then
                Me.Depanel_VerifyLastTestOperationCompleted = AddressOf Me.OnDepanel_VerifyLastTestOperationCompleted
            End If
            Me.InvokeAsync("Depanel_VerifyLastTest", New Object() {IntSN}, Me.Depanel_VerifyLastTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnDepanel_VerifyLastTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.Depanel_VerifyLastTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Depanel_VerifyLastTestCompleted(Me, New Depanel_VerifyLastTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_WIPFGSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_WIPFGSN(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_WIPFGSN", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_WIPFGSNAsync(ByVal IntSN As String)
            Me.Get_WIPFGSNAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_WIPFGSNAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.Get_WIPFGSNOperationCompleted Is Nothing) Then
                Me.Get_WIPFGSNOperationCompleted = AddressOf Me.OnGet_WIPFGSNOperationCompleted
            End If
            Me.InvokeAsync("Get_WIPFGSN", New Object() {IntSN}, Me.Get_WIPFGSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_WIPFGSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_WIPFGSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_WIPFGSNCompleted(Me, New Get_WIPFGSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_WIPTestData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_WIPTestData(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_WIPTestData", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_WIPTestDataAsync(ByVal IntSN As String)
            Me.Get_WIPTestDataAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_WIPTestDataAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.Get_WIPTestDataOperationCompleted Is Nothing) Then
                Me.Get_WIPTestDataOperationCompleted = AddressOf Me.OnGet_WIPTestDataOperationCompleted
            End If
            Me.InvokeAsync("Get_WIPTestData", New Object() {IntSN}, Me.Get_WIPTestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_WIPTestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_WIPTestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_WIPTestDataCompleted(Me, New Get_WIPTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_MaintainExpireLog", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_MaintainExpireLog(ByVal Expire As Integer, ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("Get_MaintainExpireLog", New Object() {Expire, FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_MaintainExpireLogAsync(ByVal Expire As Integer, ByVal FixtureID As String)
            Me.Get_MaintainExpireLogAsync(Expire, FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_MaintainExpireLogAsync(ByVal Expire As Integer, ByVal FixtureID As String, ByVal userState As Object)
            If (Me.Get_MaintainExpireLogOperationCompleted Is Nothing) Then
                Me.Get_MaintainExpireLogOperationCompleted = AddressOf Me.OnGet_MaintainExpireLogOperationCompleted
            End If
            Me.InvokeAsync("Get_MaintainExpireLog", New Object() {Expire, FixtureID}, Me.Get_MaintainExpireLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_MaintainExpireLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_MaintainExpireLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_MaintainExpireLogCompleted(Me, New Get_MaintainExpireLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_RepairExpireLog", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_RepairExpireLog(ByVal Expire As Integer, ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("Get_RepairExpireLog", New Object() {Expire, FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_RepairExpireLogAsync(ByVal Expire As Integer, ByVal FixtureID As String)
            Me.Get_RepairExpireLogAsync(Expire, FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_RepairExpireLogAsync(ByVal Expire As Integer, ByVal FixtureID As String, ByVal userState As Object)
            If (Me.Get_RepairExpireLogOperationCompleted Is Nothing) Then
                Me.Get_RepairExpireLogOperationCompleted = AddressOf Me.OnGet_RepairExpireLogOperationCompleted
            End If
            Me.InvokeAsync("Get_RepairExpireLog", New Object() {Expire, FixtureID}, Me.Get_RepairExpireLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_RepairExpireLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_RepairExpireLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_RepairExpireLogCompleted(Me, New Get_RepairExpireLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIP_UpdateParameter", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIP_UpdateParameter(ByVal IntSN As String, ByVal Process As String, ByVal TestStep As String, ByVal TestName As String, ByVal LowerLimit As Double, ByVal UperLimit As Double) As String
            Dim results() As Object = Me.Invoke("WIP_UpdateParameter", New Object() {IntSN, Process, TestStep, TestName, LowerLimit, UperLimit})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIP_UpdateParameterAsync(ByVal IntSN As String, ByVal Process As String, ByVal TestStep As String, ByVal TestName As String, ByVal LowerLimit As Double, ByVal UperLimit As Double)
            Me.WIP_UpdateParameterAsync(IntSN, Process, TestStep, TestName, LowerLimit, UperLimit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIP_UpdateParameterAsync(ByVal IntSN As String, ByVal Process As String, ByVal TestStep As String, ByVal TestName As String, ByVal LowerLimit As Double, ByVal UperLimit As Double, ByVal userState As Object)
            If (Me.WIP_UpdateParameterOperationCompleted Is Nothing) Then
                Me.WIP_UpdateParameterOperationCompleted = AddressOf Me.OnWIP_UpdateParameterOperationCompleted
            End If
            Me.InvokeAsync("WIP_UpdateParameter", New Object() {IntSN, Process, TestStep, TestName, LowerLimit, UperLimit}, Me.WIP_UpdateParameterOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIP_UpdateParameterOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIP_UpdateParameterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIP_UpdateParameterCompleted(Me, New WIP_UpdateParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Temp_InquiryProcess", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Temp_InquiryProcess(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Temp_InquiryProcess", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Temp_InquiryProcessAsync(ByVal IntSN As String)
            Me.Temp_InquiryProcessAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Temp_InquiryProcessAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.Temp_InquiryProcessOperationCompleted Is Nothing) Then
                Me.Temp_InquiryProcessOperationCompleted = AddressOf Me.OnTemp_InquiryProcessOperationCompleted
            End If
            Me.InvokeAsync("Temp_InquiryProcess", New Object() {IntSN}, Me.Temp_InquiryProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnTemp_InquiryProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.Temp_InquiryProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Temp_InquiryProcessCompleted(Me, New Temp_InquiryProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Temp_UpdateProcess", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Temp_UpdateProcess(ByVal IntSN As String, ByVal SeqNo As Integer, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("Temp_UpdateProcess", New Object() {IntSN, SeqNo, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Temp_UpdateProcessAsync(ByVal IntSN As String, ByVal SeqNo As Integer, ByVal Process As String)
            Me.Temp_UpdateProcessAsync(IntSN, SeqNo, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Temp_UpdateProcessAsync(ByVal IntSN As String, ByVal SeqNo As Integer, ByVal Process As String, ByVal userState As Object)
            If (Me.Temp_UpdateProcessOperationCompleted Is Nothing) Then
                Me.Temp_UpdateProcessOperationCompleted = AddressOf Me.OnTemp_UpdateProcessOperationCompleted
            End If
            Me.InvokeAsync("Temp_UpdateProcess", New Object() {IntSN, SeqNo, Process}, Me.Temp_UpdateProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnTemp_UpdateProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.Temp_UpdateProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Temp_UpdateProcessCompleted(Me, New Temp_UpdateProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveDJ(ByVal DJ As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("SaveDJ", New Object() {DJ})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveDJAsync(ByVal DJ As System.Data.DataSet)
            Me.SaveDJAsync(DJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveDJAsync(ByVal DJ As System.Data.DataSet, ByVal userState As Object)
            If (Me.SaveDJOperationCompleted Is Nothing) Then
                Me.SaveDJOperationCompleted = AddressOf Me.OnSaveDJOperationCompleted
            End If
            Me.InvokeAsync("SaveDJ", New Object() {DJ}, Me.SaveDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveDJCompleted(Me, New SaveDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadOrg", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadOrg(ByVal ServerName As String) As String
            Dim results() As Object = Me.Invoke("ReadOrg", New Object() {ServerName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadOrgAsync(ByVal ServerName As String)
            Me.ReadOrgAsync(ServerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadOrgAsync(ByVal ServerName As String, ByVal userState As Object)
            If (Me.ReadOrgOperationCompleted Is Nothing) Then
                Me.ReadOrgOperationCompleted = AddressOf Me.OnReadOrgOperationCompleted
            End If
            Me.InvokeAsync("ReadOrg", New Object() {ServerName}, Me.ReadOrgOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadOrgOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadOrgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadOrgCompleted(Me, New ReadOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getFlatFileProperties", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getFlatFileProperties(ByVal type As String, ByVal attribute As String) As String
            Dim results() As Object = Me.Invoke("getFlatFileProperties", New Object() {type, attribute})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getFlatFilePropertiesAsync(ByVal type As String, ByVal attribute As String)
            Me.getFlatFilePropertiesAsync(type, attribute, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getFlatFilePropertiesAsync(ByVal type As String, ByVal attribute As String, ByVal userState As Object)
            If (Me.getFlatFilePropertiesOperationCompleted Is Nothing) Then
                Me.getFlatFilePropertiesOperationCompleted = AddressOf Me.OngetFlatFilePropertiesOperationCompleted
            End If
            Me.InvokeAsync("getFlatFileProperties", New Object() {type, attribute}, Me.getFlatFilePropertiesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFlatFilePropertiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getFlatFilePropertiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFlatFilePropertiesCompleted(Me, New getFlatFilePropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/setFlatFileProperties", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setFlatFileProperties(ByVal type As String, ByVal attribute As String, ByVal value As String) As Boolean
            Dim results() As Object = Me.Invoke("setFlatFileProperties", New Object() {type, attribute, value})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub setFlatFilePropertiesAsync(ByVal type As String, ByVal attribute As String, ByVal value As String)
            Me.setFlatFilePropertiesAsync(type, attribute, value, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setFlatFilePropertiesAsync(ByVal type As String, ByVal attribute As String, ByVal value As String, ByVal userState As Object)
            If (Me.setFlatFilePropertiesOperationCompleted Is Nothing) Then
                Me.setFlatFilePropertiesOperationCompleted = AddressOf Me.OnsetFlatFilePropertiesOperationCompleted
            End If
            Me.InvokeAsync("setFlatFileProperties", New Object() {type, attribute, value}, Me.setFlatFilePropertiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetFlatFilePropertiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.setFlatFilePropertiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setFlatFilePropertiesCompleted(Me, New setFlatFilePropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveFlatFileMessage", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveFlatFileMessage(ByVal model As String, ByVal boxid As String, ByVal palletid As String, ByVal serialno As String, ByVal flatfile As String, ByVal sentby As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveFlatFileMessage", New Object() {model, boxid, palletid, serialno, flatfile, sentby})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveFlatFileMessageAsync(ByVal model As String, ByVal boxid As String, ByVal palletid As String, ByVal serialno As String, ByVal flatfile As String, ByVal sentby As String)
            Me.SaveFlatFileMessageAsync(model, boxid, palletid, serialno, flatfile, sentby, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveFlatFileMessageAsync(ByVal model As String, ByVal boxid As String, ByVal palletid As String, ByVal serialno As String, ByVal flatfile As String, ByVal sentby As String, ByVal userState As Object)
            If (Me.SaveFlatFileMessageOperationCompleted Is Nothing) Then
                Me.SaveFlatFileMessageOperationCompleted = AddressOf Me.OnSaveFlatFileMessageOperationCompleted
            End If
            Me.InvokeAsync("SaveFlatFileMessage", New Object() {model, boxid, palletid, serialno, flatfile, sentby}, Me.SaveFlatFileMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveFlatFileMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveFlatFileMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveFlatFileMessageCompleted(Me, New SaveFlatFileMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/saveFlatFileSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveFlatFileSN(ByVal FlatfileDS As System.Data.DataSet, ByVal parmsArray() As String) As Boolean
            Dim results() As Object = Me.Invoke("saveFlatFileSN", New Object() {FlatfileDS, parmsArray})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveFlatFileSNAsync(ByVal FlatfileDS As System.Data.DataSet, ByVal parmsArray() As String)
            Me.saveFlatFileSNAsync(FlatfileDS, parmsArray, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveFlatFileSNAsync(ByVal FlatfileDS As System.Data.DataSet, ByVal parmsArray() As String, ByVal userState As Object)
            If (Me.saveFlatFileSNOperationCompleted Is Nothing) Then
                Me.saveFlatFileSNOperationCompleted = AddressOf Me.OnsaveFlatFileSNOperationCompleted
            End If
            Me.InvokeAsync("saveFlatFileSN", New Object() {FlatfileDS, parmsArray}, Me.saveFlatFileSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveFlatFileSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveFlatFileSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveFlatFileSNCompleted(Me, New saveFlatFileSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetFlatfile", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFlatfile(ByVal model As String, ByVal BoxID As String, ByVal PalletID As String, ByVal SerialNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFlatfile", New Object() {model, BoxID, PalletID, SerialNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFlatfileAsync(ByVal model As String, ByVal BoxID As String, ByVal PalletID As String, ByVal SerialNo As String)
            Me.GetFlatfileAsync(model, BoxID, PalletID, SerialNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFlatfileAsync(ByVal model As String, ByVal BoxID As String, ByVal PalletID As String, ByVal SerialNo As String, ByVal userState As Object)
            If (Me.GetFlatfileOperationCompleted Is Nothing) Then
                Me.GetFlatfileOperationCompleted = AddressOf Me.OnGetFlatfileOperationCompleted
            End If
            Me.InvokeAsync("GetFlatfile", New Object() {model, BoxID, PalletID, SerialNo}, Me.GetFlatfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFlatfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFlatfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFlatfileCompleted(Me, New GetFlatfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckFlatFileSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckFlatFileSN(ByVal FlatfileDS As System.Data.DataSet, ByVal username As String) As String
            Dim results() As Object = Me.Invoke("CheckFlatFileSN", New Object() {FlatfileDS, username})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckFlatFileSNAsync(ByVal FlatfileDS As System.Data.DataSet, ByVal username As String)
            Me.CheckFlatFileSNAsync(FlatfileDS, username, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckFlatFileSNAsync(ByVal FlatfileDS As System.Data.DataSet, ByVal username As String, ByVal userState As Object)
            If (Me.CheckFlatFileSNOperationCompleted Is Nothing) Then
                Me.CheckFlatFileSNOperationCompleted = AddressOf Me.OnCheckFlatFileSNOperationCompleted
            End If
            Me.InvokeAsync("CheckFlatFileSN", New Object() {FlatfileDS, username}, Me.CheckFlatFileSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckFlatFileSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckFlatFileSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckFlatFileSNCompleted(Me, New CheckFlatFileSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMacAddress", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMacAddress() As String
            Dim results() As Object = Me.Invoke("GetMacAddress", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMacAddressAsync()
            Me.GetMacAddressAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMacAddressAsync(ByVal userState As Object)
            If (Me.GetMacAddressOperationCompleted Is Nothing) Then
                Me.GetMacAddressOperationCompleted = AddressOf Me.OnGetMacAddressOperationCompleted
            End If
            Me.InvokeAsync("GetMacAddress", New Object(-1) {}, Me.GetMacAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMacAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMacAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMacAddressCompleted(Me, New GetMacAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetResultAndPCBAList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetResultAndPCBAList(ByVal IntSN As String, ByVal Proc As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetResultAndPCBAList", New Object() {IntSN, Proc})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetResultAndPCBAListAsync(ByVal IntSN As String, ByVal Proc As String)
            Me.GetResultAndPCBAListAsync(IntSN, Proc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetResultAndPCBAListAsync(ByVal IntSN As String, ByVal Proc As String, ByVal userState As Object)
            If (Me.GetResultAndPCBAListOperationCompleted Is Nothing) Then
                Me.GetResultAndPCBAListOperationCompleted = AddressOf Me.OnGetResultAndPCBAListOperationCompleted
            End If
            Me.InvokeAsync("GetResultAndPCBAList", New Object() {IntSN, Proc}, Me.GetResultAndPCBAListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetResultAndPCBAListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetResultAndPCBAListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetResultAndPCBAListCompleted(Me, New GetResultAndPCBAListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IDUpdate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IDUpdate(ByVal IntSN As String, ByVal DJ As String, ByVal Model As String, ByVal TVANo As String, ByVal OrgCode As String, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("IDUpdate", New Object() {IntSN, DJ, Model, TVANo, OrgCode, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IDUpdateAsync(ByVal IntSN As String, ByVal DJ As String, ByVal Model As String, ByVal TVANo As String, ByVal OrgCode As String, ByVal user As String)
            Me.IDUpdateAsync(IntSN, DJ, Model, TVANo, OrgCode, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IDUpdateAsync(ByVal IntSN As String, ByVal DJ As String, ByVal Model As String, ByVal TVANo As String, ByVal OrgCode As String, ByVal user As String, ByVal userState As Object)
            If (Me.IDUpdateOperationCompleted Is Nothing) Then
                Me.IDUpdateOperationCompleted = AddressOf Me.OnIDUpdateOperationCompleted
            End If
            Me.InvokeAsync("IDUpdate", New Object() {IntSN, DJ, Model, TVANo, OrgCode, user}, Me.IDUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnIDUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.IDUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IDUpdateCompleted(Me, New IDUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPMatchingN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPMatchingN(ByVal DSWIP As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("WIPMatchingN", New Object() {DSWIP})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPMatchingNAsync(ByVal DSWIP As System.Data.DataSet)
            Me.WIPMatchingNAsync(DSWIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPMatchingNAsync(ByVal DSWIP As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIPMatchingNOperationCompleted Is Nothing) Then
                Me.WIPMatchingNOperationCompleted = AddressOf Me.OnWIPMatchingNOperationCompleted
            End If
            Me.InvokeAsync("WIPMatchingN", New Object() {DSWIP}, Me.WIPMatchingNOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPMatchingNOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPMatchingNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPMatchingNCompleted(Me, New WIPMatchingNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DetachMotherBoardValid", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DetachMotherBoardValid(ByVal motherBoardSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DetachMotherBoardValid", New Object() {motherBoardSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DetachMotherBoardValidAsync(ByVal motherBoardSN As String)
            Me.DetachMotherBoardValidAsync(motherBoardSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DetachMotherBoardValidAsync(ByVal motherBoardSN As String, ByVal userState As Object)
            If (Me.DetachMotherBoardValidOperationCompleted Is Nothing) Then
                Me.DetachMotherBoardValidOperationCompleted = AddressOf Me.OnDetachMotherBoardValidOperationCompleted
            End If
            Me.InvokeAsync("DetachMotherBoardValid", New Object() {motherBoardSN}, Me.DetachMotherBoardValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnDetachMotherBoardValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.DetachMotherBoardValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DetachMotherBoardValidCompleted(Me, New DetachMotherBoardValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Detach", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Detach(ByVal motherBoardSN As String, ByVal daugtherBoardSN As String, ByVal user As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Detach", New Object() {motherBoardSN, daugtherBoardSN, user})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DetachAsync(ByVal motherBoardSN As String, ByVal daugtherBoardSN As String, ByVal user As String)
            Me.DetachAsync(motherBoardSN, daugtherBoardSN, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DetachAsync(ByVal motherBoardSN As String, ByVal daugtherBoardSN As String, ByVal user As String, ByVal userState As Object)
            If (Me.DetachOperationCompleted Is Nothing) Then
                Me.DetachOperationCompleted = AddressOf Me.OnDetachOperationCompleted
            End If
            Me.InvokeAsync("Detach", New Object() {motherBoardSN, daugtherBoardSN, user}, Me.DetachOperationCompleted, userState)
        End Sub
        
        Private Sub OnDetachOperationCompleted(ByVal arg As Object)
            If (Not (Me.DetachCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DetachCompleted(Me, New DetachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SNListChangeBox", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SNListChangeBox(ByVal SNList As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("SNListChangeBox", New Object() {SNList})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SNListChangeBoxAsync(ByVal SNList As System.Data.DataSet)
            Me.SNListChangeBoxAsync(SNList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SNListChangeBoxAsync(ByVal SNList As System.Data.DataSet, ByVal userState As Object)
            If (Me.SNListChangeBoxOperationCompleted Is Nothing) Then
                Me.SNListChangeBoxOperationCompleted = AddressOf Me.OnSNListChangeBoxOperationCompleted
            End If
            Me.InvokeAsync("SNListChangeBox", New Object() {SNList}, Me.SNListChangeBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnSNListChangeBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.SNListChangeBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SNListChangeBoxCompleted(Me, New SNListChangeBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ChangeRevision", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeRevision(ByVal SNList As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("ChangeRevision", New Object() {SNList})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeRevisionAsync(ByVal SNList As System.Data.DataSet)
            Me.ChangeRevisionAsync(SNList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeRevisionAsync(ByVal SNList As System.Data.DataSet, ByVal userState As Object)
            If (Me.ChangeRevisionOperationCompleted Is Nothing) Then
                Me.ChangeRevisionOperationCompleted = AddressOf Me.OnChangeRevisionOperationCompleted
            End If
            Me.InvokeAsync("ChangeRevision", New Object() {SNList}, Me.ChangeRevisionOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeRevisionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeRevisionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeRevisionCompleted(Me, New ChangeRevisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getCartonInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCartonInfo(ByVal boxid As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCartonInfo", New Object() {boxid})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCartonInfoAsync(ByVal boxid As String)
            Me.getCartonInfoAsync(boxid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCartonInfoAsync(ByVal boxid As String, ByVal userState As Object)
            If (Me.getCartonInfoOperationCompleted Is Nothing) Then
                Me.getCartonInfoOperationCompleted = AddressOf Me.OngetCartonInfoOperationCompleted
            End If
            Me.InvokeAsync("getCartonInfo", New Object() {boxid}, Me.getCartonInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCartonInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCartonInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCartonInfoCompleted(Me, New getCartonInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetShipInfoByBoxIDSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipInfoByBoxIDSN(ByVal BoxIDSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetShipInfoByBoxIDSN", New Object() {BoxIDSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoByBoxIDSNAsync(ByVal BoxIDSN As String)
            Me.GetShipInfoByBoxIDSNAsync(BoxIDSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoByBoxIDSNAsync(ByVal BoxIDSN As String, ByVal userState As Object)
            If (Me.GetShipInfoByBoxIDSNOperationCompleted Is Nothing) Then
                Me.GetShipInfoByBoxIDSNOperationCompleted = AddressOf Me.OnGetShipInfoByBoxIDSNOperationCompleted
            End If
            Me.InvokeAsync("GetShipInfoByBoxIDSN", New Object() {BoxIDSN}, Me.GetShipInfoByBoxIDSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipInfoByBoxIDSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipInfoByBoxIDSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipInfoByBoxIDSNCompleted(Me, New GetShipInfoByBoxIDSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/StructureReadByPCBA", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StructureReadByPCBA(ByVal Model As String, ByVal PCBA As String, ByVal mode As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("StructureReadByPCBA", New Object() {Model, PCBA, mode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StructureReadByPCBAAsync(ByVal Model As String, ByVal PCBA As String, ByVal mode As Integer)
            Me.StructureReadByPCBAAsync(Model, PCBA, mode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StructureReadByPCBAAsync(ByVal Model As String, ByVal PCBA As String, ByVal mode As Integer, ByVal userState As Object)
            If (Me.StructureReadByPCBAOperationCompleted Is Nothing) Then
                Me.StructureReadByPCBAOperationCompleted = AddressOf Me.OnStructureReadByPCBAOperationCompleted
            End If
            Me.InvokeAsync("StructureReadByPCBA", New Object() {Model, PCBA, mode}, Me.StructureReadByPCBAOperationCompleted, userState)
        End Sub
        
        Private Sub OnStructureReadByPCBAOperationCompleted(ByVal arg As Object)
            If (Not (Me.StructureReadByPCBACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StructureReadByPCBACompleted(Me, New StructureReadByPCBACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BackToEeprom", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BackToEeprom(ByVal IntSN As String, ByVal ExtSN As String, ByVal Attribute As String) As String
            Dim results() As Object = Me.Invoke("BackToEeprom", New Object() {IntSN, ExtSN, Attribute})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BackToEepromAsync(ByVal IntSN As String, ByVal ExtSN As String, ByVal Attribute As String)
            Me.BackToEepromAsync(IntSN, ExtSN, Attribute, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BackToEepromAsync(ByVal IntSN As String, ByVal ExtSN As String, ByVal Attribute As String, ByVal userState As Object)
            If (Me.BackToEepromOperationCompleted Is Nothing) Then
                Me.BackToEepromOperationCompleted = AddressOf Me.OnBackToEepromOperationCompleted
            End If
            Me.InvokeAsync("BackToEeprom", New Object() {IntSN, ExtSN, Attribute}, Me.BackToEepromOperationCompleted, userState)
        End Sub
        
        Private Sub OnBackToEepromOperationCompleted(ByVal arg As Object)
            If (Not (Me.BackToEepromCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BackToEepromCompleted(Me, New BackToEepromCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetProductCPNbyModel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductCPNbyModel(ByVal Model As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProductCPNbyModel", New Object() {Model})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductCPNbyModelAsync(ByVal Model As String)
            Me.GetProductCPNbyModelAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductCPNbyModelAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.GetProductCPNbyModelOperationCompleted Is Nothing) Then
                Me.GetProductCPNbyModelOperationCompleted = AddressOf Me.OnGetProductCPNbyModelOperationCompleted
            End If
            Me.InvokeAsync("GetProductCPNbyModel", New Object() {Model}, Me.GetProductCPNbyModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductCPNbyModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductCPNbyModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductCPNbyModelCompleted(Me, New GetProductCPNbyModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetModelByExtSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetModelByExtSN(ByVal ExtSN As String) As String
            Dim results() As Object = Me.Invoke("GetModelByExtSN", New Object() {ExtSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetModelByExtSNAsync(ByVal ExtSN As String)
            Me.GetModelByExtSNAsync(ExtSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetModelByExtSNAsync(ByVal ExtSN As String, ByVal userState As Object)
            If (Me.GetModelByExtSNOperationCompleted Is Nothing) Then
                Me.GetModelByExtSNOperationCompleted = AddressOf Me.OnGetModelByExtSNOperationCompleted
            End If
            Me.InvokeAsync("GetModelByExtSN", New Object() {ExtSN}, Me.GetModelByExtSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetModelByExtSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetModelByExtSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModelByExtSNCompleted(Me, New GetModelByExtSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getShipmentByBoxid", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getShipmentByBoxid(ByVal boxid As String, ByVal user As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getShipmentByBoxid", New Object() {boxid, user})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getShipmentByBoxidAsync(ByVal boxid As String, ByVal user As String)
            Me.getShipmentByBoxidAsync(boxid, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getShipmentByBoxidAsync(ByVal boxid As String, ByVal user As String, ByVal userState As Object)
            If (Me.getShipmentByBoxidOperationCompleted Is Nothing) Then
                Me.getShipmentByBoxidOperationCompleted = AddressOf Me.OngetShipmentByBoxidOperationCompleted
            End If
            Me.InvokeAsync("getShipmentByBoxid", New Object() {boxid, user}, Me.getShipmentByBoxidOperationCompleted, userState)
        End Sub
        
        Private Sub OngetShipmentByBoxidOperationCompleted(ByVal arg As Object)
            If (Not (Me.getShipmentByBoxidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getShipmentByBoxidCompleted(Me, New getShipmentByBoxidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SFCDBoardIsValid", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SFCDBoardIsValid(ByVal intSN As String) As String
            Dim results() As Object = Me.Invoke("SFCDBoardIsValid", New Object() {intSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SFCDBoardIsValidAsync(ByVal intSN As String)
            Me.SFCDBoardIsValidAsync(intSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SFCDBoardIsValidAsync(ByVal intSN As String, ByVal userState As Object)
            If (Me.SFCDBoardIsValidOperationCompleted Is Nothing) Then
                Me.SFCDBoardIsValidOperationCompleted = AddressOf Me.OnSFCDBoardIsValidOperationCompleted
            End If
            Me.InvokeAsync("SFCDBoardIsValid", New Object() {intSN}, Me.SFCDBoardIsValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnSFCDBoardIsValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.SFCDBoardIsValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SFCDBoardIsValidCompleted(Me, New SFCDBoardIsValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveCLID(ByVal Items As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("SaveCLID", New Object() {Items})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveCLIDAsync(ByVal Items As System.Data.DataSet)
            Me.SaveCLIDAsync(Items, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveCLIDAsync(ByVal Items As System.Data.DataSet, ByVal userState As Object)
            If (Me.SaveCLIDOperationCompleted Is Nothing) Then
                Me.SaveCLIDOperationCompleted = AddressOf Me.OnSaveCLIDOperationCompleted
            End If
            Me.InvokeAsync("SaveCLID", New Object() {Items}, Me.SaveCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCLIDCompleted(Me, New SaveCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_CusTableLists", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_CusTableLists(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_CusTableLists", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_CusTableListsAsync(ByVal LoginData As ERPLogin)
            Me.Get_CusTableListsAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_CusTableListsAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_CusTableListsOperationCompleted Is Nothing) Then
                Me.Get_CusTableListsOperationCompleted = AddressOf Me.OnGet_CusTableListsOperationCompleted
            End If
            Me.InvokeAsync("Get_CusTableLists", New Object() {LoginData}, Me.Get_CusTableListsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_CusTableListsOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_CusTableListsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_CusTableListsCompleted(Me, New Get_CusTableListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetEmplogeeID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmplogeeID(ByVal AccessCardID As String) As String
            Dim results() As Object = Me.Invoke("GetEmplogeeID", New Object() {AccessCardID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmplogeeIDAsync(ByVal AccessCardID As String)
            Me.GetEmplogeeIDAsync(AccessCardID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmplogeeIDAsync(ByVal AccessCardID As String, ByVal userState As Object)
            If (Me.GetEmplogeeIDOperationCompleted Is Nothing) Then
                Me.GetEmplogeeIDOperationCompleted = AddressOf Me.OnGetEmplogeeIDOperationCompleted
            End If
            Me.InvokeAsync("GetEmplogeeID", New Object() {AccessCardID}, Me.GetEmplogeeIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmplogeeIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmplogeeIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmplogeeIDCompleted(Me, New GetEmplogeeIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDept", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDept(ByVal AccessCardID As String) As String
            Dim results() As Object = Me.Invoke("GetDept", New Object() {AccessCardID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeptAsync(ByVal AccessCardID As String)
            Me.GetDeptAsync(AccessCardID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeptAsync(ByVal AccessCardID As String, ByVal userState As Object)
            If (Me.GetDeptOperationCompleted Is Nothing) Then
                Me.GetDeptOperationCompleted = AddressOf Me.OnGetDeptOperationCompleted
            End If
            Me.InvokeAsync("GetDept", New Object() {AccessCardID}, Me.GetDeptOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeptOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeptCompleted(Me, New GetDeptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CopyCardInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyCardInfo() As Boolean
            Dim results() As Object = Me.Invoke("CopyCardInfo", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyCardInfoAsync()
            Me.CopyCardInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCardInfoAsync(ByVal userState As Object)
            If (Me.CopyCardInfoOperationCompleted Is Nothing) Then
                Me.CopyCardInfoOperationCompleted = AddressOf Me.OnCopyCardInfoOperationCompleted
            End If
            Me.InvokeAsync("CopyCardInfo", New Object(-1) {}, Me.CopyCardInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCardInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCardInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCardInfoCompleted(Me, New CopyCardInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CopyCardInfoZS", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyCardInfoZS() As Boolean
            Dim results() As Object = Me.Invoke("CopyCardInfoZS", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyCardInfoZSAsync()
            Me.CopyCardInfoZSAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyCardInfoZSAsync(ByVal userState As Object)
            If (Me.CopyCardInfoZSOperationCompleted Is Nothing) Then
                Me.CopyCardInfoZSOperationCompleted = AddressOf Me.OnCopyCardInfoZSOperationCompleted
            End If
            Me.InvokeAsync("CopyCardInfoZS", New Object(-1) {}, Me.CopyCardInfoZSOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyCardInfoZSOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCardInfoZSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCardInfoZSCompleted(Me, New CopyCardInfoZSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetHRTrainingInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHRTrainingInfo(ByVal ATEMachine As String, ByVal employeeID As String) As String
            Dim results() As Object = Me.Invoke("GetHRTrainingInfo", New Object() {ATEMachine, employeeID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHRTrainingInfoAsync(ByVal ATEMachine As String, ByVal employeeID As String)
            Me.GetHRTrainingInfoAsync(ATEMachine, employeeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHRTrainingInfoAsync(ByVal ATEMachine As String, ByVal employeeID As String, ByVal userState As Object)
            If (Me.GetHRTrainingInfoOperationCompleted Is Nothing) Then
                Me.GetHRTrainingInfoOperationCompleted = AddressOf Me.OnGetHRTrainingInfoOperationCompleted
            End If
            Me.InvokeAsync("GetHRTrainingInfo", New Object() {ATEMachine, employeeID}, Me.GetHRTrainingInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHRTrainingInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHRTrainingInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHRTrainingInfoCompleted(Me, New GetHRTrainingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetLocks", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLocks() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLocks", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLocksAsync()
            Me.GetLocksAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLocksAsync(ByVal userState As Object)
            If (Me.GetLocksOperationCompleted Is Nothing) Then
                Me.GetLocksOperationCompleted = AddressOf Me.OnGetLocksOperationCompleted
            End If
            Me.InvokeAsync("GetLocks", New Object(-1) {}, Me.GetLocksOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLocksOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLocksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLocksCompleted(Me, New GetLocksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateLockByID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLockByID(ByVal lockId As String, ByVal symptom As String, ByVal te As String, ByVal pe As String, ByVal pqe As String, ByVal other As String, ByVal pbr As String, ByVal remarks As String) As String
            Dim results() As Object = Me.Invoke("UpdateLockByID", New Object() {lockId, symptom, te, pe, pqe, other, pbr, remarks})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLockByIDAsync(ByVal lockId As String, ByVal symptom As String, ByVal te As String, ByVal pe As String, ByVal pqe As String, ByVal other As String, ByVal pbr As String, ByVal remarks As String)
            Me.UpdateLockByIDAsync(lockId, symptom, te, pe, pqe, other, pbr, remarks, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLockByIDAsync(ByVal lockId As String, ByVal symptom As String, ByVal te As String, ByVal pe As String, ByVal pqe As String, ByVal other As String, ByVal pbr As String, ByVal remarks As String, ByVal userState As Object)
            If (Me.UpdateLockByIDOperationCompleted Is Nothing) Then
                Me.UpdateLockByIDOperationCompleted = AddressOf Me.OnUpdateLockByIDOperationCompleted
            End If
            Me.InvokeAsync("UpdateLockByID", New Object() {lockId, symptom, te, pe, pqe, other, pbr, remarks}, Me.UpdateLockByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLockByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLockByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLockByIDCompleted(Me, New UpdateLockByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UnlockdByID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnlockdByID(ByVal lockId As String, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("UnlockdByID", New Object() {lockId, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnlockdByIDAsync(ByVal lockId As String, ByVal user As String)
            Me.UnlockdByIDAsync(lockId, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnlockdByIDAsync(ByVal lockId As String, ByVal user As String, ByVal userState As Object)
            If (Me.UnlockdByIDOperationCompleted Is Nothing) Then
                Me.UnlockdByIDOperationCompleted = AddressOf Me.OnUnlockdByIDOperationCompleted
            End If
            Me.InvokeAsync("UnlockdByID", New Object() {lockId, user}, Me.UnlockdByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnlockdByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnlockdByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnlockdByIDCompleted(Me, New UnlockdByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveAndUnlockdByID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveAndUnlockdByID(ByVal lockId As String, ByVal symptom As String, ByVal te As String, ByVal pe As String, ByVal pqe As String, ByVal other As String, ByVal pbr As String, ByVal remarks As String, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("SaveAndUnlockdByID", New Object() {lockId, symptom, te, pe, pqe, other, pbr, remarks, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveAndUnlockdByIDAsync(ByVal lockId As String, ByVal symptom As String, ByVal te As String, ByVal pe As String, ByVal pqe As String, ByVal other As String, ByVal pbr As String, ByVal remarks As String, ByVal user As String)
            Me.SaveAndUnlockdByIDAsync(lockId, symptom, te, pe, pqe, other, pbr, remarks, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveAndUnlockdByIDAsync(ByVal lockId As String, ByVal symptom As String, ByVal te As String, ByVal pe As String, ByVal pqe As String, ByVal other As String, ByVal pbr As String, ByVal remarks As String, ByVal user As String, ByVal userState As Object)
            If (Me.SaveAndUnlockdByIDOperationCompleted Is Nothing) Then
                Me.SaveAndUnlockdByIDOperationCompleted = AddressOf Me.OnSaveAndUnlockdByIDOperationCompleted
            End If
            Me.InvokeAsync("SaveAndUnlockdByID", New Object() {lockId, symptom, te, pe, pqe, other, pbr, remarks, user}, Me.SaveAndUnlockdByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveAndUnlockdByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveAndUnlockdByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveAndUnlockdByIDCompleted(Me, New SaveAndUnlockdByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveSmartCardHistory", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveSmartCardHistory(ByVal cardParams() As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("SaveSmartCardHistory", New Object() {cardParams})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveSmartCardHistoryAsync(ByVal cardParams() As String)
            Me.SaveSmartCardHistoryAsync(cardParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveSmartCardHistoryAsync(ByVal cardParams() As String, ByVal userState As Object)
            If (Me.SaveSmartCardHistoryOperationCompleted Is Nothing) Then
                Me.SaveSmartCardHistoryOperationCompleted = AddressOf Me.OnSaveSmartCardHistoryOperationCompleted
            End If
            Me.InvokeAsync("SaveSmartCardHistory", New Object() {cardParams}, Me.SaveSmartCardHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveSmartCardHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveSmartCardHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveSmartCardHistoryCompleted(Me, New SaveSmartCardHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSmartCardHistory", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSmartCardHistory(ByVal IntSN As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetSmartCardHistory", New Object() {IntSN})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSmartCardHistoryAsync(ByVal IntSN As String)
            Me.GetSmartCardHistoryAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSmartCardHistoryAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.GetSmartCardHistoryOperationCompleted Is Nothing) Then
                Me.GetSmartCardHistoryOperationCompleted = AddressOf Me.OnGetSmartCardHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetSmartCardHistory", New Object() {IntSN}, Me.GetSmartCardHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSmartCardHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSmartCardHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSmartCardHistoryCompleted(Me, New GetSmartCardHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadFlow", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadFlow(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadFlow", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadFlowAsync(ByVal IntSN As String)
            Me.ReadFlowAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadFlowAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.ReadFlowOperationCompleted Is Nothing) Then
                Me.ReadFlowOperationCompleted = AddressOf Me.OnReadFlowOperationCompleted
            End If
            Me.InvokeAsync("ReadFlow", New Object() {IntSN}, Me.ReadFlowOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadFlowOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadFlowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadFlowCompleted(Me, New ReadFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetEquipmentDetailInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEquipmentDetailInfo(ByVal eqptId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEquipmentDetailInfo", New Object() {eqptId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEquipmentDetailInfoAsync(ByVal eqptId As String)
            Me.GetEquipmentDetailInfoAsync(eqptId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEquipmentDetailInfoAsync(ByVal eqptId As String, ByVal userState As Object)
            If (Me.GetEquipmentDetailInfoOperationCompleted Is Nothing) Then
                Me.GetEquipmentDetailInfoOperationCompleted = AddressOf Me.OnGetEquipmentDetailInfoOperationCompleted
            End If
            Me.InvokeAsync("GetEquipmentDetailInfo", New Object() {eqptId}, Me.GetEquipmentDetailInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEquipmentDetailInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEquipmentDetailInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEquipmentDetailInfoCompleted(Me, New GetEquipmentDetailInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdatePMdata", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePMdata(ByVal productModel As ProductModel, ByVal ds As System.Data.DataSet) As String()
            Dim results() As Object = Me.Invoke("UpdatePMdata", New Object() {productModel, ds})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePMdataAsync(ByVal productModel As ProductModel, ByVal ds As System.Data.DataSet)
            Me.UpdatePMdataAsync(productModel, ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePMdataAsync(ByVal productModel As ProductModel, ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdatePMdataOperationCompleted Is Nothing) Then
                Me.UpdatePMdataOperationCompleted = AddressOf Me.OnUpdatePMdataOperationCompleted
            End If
            Me.InvokeAsync("UpdatePMdata", New Object() {productModel, ds}, Me.UpdatePMdataOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePMdataOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePMdataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePMdataCompleted(Me, New UpdatePMdataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ModelDefined", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModelDefined(ByVal ModelNo As String) As String
            Dim results() As Object = Me.Invoke("ModelDefined", New Object() {ModelNo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModelDefinedAsync(ByVal ModelNo As String)
            Me.ModelDefinedAsync(ModelNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModelDefinedAsync(ByVal ModelNo As String, ByVal userState As Object)
            If (Me.ModelDefinedOperationCompleted Is Nothing) Then
                Me.ModelDefinedOperationCompleted = AddressOf Me.OnModelDefinedOperationCompleted
            End If
            Me.InvokeAsync("ModelDefined", New Object() {ModelNo}, Me.ModelDefinedOperationCompleted, userState)
        End Sub
        
        Private Sub OnModelDefinedOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModelDefinedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModelDefinedCompleted(Me, New ModelDefinedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ModelStructure", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModelStructure(ByVal ModelNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ModelStructure", New Object() {ModelNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModelStructureAsync(ByVal ModelNo As String)
            Me.ModelStructureAsync(ModelNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModelStructureAsync(ByVal ModelNo As String, ByVal userState As Object)
            If (Me.ModelStructureOperationCompleted Is Nothing) Then
                Me.ModelStructureOperationCompleted = AddressOf Me.OnModelStructureOperationCompleted
            End If
            Me.InvokeAsync("ModelStructure", New Object() {ModelNo}, Me.ModelStructureOperationCompleted, userState)
        End Sub
        
        Private Sub OnModelStructureOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModelStructureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModelStructureCompleted(Me, New ModelStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ProdQty", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProdQty(ByVal DJ As String, ByVal PCBA As String, ByVal OrgCode As String) As Integer
            Dim results() As Object = Me.Invoke("ProdQty", New Object() {DJ, PCBA, OrgCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProdQtyAsync(ByVal DJ As String, ByVal PCBA As String, ByVal OrgCode As String)
            Me.ProdQtyAsync(DJ, PCBA, OrgCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProdQtyAsync(ByVal DJ As String, ByVal PCBA As String, ByVal OrgCode As String, ByVal userState As Object)
            If (Me.ProdQtyOperationCompleted Is Nothing) Then
                Me.ProdQtyOperationCompleted = AddressOf Me.OnProdQtyOperationCompleted
            End If
            Me.InvokeAsync("ProdQty", New Object() {DJ, PCBA, OrgCode}, Me.ProdQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnProdQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProdQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProdQtyCompleted(Me, New ProdQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDJMatchedQty", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDJMatchedQty(ByVal DJ As String, ByVal PCBA As String, ByVal OrgCode As String) As Integer
            Dim results() As Object = Me.Invoke("GetDJMatchedQty", New Object() {DJ, PCBA, OrgCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDJMatchedQtyAsync(ByVal DJ As String, ByVal PCBA As String, ByVal OrgCode As String)
            Me.GetDJMatchedQtyAsync(DJ, PCBA, OrgCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDJMatchedQtyAsync(ByVal DJ As String, ByVal PCBA As String, ByVal OrgCode As String, ByVal userState As Object)
            If (Me.GetDJMatchedQtyOperationCompleted Is Nothing) Then
                Me.GetDJMatchedQtyOperationCompleted = AddressOf Me.OnGetDJMatchedQtyOperationCompleted
            End If
            Me.InvokeAsync("GetDJMatchedQty", New Object() {DJ, PCBA, OrgCode}, Me.GetDJMatchedQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDJMatchedQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDJMatchedQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDJMatchedQtyCompleted(Me, New GetDJMatchedQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/InsertPoQty", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertPoQty(ByVal OrgCode As String, ByVal DJ As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Integer) As Boolean
            Dim results() As Object = Me.Invoke("InsertPoQty", New Object() {OrgCode, DJ, Model, PCBA, Qty})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertPoQtyAsync(ByVal OrgCode As String, ByVal DJ As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Integer)
            Me.InsertPoQtyAsync(OrgCode, DJ, Model, PCBA, Qty, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertPoQtyAsync(ByVal OrgCode As String, ByVal DJ As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Integer, ByVal userState As Object)
            If (Me.InsertPoQtyOperationCompleted Is Nothing) Then
                Me.InsertPoQtyOperationCompleted = AddressOf Me.OnInsertPoQtyOperationCompleted
            End If
            Me.InvokeAsync("InsertPoQty", New Object() {OrgCode, DJ, Model, PCBA, Qty}, Me.InsertPoQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertPoQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertPoQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertPoQtyCompleted(Me, New InsertPoQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CountPoQty", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CountPoQty(ByVal OrgCode As String, ByVal DJ As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Integer, ByVal ModelRev As String) As Boolean
            Dim results() As Object = Me.Invoke("CountPoQty", New Object() {OrgCode, DJ, Model, PCBA, Qty, ModelRev})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CountPoQtyAsync(ByVal OrgCode As String, ByVal DJ As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Integer, ByVal ModelRev As String)
            Me.CountPoQtyAsync(OrgCode, DJ, Model, PCBA, Qty, ModelRev, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CountPoQtyAsync(ByVal OrgCode As String, ByVal DJ As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Integer, ByVal ModelRev As String, ByVal userState As Object)
            If (Me.CountPoQtyOperationCompleted Is Nothing) Then
                Me.CountPoQtyOperationCompleted = AddressOf Me.OnCountPoQtyOperationCompleted
            End If
            Me.InvokeAsync("CountPoQty", New Object() {OrgCode, DJ, Model, PCBA, Qty, ModelRev}, Me.CountPoQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnCountPoQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.CountPoQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CountPoQtyCompleted(Me, New CountPoQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CountPoQtyII", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CountPoQtyII(ByVal OrgCode As String, ByVal DJ As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Integer, ByVal ModelRev As String, ByVal DJType As String) As Boolean
            Dim results() As Object = Me.Invoke("CountPoQtyII", New Object() {OrgCode, DJ, Model, PCBA, Qty, ModelRev, DJType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CountPoQtyIIAsync(ByVal OrgCode As String, ByVal DJ As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Integer, ByVal ModelRev As String, ByVal DJType As String)
            Me.CountPoQtyIIAsync(OrgCode, DJ, Model, PCBA, Qty, ModelRev, DJType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CountPoQtyIIAsync(ByVal OrgCode As String, ByVal DJ As String, ByVal Model As String, ByVal PCBA As String, ByVal Qty As Integer, ByVal ModelRev As String, ByVal DJType As String, ByVal userState As Object)
            If (Me.CountPoQtyIIOperationCompleted Is Nothing) Then
                Me.CountPoQtyIIOperationCompleted = AddressOf Me.OnCountPoQtyIIOperationCompleted
            End If
            Me.InvokeAsync("CountPoQtyII", New Object() {OrgCode, DJ, Model, PCBA, Qty, ModelRev, DJType}, Me.CountPoQtyIIOperationCompleted, userState)
        End Sub
        
        Private Sub OnCountPoQtyIIOperationCompleted(ByVal arg As Object)
            If (Not (Me.CountPoQtyIICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CountPoQtyIICompleted(Me, New CountPoQtyIICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IntSNIsValid", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IntSNIsValid(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("IntSNIsValid", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IntSNIsValidAsync(ByVal IntSN As String)
            Me.IntSNIsValidAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IntSNIsValidAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.IntSNIsValidOperationCompleted Is Nothing) Then
                Me.IntSNIsValidOperationCompleted = AddressOf Me.OnIntSNIsValidOperationCompleted
            End If
            Me.InvokeAsync("IntSNIsValid", New Object() {IntSN}, Me.IntSNIsValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnIntSNIsValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.IntSNIsValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IntSNIsValidCompleted(Me, New IntSNIsValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadPOQtyByPOAndPCBA", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadPOQtyByPOAndPCBA(ByVal PO As String, ByVal PCBA As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadPOQtyByPOAndPCBA", New Object() {PO, PCBA})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadPOQtyByPOAndPCBAAsync(ByVal PO As String, ByVal PCBA As String)
            Me.ReadPOQtyByPOAndPCBAAsync(PO, PCBA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadPOQtyByPOAndPCBAAsync(ByVal PO As String, ByVal PCBA As String, ByVal userState As Object)
            If (Me.ReadPOQtyByPOAndPCBAOperationCompleted Is Nothing) Then
                Me.ReadPOQtyByPOAndPCBAOperationCompleted = AddressOf Me.OnReadPOQtyByPOAndPCBAOperationCompleted
            End If
            Me.InvokeAsync("ReadPOQtyByPOAndPCBA", New Object() {PO, PCBA}, Me.ReadPOQtyByPOAndPCBAOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadPOQtyByPOAndPCBAOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadPOQtyByPOAndPCBACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadPOQtyByPOAndPCBACompleted(Me, New ReadPOQtyByPOAndPCBACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PCBARouting", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PCBARouting(ByVal ModelNo As String, ByVal PCBA As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PCBARouting", New Object() {ModelNo, PCBA})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PCBARoutingAsync(ByVal ModelNo As String, ByVal PCBA As String)
            Me.PCBARoutingAsync(ModelNo, PCBA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PCBARoutingAsync(ByVal ModelNo As String, ByVal PCBA As String, ByVal userState As Object)
            If (Me.PCBARoutingOperationCompleted Is Nothing) Then
                Me.PCBARoutingOperationCompleted = AddressOf Me.OnPCBARoutingOperationCompleted
            End If
            Me.InvokeAsync("PCBARouting", New Object() {ModelNo, PCBA}, Me.PCBARoutingOperationCompleted, userState)
        End Sub
        
        Private Sub OnPCBARoutingOperationCompleted(ByVal arg As Object)
            If (Not (Me.PCBARoutingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PCBARoutingCompleted(Me, New PCBARoutingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PCBListOfRework", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PCBListOfRework(ByVal WIPID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PCBListOfRework", New Object() {WIPID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PCBListOfReworkAsync(ByVal WIPID As String)
            Me.PCBListOfReworkAsync(WIPID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PCBListOfReworkAsync(ByVal WIPID As String, ByVal userState As Object)
            If (Me.PCBListOfReworkOperationCompleted Is Nothing) Then
                Me.PCBListOfReworkOperationCompleted = AddressOf Me.OnPCBListOfReworkOperationCompleted
            End If
            Me.InvokeAsync("PCBListOfRework", New Object() {WIPID}, Me.PCBListOfReworkOperationCompleted, userState)
        End Sub
        
        Private Sub OnPCBListOfReworkOperationCompleted(ByVal arg As Object)
            If (Not (Me.PCBListOfReworkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PCBListOfReworkCompleted(Me, New PCBListOfReworkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPMatching1", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPMatching1(ByVal DSWIP As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("WIPMatching1", New Object() {DSWIP})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPMatching1Async(ByVal DSWIP As System.Data.DataSet)
            Me.WIPMatching1Async(DSWIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPMatching1Async(ByVal DSWIP As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIPMatching1OperationCompleted Is Nothing) Then
                Me.WIPMatching1OperationCompleted = AddressOf Me.OnWIPMatching1OperationCompleted
            End If
            Me.InvokeAsync("WIPMatching1", New Object() {DSWIP}, Me.WIPMatching1OperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPMatching1OperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPMatching1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPMatching1Completed(Me, New WIPMatching1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPVisualInspection", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPVisualInspection(ByVal DSWIP As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("WIPVisualInspection", New Object() {DSWIP})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPVisualInspectionAsync(ByVal DSWIP As System.Data.DataSet)
            Me.WIPVisualInspectionAsync(DSWIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPVisualInspectionAsync(ByVal DSWIP As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIPVisualInspectionOperationCompleted Is Nothing) Then
                Me.WIPVisualInspectionOperationCompleted = AddressOf Me.OnWIPVisualInspectionOperationCompleted
            End If
            Me.InvokeAsync("WIPVisualInspection", New Object() {DSWIP}, Me.WIPVisualInspectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPVisualInspectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPVisualInspectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPVisualInspectionCompleted(Me, New WIPVisualInspectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPBurnIn", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPBurnIn(ByVal DSWIP As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("WIPBurnIn", New Object() {DSWIP})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPBurnInAsync(ByVal DSWIP As System.Data.DataSet)
            Me.WIPBurnInAsync(DSWIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPBurnInAsync(ByVal DSWIP As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIPBurnInOperationCompleted Is Nothing) Then
                Me.WIPBurnInOperationCompleted = AddressOf Me.OnWIPBurnInOperationCompleted
            End If
            Me.InvokeAsync("WIPBurnIn", New Object() {DSWIP}, Me.WIPBurnInOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPBurnInOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPBurnInCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPBurnInCompleted(Me, New WIPBurnInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPIDSwop", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPIDSwop(ByVal DSWIP As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("WIPIDSwop", New Object() {DSWIP})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPIDSwopAsync(ByVal DSWIP As System.Data.DataSet)
            Me.WIPIDSwopAsync(DSWIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPIDSwopAsync(ByVal DSWIP As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIPIDSwopOperationCompleted Is Nothing) Then
                Me.WIPIDSwopOperationCompleted = AddressOf Me.OnWIPIDSwopOperationCompleted
            End If
            Me.InvokeAsync("WIPIDSwop", New Object() {DSWIP}, Me.WIPIDSwopOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPIDSwopOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPIDSwopCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPIDSwopCompleted(Me, New WIPIDSwopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPIDSwopSimplify", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPIDSwopSimplify(ByVal originalID As String, ByVal newID As String, ByVal isForce As Boolean, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("WIPIDSwopSimplify", New Object() {originalID, newID, isForce, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPIDSwopSimplifyAsync(ByVal originalID As String, ByVal newID As String, ByVal isForce As Boolean, ByVal user As String)
            Me.WIPIDSwopSimplifyAsync(originalID, newID, isForce, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPIDSwopSimplifyAsync(ByVal originalID As String, ByVal newID As String, ByVal isForce As Boolean, ByVal user As String, ByVal userState As Object)
            If (Me.WIPIDSwopSimplifyOperationCompleted Is Nothing) Then
                Me.WIPIDSwopSimplifyOperationCompleted = AddressOf Me.OnWIPIDSwopSimplifyOperationCompleted
            End If
            Me.InvokeAsync("WIPIDSwopSimplify", New Object() {originalID, newID, isForce, user}, Me.WIPIDSwopSimplifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPIDSwopSimplifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPIDSwopSimplifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPIDSwopSimplifyCompleted(Me, New WIPIDSwopSimplifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPModelSwop", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPModelSwop(ByVal DSWIP As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("WIPModelSwop", New Object() {DSWIP})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPModelSwopAsync(ByVal DSWIP As System.Data.DataSet)
            Me.WIPModelSwopAsync(DSWIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPModelSwopAsync(ByVal DSWIP As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIPModelSwopOperationCompleted Is Nothing) Then
                Me.WIPModelSwopOperationCompleted = AddressOf Me.OnWIPModelSwopOperationCompleted
            End If
            Me.InvokeAsync("WIPModelSwop", New Object() {DSWIP}, Me.WIPModelSwopOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPModelSwopOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPModelSwopCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPModelSwopCompleted(Me, New WIPModelSwopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getPCBAinWIPHeader", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPCBAinWIPHeader(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("getPCBAinWIPHeader", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPCBAinWIPHeaderAsync(ByVal IntSN As String)
            Me.getPCBAinWIPHeaderAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPCBAinWIPHeaderAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.getPCBAinWIPHeaderOperationCompleted Is Nothing) Then
                Me.getPCBAinWIPHeaderOperationCompleted = AddressOf Me.OngetPCBAinWIPHeaderOperationCompleted
            End If
            Me.InvokeAsync("getPCBAinWIPHeader", New Object() {IntSN}, Me.getPCBAinWIPHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPCBAinWIPHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPCBAinWIPHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPCBAinWIPHeaderCompleted(Me, New getPCBAinWIPHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/MI_getPCBAinWIPHeader", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MI_getPCBAinWIPHeader(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("MI_getPCBAinWIPHeader", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MI_getPCBAinWIPHeaderAsync(ByVal IntSN As String)
            Me.MI_getPCBAinWIPHeaderAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MI_getPCBAinWIPHeaderAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.MI_getPCBAinWIPHeaderOperationCompleted Is Nothing) Then
                Me.MI_getPCBAinWIPHeaderOperationCompleted = AddressOf Me.OnMI_getPCBAinWIPHeaderOperationCompleted
            End If
            Me.InvokeAsync("MI_getPCBAinWIPHeader", New Object() {IntSN}, Me.MI_getPCBAinWIPHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnMI_getPCBAinWIPHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.MI_getPCBAinWIPHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MI_getPCBAinWIPHeaderCompleted(Me, New MI_getPCBAinWIPHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DBoardIsValid", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DBoardIsValid(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("DBoardIsValid", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DBoardIsValidAsync(ByVal IntSN As String)
            Me.DBoardIsValidAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DBoardIsValidAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.DBoardIsValidOperationCompleted Is Nothing) Then
                Me.DBoardIsValidOperationCompleted = AddressOf Me.OnDBoardIsValidOperationCompleted
            End If
            Me.InvokeAsync("DBoardIsValid", New Object() {IntSN}, Me.DBoardIsValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnDBoardIsValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.DBoardIsValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DBoardIsValidCompleted(Me, New DBoardIsValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ModelConfiguratorSNValid", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModelConfiguratorSNValid(ByVal SN As String) As String
            Dim results() As Object = Me.Invoke("ModelConfiguratorSNValid", New Object() {SN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModelConfiguratorSNValidAsync(ByVal SN As String)
            Me.ModelConfiguratorSNValidAsync(SN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModelConfiguratorSNValidAsync(ByVal SN As String, ByVal userState As Object)
            If (Me.ModelConfiguratorSNValidOperationCompleted Is Nothing) Then
                Me.ModelConfiguratorSNValidOperationCompleted = AddressOf Me.OnModelConfiguratorSNValidOperationCompleted
            End If
            Me.InvokeAsync("ModelConfiguratorSNValid", New Object() {SN}, Me.ModelConfiguratorSNValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnModelConfiguratorSNValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModelConfiguratorSNValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModelConfiguratorSNValidCompleted(Me, New ModelConfiguratorSNValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IntSNPattern", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IntSNPattern(ByVal Model As String) As String
            Dim results() As Object = Me.Invoke("IntSNPattern", New Object() {Model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IntSNPatternAsync(ByVal Model As String)
            Me.IntSNPatternAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IntSNPatternAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.IntSNPatternOperationCompleted Is Nothing) Then
                Me.IntSNPatternOperationCompleted = AddressOf Me.OnIntSNPatternOperationCompleted
            End If
            Me.InvokeAsync("IntSNPattern", New Object() {Model}, Me.IntSNPatternOperationCompleted, userState)
        End Sub
        
        Private Sub OnIntSNPatternOperationCompleted(ByVal arg As Object)
            If (Not (Me.IntSNPatternCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IntSNPatternCompleted(Me, New IntSNPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetOrderInfoFromOracle", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderInfoFromOracle(ByVal OrderNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOrderInfoFromOracle", New Object() {OrderNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderInfoFromOracleAsync(ByVal OrderNo As String)
            Me.GetOrderInfoFromOracleAsync(OrderNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderInfoFromOracleAsync(ByVal OrderNo As String, ByVal userState As Object)
            If (Me.GetOrderInfoFromOracleOperationCompleted Is Nothing) Then
                Me.GetOrderInfoFromOracleOperationCompleted = AddressOf Me.OnGetOrderInfoFromOracleOperationCompleted
            End If
            Me.InvokeAsync("GetOrderInfoFromOracle", New Object() {OrderNo}, Me.GetOrderInfoFromOracleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderInfoFromOracleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderInfoFromOracleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderInfoFromOracleCompleted(Me, New GetOrderInfoFromOracleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ComponentReplacement", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ComponentReplacement(ByVal DSWIP As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("ComponentReplacement", New Object() {DSWIP})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ComponentReplacementAsync(ByVal DSWIP As System.Data.DataSet)
            Me.ComponentReplacementAsync(DSWIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ComponentReplacementAsync(ByVal DSWIP As System.Data.DataSet, ByVal userState As Object)
            If (Me.ComponentReplacementOperationCompleted Is Nothing) Then
                Me.ComponentReplacementOperationCompleted = AddressOf Me.OnComponentReplacementOperationCompleted
            End If
            Me.InvokeAsync("ComponentReplacement", New Object() {DSWIP}, Me.ComponentReplacementOperationCompleted, userState)
        End Sub
        
        Private Sub OnComponentReplacementOperationCompleted(ByVal arg As Object)
            If (Not (Me.ComponentReplacementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ComponentReplacementCompleted(Me, New ComponentReplacementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckCompIssueToDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckCompIssueToDJ(ByVal DJ As String) As String
            Dim results() As Object = Me.Invoke("CheckCompIssueToDJ", New Object() {DJ})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckCompIssueToDJAsync(ByVal DJ As String)
            Me.CheckCompIssueToDJAsync(DJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckCompIssueToDJAsync(ByVal DJ As String, ByVal userState As Object)
            If (Me.CheckCompIssueToDJOperationCompleted Is Nothing) Then
                Me.CheckCompIssueToDJOperationCompleted = AddressOf Me.OnCheckCompIssueToDJOperationCompleted
            End If
            Me.InvokeAsync("CheckCompIssueToDJ", New Object() {DJ}, Me.CheckCompIssueToDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckCompIssueToDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckCompIssueToDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckCompIssueToDJCompleted(Me, New CheckCompIssueToDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/MatchingAccount", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MatchingAccount(ByVal DJ As String, ByVal OrgCode As String, ByVal PCBA As String, ByVal Allow As Integer, ByVal PanelSize As Integer) As Boolean
            Dim results() As Object = Me.Invoke("MatchingAccount", New Object() {DJ, OrgCode, PCBA, Allow, PanelSize})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MatchingAccountAsync(ByVal DJ As String, ByVal OrgCode As String, ByVal PCBA As String, ByVal Allow As Integer, ByVal PanelSize As Integer)
            Me.MatchingAccountAsync(DJ, OrgCode, PCBA, Allow, PanelSize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MatchingAccountAsync(ByVal DJ As String, ByVal OrgCode As String, ByVal PCBA As String, ByVal Allow As Integer, ByVal PanelSize As Integer, ByVal userState As Object)
            If (Me.MatchingAccountOperationCompleted Is Nothing) Then
                Me.MatchingAccountOperationCompleted = AddressOf Me.OnMatchingAccountOperationCompleted
            End If
            Me.InvokeAsync("MatchingAccount", New Object() {DJ, OrgCode, PCBA, Allow, PanelSize}, Me.MatchingAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnMatchingAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.MatchingAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MatchingAccountCompleted(Me, New MatchingAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetResult", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetResult(ByVal SCID As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("GetResult", New Object() {SCID, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetResultAsync(ByVal SCID As String, ByVal Process As String)
            Me.GetResultAsync(SCID, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetResultAsync(ByVal SCID As String, ByVal Process As String, ByVal userState As Object)
            If (Me.GetResultOperationCompleted Is Nothing) Then
                Me.GetResultOperationCompleted = AddressOf Me.OnGetResultOperationCompleted
            End If
            Me.InvokeAsync("GetResult", New Object() {SCID, Process}, Me.GetResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetResultCompleted(Me, New GetResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DJinBox", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DJinBox(ByVal DJ As String, ByVal BoxID As String) As String
            Dim results() As Object = Me.Invoke("DJinBox", New Object() {DJ, BoxID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DJinBoxAsync(ByVal DJ As String, ByVal BoxID As String)
            Me.DJinBoxAsync(DJ, BoxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DJinBoxAsync(ByVal DJ As String, ByVal BoxID As String, ByVal userState As Object)
            If (Me.DJinBoxOperationCompleted Is Nothing) Then
                Me.DJinBoxOperationCompleted = AddressOf Me.OnDJinBoxOperationCompleted
            End If
            Me.InvokeAsync("DJinBox", New Object() {DJ, BoxID}, Me.DJinBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnDJinBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.DJinBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DJinBoxCompleted(Me, New DJinBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckPrevResult", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPrevResult(ByVal IntSerialNo As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("CheckPrevResult", New Object() {IntSerialNo, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPrevResultAsync(ByVal IntSerialNo As String, ByVal Process As String)
            Me.CheckPrevResultAsync(IntSerialNo, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPrevResultAsync(ByVal IntSerialNo As String, ByVal Process As String, ByVal userState As Object)
            If (Me.CheckPrevResultOperationCompleted Is Nothing) Then
                Me.CheckPrevResultOperationCompleted = AddressOf Me.OnCheckPrevResultOperationCompleted
            End If
            Me.InvokeAsync("CheckPrevResult", New Object() {IntSerialNo, Process}, Me.CheckPrevResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPrevResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPrevResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPrevResultCompleted(Me, New CheckPrevResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LargeThanMaxTest", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LargeThanMaxTest(ByVal IntSerialNo As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("LargeThanMaxTest", New Object() {IntSerialNo, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LargeThanMaxTestAsync(ByVal IntSerialNo As String, ByVal Process As String)
            Me.LargeThanMaxTestAsync(IntSerialNo, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LargeThanMaxTestAsync(ByVal IntSerialNo As String, ByVal Process As String, ByVal userState As Object)
            If (Me.LargeThanMaxTestOperationCompleted Is Nothing) Then
                Me.LargeThanMaxTestOperationCompleted = AddressOf Me.OnLargeThanMaxTestOperationCompleted
            End If
            Me.InvokeAsync("LargeThanMaxTest", New Object() {IntSerialNo, Process}, Me.LargeThanMaxTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnLargeThanMaxTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.LargeThanMaxTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LargeThanMaxTestCompleted(Me, New LargeThanMaxTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPIn", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPIn(ByVal IntSerialNo As String, ByVal Process As String, ByVal user As String) As Boolean
            Dim results() As Object = Me.Invoke("WIPIn", New Object() {IntSerialNo, Process, user})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPInAsync(ByVal IntSerialNo As String, ByVal Process As String, ByVal user As String)
            Me.WIPInAsync(IntSerialNo, Process, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPInAsync(ByVal IntSerialNo As String, ByVal Process As String, ByVal user As String, ByVal userState As Object)
            If (Me.WIPInOperationCompleted Is Nothing) Then
                Me.WIPInOperationCompleted = AddressOf Me.OnWIPInOperationCompleted
            End If
            Me.InvokeAsync("WIPIn", New Object() {IntSerialNo, Process, user}, Me.WIPInOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPInOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPInCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPInCompleted(Me, New WIPInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPOut", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPOut(ByVal header As StatusHeaderStructure) As Boolean
            Dim results() As Object = Me.Invoke("WIPOut", New Object() {header})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPOutAsync(ByVal header As StatusHeaderStructure)
            Me.WIPOutAsync(header, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPOutAsync(ByVal header As StatusHeaderStructure, ByVal userState As Object)
            If (Me.WIPOutOperationCompleted Is Nothing) Then
                Me.WIPOutOperationCompleted = AddressOf Me.OnWIPOutOperationCompleted
            End If
            Me.InvokeAsync("WIPOut", New Object() {header}, Me.WIPOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPOutCompleted(Me, New WIPOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/checkSamplingTest", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkSamplingTest(ByVal IntSN As Object, ByVal CurrProcess As Object) As Boolean
            Dim results() As Object = Me.Invoke("checkSamplingTest", New Object() {IntSN, CurrProcess})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkSamplingTestAsync(ByVal IntSN As Object, ByVal CurrProcess As Object)
            Me.checkSamplingTestAsync(IntSN, CurrProcess, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkSamplingTestAsync(ByVal IntSN As Object, ByVal CurrProcess As Object, ByVal userState As Object)
            If (Me.checkSamplingTestOperationCompleted Is Nothing) Then
                Me.checkSamplingTestOperationCompleted = AddressOf Me.OncheckSamplingTestOperationCompleted
            End If
            Me.InvokeAsync("checkSamplingTest", New Object() {IntSN, CurrProcess}, Me.checkSamplingTestOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckSamplingTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkSamplingTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkSamplingTestCompleted(Me, New checkSamplingTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadDBoards", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadDBoards(ByVal header As StatusHeaderStructure) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadDBoards", New Object() {header})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadDBoardsAsync(ByVal header As StatusHeaderStructure)
            Me.ReadDBoardsAsync(header, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadDBoardsAsync(ByVal header As StatusHeaderStructure, ByVal userState As Object)
            If (Me.ReadDBoardsOperationCompleted Is Nothing) Then
                Me.ReadDBoardsOperationCompleted = AddressOf Me.OnReadDBoardsOperationCompleted
            End If
            Me.InvokeAsync("ReadDBoards", New Object() {header}, Me.ReadDBoardsOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadDBoardsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadDBoardsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadDBoardsCompleted(Me, New ReadDBoardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPOutMatchingN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPOutMatchingN(ByVal header As StatusHeaderStructure, ByVal ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("WIPOutMatchingN", New Object() {header, ds})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPOutMatchingNAsync(ByVal header As StatusHeaderStructure, ByVal ds As System.Data.DataSet)
            Me.WIPOutMatchingNAsync(header, ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPOutMatchingNAsync(ByVal header As StatusHeaderStructure, ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIPOutMatchingNOperationCompleted Is Nothing) Then
                Me.WIPOutMatchingNOperationCompleted = AddressOf Me.OnWIPOutMatchingNOperationCompleted
            End If
            Me.InvokeAsync("WIPOutMatchingN", New Object() {header, ds}, Me.WIPOutMatchingNOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPOutMatchingNOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPOutMatchingNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPOutMatchingNCompleted(Me, New WIPOutMatchingNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDataByIntSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataByIntSN(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDataByIntSN", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataByIntSNAsync(ByVal IntSN As String)
            Me.GetDataByIntSNAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataByIntSNAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.GetDataByIntSNOperationCompleted Is Nothing) Then
                Me.GetDataByIntSNOperationCompleted = AddressOf Me.OnGetDataByIntSNOperationCompleted
            End If
            Me.InvokeAsync("GetDataByIntSN", New Object() {IntSN}, Me.GetDataByIntSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataByIntSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataByIntSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataByIntSNCompleted(Me, New GetDataByIntSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RDCBoardSNValid", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RDCBoardSNValid(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RDCBoardSNValid", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RDCBoardSNValidAsync(ByVal IntSN As String)
            Me.RDCBoardSNValidAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RDCBoardSNValidAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.RDCBoardSNValidOperationCompleted Is Nothing) Then
                Me.RDCBoardSNValidOperationCompleted = AddressOf Me.OnRDCBoardSNValidOperationCompleted
            End If
            Me.InvokeAsync("RDCBoardSNValid", New Object() {IntSN}, Me.RDCBoardSNValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnRDCBoardSNValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.RDCBoardSNValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RDCBoardSNValidCompleted(Me, New RDCBoardSNValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/MatListOnPCBA", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MatListOnPCBA(ByVal WIPID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MatListOnPCBA", New Object() {WIPID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MatListOnPCBAAsync(ByVal WIPID As String)
            Me.MatListOnPCBAAsync(WIPID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MatListOnPCBAAsync(ByVal WIPID As String, ByVal userState As Object)
            If (Me.MatListOnPCBAOperationCompleted Is Nothing) Then
                Me.MatListOnPCBAOperationCompleted = AddressOf Me.OnMatListOnPCBAOperationCompleted
            End If
            Me.InvokeAsync("MatListOnPCBA", New Object() {WIPID}, Me.MatListOnPCBAOperationCompleted, userState)
        End Sub
        
        Private Sub OnMatListOnPCBAOperationCompleted(ByVal arg As Object)
            If (Not (Me.MatListOnPCBACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MatListOnPCBACompleted(Me, New MatListOnPCBACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IDSwop", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IDSwop(ByVal header As StatusHeaderStructure, ByVal type As Integer) As Boolean
            Dim results() As Object = Me.Invoke("IDSwop", New Object() {header, type})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IDSwopAsync(ByVal header As StatusHeaderStructure, ByVal type As Integer)
            Me.IDSwopAsync(header, type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IDSwopAsync(ByVal header As StatusHeaderStructure, ByVal type As Integer, ByVal userState As Object)
            If (Me.IDSwopOperationCompleted Is Nothing) Then
                Me.IDSwopOperationCompleted = AddressOf Me.OnIDSwopOperationCompleted
            End If
            Me.InvokeAsync("IDSwop", New Object() {header, type}, Me.IDSwopOperationCompleted, userState)
        End Sub
        
        Private Sub OnIDSwopOperationCompleted(ByVal arg As Object)
            If (Not (Me.IDSwopCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IDSwopCompleted(Me, New IDSwopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IntSNRecycle", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IntSNRecycle(ByVal header As StatusHeaderStructure) As Boolean
            Dim results() As Object = Me.Invoke("IntSNRecycle", New Object() {header})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IntSNRecycleAsync(ByVal header As StatusHeaderStructure)
            Me.IntSNRecycleAsync(header, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IntSNRecycleAsync(ByVal header As StatusHeaderStructure, ByVal userState As Object)
            If (Me.IntSNRecycleOperationCompleted Is Nothing) Then
                Me.IntSNRecycleOperationCompleted = AddressOf Me.OnIntSNRecycleOperationCompleted
            End If
            Me.InvokeAsync("IntSNRecycle", New Object() {header}, Me.IntSNRecycleOperationCompleted, userState)
        End Sub
        
        Private Sub OnIntSNRecycleOperationCompleted(ByVal arg As Object)
            If (Not (Me.IntSNRecycleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IntSNRecycleCompleted(Me, New IntSNRecycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IntSNRecycleII", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IntSNRecycleII(ByVal header As StatusHeaderStructure) As String
            Dim results() As Object = Me.Invoke("IntSNRecycleII", New Object() {header})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IntSNRecycleIIAsync(ByVal header As StatusHeaderStructure)
            Me.IntSNRecycleIIAsync(header, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IntSNRecycleIIAsync(ByVal header As StatusHeaderStructure, ByVal userState As Object)
            If (Me.IntSNRecycleIIOperationCompleted Is Nothing) Then
                Me.IntSNRecycleIIOperationCompleted = AddressOf Me.OnIntSNRecycleIIOperationCompleted
            End If
            Me.InvokeAsync("IntSNRecycleII", New Object() {header}, Me.IntSNRecycleIIOperationCompleted, userState)
        End Sub
        
        Private Sub OnIntSNRecycleIIOperationCompleted(ByVal arg As Object)
            If (Not (Me.IntSNRecycleIICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IntSNRecycleIICompleted(Me, New IntSNRecycleIICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetProductCPN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductCPN(ByVal CPN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProductCPN", New Object() {CPN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductCPNAsync(ByVal CPN As String)
            Me.GetProductCPNAsync(CPN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductCPNAsync(ByVal CPN As String, ByVal userState As Object)
            If (Me.GetProductCPNOperationCompleted Is Nothing) Then
                Me.GetProductCPNOperationCompleted = AddressOf Me.OnGetProductCPNOperationCompleted
            End If
            Me.InvokeAsync("GetProductCPN", New Object() {CPN}, Me.GetProductCPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductCPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductCPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductCPNCompleted(Me, New GetProductCPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetResultList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetResultList(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetResultList", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetResultListAsync(ByVal IntSN As String)
            Me.GetResultListAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetResultListAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.GetResultListOperationCompleted Is Nothing) Then
                Me.GetResultListOperationCompleted = AddressOf Me.OnGetResultListOperationCompleted
            End If
            Me.InvokeAsync("GetResultList", New Object() {IntSN}, Me.GetResultListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetResultListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetResultListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetResultListCompleted(Me, New GetResultListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetNextProcess", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextProcess(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("GetNextProcess", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextProcessAsync(ByVal IntSN As String)
            Me.GetNextProcessAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextProcessAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.GetNextProcessOperationCompleted Is Nothing) Then
                Me.GetNextProcessOperationCompleted = AddressOf Me.OnGetNextProcessOperationCompleted
            End If
            Me.InvokeAsync("GetNextProcess", New Object() {IntSN}, Me.GetNextProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextProcessCompleted(Me, New GetNextProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetResultAndAttributesList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetResultAndAttributesList(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetResultAndAttributesList", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetResultAndAttributesListAsync(ByVal IntSN As String)
            Me.GetResultAndAttributesListAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetResultAndAttributesListAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.GetResultAndAttributesListOperationCompleted Is Nothing) Then
                Me.GetResultAndAttributesListOperationCompleted = AddressOf Me.OnGetResultAndAttributesListOperationCompleted
            End If
            Me.InvokeAsync("GetResultAndAttributesList", New Object() {IntSN}, Me.GetResultAndAttributesListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetResultAndAttributesListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetResultAndAttributesListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetResultAndAttributesListCompleted(Me, New GetResultAndAttributesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetBoxInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBoxInfo(ByVal BoxID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBoxInfo", New Object() {BoxID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBoxInfoAsync(ByVal BoxID As String)
            Me.GetBoxInfoAsync(BoxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBoxInfoAsync(ByVal BoxID As String, ByVal userState As Object)
            If (Me.GetBoxInfoOperationCompleted Is Nothing) Then
                Me.GetBoxInfoOperationCompleted = AddressOf Me.OnGetBoxInfoOperationCompleted
            End If
            Me.InvokeAsync("GetBoxInfo", New Object() {BoxID}, Me.GetBoxInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBoxInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBoxInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBoxInfoCompleted(Me, New GetBoxInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetLabel1", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLabel1(ByVal Model As String) As String
            Dim results() As Object = Me.Invoke("GetLabel1", New Object() {Model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLabel1Async(ByVal Model As String)
            Me.GetLabel1Async(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLabel1Async(ByVal Model As String, ByVal userState As Object)
            If (Me.GetLabel1OperationCompleted Is Nothing) Then
                Me.GetLabel1OperationCompleted = AddressOf Me.OnGetLabel1OperationCompleted
            End If
            Me.InvokeAsync("GetLabel1", New Object() {Model}, Me.GetLabel1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLabel1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLabel1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLabel1Completed(Me, New GetLabel1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPackingListLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPackingListLabel(ByVal Model As String) As String
            Dim results() As Object = Me.Invoke("GetPackingListLabel", New Object() {Model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPackingListLabelAsync(ByVal Model As String)
            Me.GetPackingListLabelAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPackingListLabelAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.GetPackingListLabelOperationCompleted Is Nothing) Then
                Me.GetPackingListLabelOperationCompleted = AddressOf Me.OnGetPackingListLabelOperationCompleted
            End If
            Me.InvokeAsync("GetPackingListLabel", New Object() {Model}, Me.GetPackingListLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPackingListLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPackingListLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPackingListLabelCompleted(Me, New GetPackingListLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetBoxQtyInPallet", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBoxQtyInPallet(ByVal PalletID As String) As Integer
            Dim results() As Object = Me.Invoke("GetBoxQtyInPallet", New Object() {PalletID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBoxQtyInPalletAsync(ByVal PalletID As String)
            Me.GetBoxQtyInPalletAsync(PalletID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBoxQtyInPalletAsync(ByVal PalletID As String, ByVal userState As Object)
            If (Me.GetBoxQtyInPalletOperationCompleted Is Nothing) Then
                Me.GetBoxQtyInPalletOperationCompleted = AddressOf Me.OnGetBoxQtyInPalletOperationCompleted
            End If
            Me.InvokeAsync("GetBoxQtyInPallet", New Object() {PalletID}, Me.GetBoxQtyInPalletOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBoxQtyInPalletOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBoxQtyInPalletCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBoxQtyInPalletCompleted(Me, New GetBoxQtyInPalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATEWIPIn", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATEWIPIn(ByVal IntSerialNo As String, ByVal Process As String, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("ATEWIPIn", New Object() {IntSerialNo, Process, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATEWIPInAsync(ByVal IntSerialNo As String, ByVal Process As String, ByVal user As String)
            Me.ATEWIPInAsync(IntSerialNo, Process, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATEWIPInAsync(ByVal IntSerialNo As String, ByVal Process As String, ByVal user As String, ByVal userState As Object)
            If (Me.ATEWIPInOperationCompleted Is Nothing) Then
                Me.ATEWIPInOperationCompleted = AddressOf Me.OnATEWIPInOperationCompleted
            End If
            Me.InvokeAsync("ATEWIPIn", New Object() {IntSerialNo, Process, user}, Me.ATEWIPInOperationCompleted, userState)
        End Sub
        
        Private Sub OnATEWIPInOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATEWIPInCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATEWIPInCompleted(Me, New ATEWIPInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATEWIPout", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATEWIPout(ByVal xml As String) As String
            Dim results() As Object = Me.Invoke("ATEWIPout", New Object() {xml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATEWIPoutAsync(ByVal xml As String)
            Me.ATEWIPoutAsync(xml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATEWIPoutAsync(ByVal xml As String, ByVal userState As Object)
            If (Me.ATEWIPoutOperationCompleted Is Nothing) Then
                Me.ATEWIPoutOperationCompleted = AddressOf Me.OnATEWIPoutOperationCompleted
            End If
            Me.InvokeAsync("ATEWIPout", New Object() {xml}, Me.ATEWIPoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnATEWIPoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATEWIPoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATEWIPoutCompleted(Me, New ATEWIPoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ATEWIPOutDirect", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ATEWIPOutDirect(ByVal xml As String) As String
            Dim results() As Object = Me.Invoke("ATEWIPOutDirect", New Object() {xml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ATEWIPOutDirectAsync(ByVal xml As String)
            Me.ATEWIPOutDirectAsync(xml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ATEWIPOutDirectAsync(ByVal xml As String, ByVal userState As Object)
            If (Me.ATEWIPOutDirectOperationCompleted Is Nothing) Then
                Me.ATEWIPOutDirectOperationCompleted = AddressOf Me.OnATEWIPOutDirectOperationCompleted
            End If
            Me.InvokeAsync("ATEWIPOutDirect", New Object() {xml}, Me.ATEWIPOutDirectOperationCompleted, userState)
        End Sub
        
        Private Sub OnATEWIPOutDirectOperationCompleted(ByVal arg As Object)
            If (Not (Me.ATEWIPOutDirectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ATEWIPOutDirectCompleted(Me, New ATEWIPOutDirectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IsWipIn", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsWipIn(ByVal IntSerial As String, ByVal CurrProcess As String) As Boolean
            Dim results() As Object = Me.Invoke("IsWipIn", New Object() {IntSerial, CurrProcess})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsWipInAsync(ByVal IntSerial As String, ByVal CurrProcess As String)
            Me.IsWipInAsync(IntSerial, CurrProcess, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsWipInAsync(ByVal IntSerial As String, ByVal CurrProcess As String, ByVal userState As Object)
            If (Me.IsWipInOperationCompleted Is Nothing) Then
                Me.IsWipInOperationCompleted = AddressOf Me.OnIsWipInOperationCompleted
            End If
            Me.InvokeAsync("IsWipIn", New Object() {IntSerial, CurrProcess}, Me.IsWipInOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsWipInOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsWipInCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsWipInCompleted(Me, New IsWipInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BurnInWipOut", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BurnInWipOut(ByVal Header As StatusHeaderStructure, ByVal checked As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("BurnInWipOut", New Object() {Header, checked})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BurnInWipOutAsync(ByVal Header As StatusHeaderStructure, ByVal checked As Boolean)
            Me.BurnInWipOutAsync(Header, checked, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BurnInWipOutAsync(ByVal Header As StatusHeaderStructure, ByVal checked As Boolean, ByVal userState As Object)
            If (Me.BurnInWipOutOperationCompleted Is Nothing) Then
                Me.BurnInWipOutOperationCompleted = AddressOf Me.OnBurnInWipOutOperationCompleted
            End If
            Me.InvokeAsync("BurnInWipOut", New Object() {Header, checked}, Me.BurnInWipOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnBurnInWipOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.BurnInWipOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BurnInWipOutCompleted(Me, New BurnInWipOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPPacking", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPPacking(ByVal DSWIP As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("WIPPacking", New Object() {DSWIP})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPPackingAsync(ByVal DSWIP As System.Data.DataSet)
            Me.WIPPackingAsync(DSWIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPPackingAsync(ByVal DSWIP As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIPPackingOperationCompleted Is Nothing) Then
                Me.WIPPackingOperationCompleted = AddressOf Me.OnWIPPackingOperationCompleted
            End If
            Me.InvokeAsync("WIPPacking", New Object() {DSWIP}, Me.WIPPackingOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPPackingOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPPackingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPPackingCompleted(Me, New WIPPackingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintSNLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintSNLabel(ByVal prodcutSN As String, ByVal labelId As String, ByVal printerName As String) As String
            Dim results() As Object = Me.Invoke("PrintSNLabel", New Object() {prodcutSN, labelId, printerName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintSNLabelAsync(ByVal prodcutSN As String, ByVal labelId As String, ByVal printerName As String)
            Me.PrintSNLabelAsync(prodcutSN, labelId, printerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintSNLabelAsync(ByVal prodcutSN As String, ByVal labelId As String, ByVal printerName As String, ByVal userState As Object)
            If (Me.PrintSNLabelOperationCompleted Is Nothing) Then
                Me.PrintSNLabelOperationCompleted = AddressOf Me.OnPrintSNLabelOperationCompleted
            End If
            Me.InvokeAsync("PrintSNLabel", New Object() {prodcutSN, labelId, printerName}, Me.PrintSNLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintSNLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintSNLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintSNLabelCompleted(Me, New PrintSNLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintPaking", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintPaking(ByVal CartonID As String, ByVal labelid As String, ByVal printer As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintPaking", New Object() {CartonID, labelid, printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintPakingAsync(ByVal CartonID As String, ByVal labelid As String, ByVal printer As String)
            Me.PrintPakingAsync(CartonID, labelid, printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintPakingAsync(ByVal CartonID As String, ByVal labelid As String, ByVal printer As String, ByVal userState As Object)
            If (Me.PrintPakingOperationCompleted Is Nothing) Then
                Me.PrintPakingOperationCompleted = AddressOf Me.OnPrintPakingOperationCompleted
            End If
            Me.InvokeAsync("PrintPaking", New Object() {CartonID, labelid, printer}, Me.PrintPakingOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintPakingOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintPakingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintPakingCompleted(Me, New PrintPakingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetBurnInTime", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBurnInTime(ByVal IntSerial As String, ByVal CurrProcess As String) As Integer
            Dim results() As Object = Me.Invoke("GetBurnInTime", New Object() {IntSerial, CurrProcess})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBurnInTimeAsync(ByVal IntSerial As String, ByVal CurrProcess As String)
            Me.GetBurnInTimeAsync(IntSerial, CurrProcess, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBurnInTimeAsync(ByVal IntSerial As String, ByVal CurrProcess As String, ByVal userState As Object)
            If (Me.GetBurnInTimeOperationCompleted Is Nothing) Then
                Me.GetBurnInTimeOperationCompleted = AddressOf Me.OnGetBurnInTimeOperationCompleted
            End If
            Me.InvokeAsync("GetBurnInTime", New Object() {IntSerial, CurrProcess}, Me.GetBurnInTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBurnInTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBurnInTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBurnInTimeCompleted(Me, New GetBurnInTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetShipInfoBySN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipInfoBySN(ByVal SerialNo As String) As ShipInfo
            Dim results() As Object = Me.Invoke("GetShipInfoBySN", New Object() {SerialNo})
            Return CType(results(0),ShipInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoBySNAsync(ByVal SerialNo As String)
            Me.GetShipInfoBySNAsync(SerialNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoBySNAsync(ByVal SerialNo As String, ByVal userState As Object)
            If (Me.GetShipInfoBySNOperationCompleted Is Nothing) Then
                Me.GetShipInfoBySNOperationCompleted = AddressOf Me.OnGetShipInfoBySNOperationCompleted
            End If
            Me.InvokeAsync("GetShipInfoBySN", New Object() {SerialNo}, Me.GetShipInfoBySNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipInfoBySNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipInfoBySNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipInfoBySNCompleted(Me, New GetShipInfoBySNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ChangeBox", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeBox(ByVal SerialNo As String, ByVal oldboxid As String, ByVal newBoxID As String, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("ChangeBox", New Object() {SerialNo, oldboxid, newBoxID, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeBoxAsync(ByVal SerialNo As String, ByVal oldboxid As String, ByVal newBoxID As String, ByVal user As String)
            Me.ChangeBoxAsync(SerialNo, oldboxid, newBoxID, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeBoxAsync(ByVal SerialNo As String, ByVal oldboxid As String, ByVal newBoxID As String, ByVal user As String, ByVal userState As Object)
            If (Me.ChangeBoxOperationCompleted Is Nothing) Then
                Me.ChangeBoxOperationCompleted = AddressOf Me.OnChangeBoxOperationCompleted
            End If
            Me.InvokeAsync("ChangeBox", New Object() {SerialNo, oldboxid, newBoxID, user}, Me.ChangeBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeBoxCompleted(Me, New ChangeBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetShipInfoByBoxID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipInfoByBoxID(ByVal BoxID As String, ByVal user As String) As ShipInfo
            Dim results() As Object = Me.Invoke("GetShipInfoByBoxID", New Object() {BoxID, user})
            Return CType(results(0),ShipInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoByBoxIDAsync(ByVal BoxID As String, ByVal user As String)
            Me.GetShipInfoByBoxIDAsync(BoxID, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoByBoxIDAsync(ByVal BoxID As String, ByVal user As String, ByVal userState As Object)
            If (Me.GetShipInfoByBoxIDOperationCompleted Is Nothing) Then
                Me.GetShipInfoByBoxIDOperationCompleted = AddressOf Me.OnGetShipInfoByBoxIDOperationCompleted
            End If
            Me.InvokeAsync("GetShipInfoByBoxID", New Object() {BoxID, user}, Me.GetShipInfoByBoxIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipInfoByBoxIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipInfoByBoxIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipInfoByBoxIDCompleted(Me, New GetShipInfoByBoxIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetShipInfoByPalletID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipInfoByPalletID(ByVal PalletID As String, ByVal user As String) As ShipInfo
            Dim results() As Object = Me.Invoke("GetShipInfoByPalletID", New Object() {PalletID, user})
            Return CType(results(0),ShipInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoByPalletIDAsync(ByVal PalletID As String, ByVal user As String)
            Me.GetShipInfoByPalletIDAsync(PalletID, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipInfoByPalletIDAsync(ByVal PalletID As String, ByVal user As String, ByVal userState As Object)
            If (Me.GetShipInfoByPalletIDOperationCompleted Is Nothing) Then
                Me.GetShipInfoByPalletIDOperationCompleted = AddressOf Me.OnGetShipInfoByPalletIDOperationCompleted
            End If
            Me.InvokeAsync("GetShipInfoByPalletID", New Object() {PalletID, user}, Me.GetShipInfoByPalletIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipInfoByPalletIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipInfoByPalletIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipInfoByPalletIDCompleted(Me, New GetShipInfoByPalletIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ChangePallet", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangePallet(ByVal BoxID As String, ByVal PalletID As String, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("ChangePallet", New Object() {BoxID, PalletID, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangePalletAsync(ByVal BoxID As String, ByVal PalletID As String, ByVal user As String)
            Me.ChangePalletAsync(BoxID, PalletID, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePalletAsync(ByVal BoxID As String, ByVal PalletID As String, ByVal user As String, ByVal userState As Object)
            If (Me.ChangePalletOperationCompleted Is Nothing) Then
                Me.ChangePalletOperationCompleted = AddressOf Me.OnChangePalletOperationCompleted
            End If
            Me.InvokeAsync("ChangePallet", New Object() {BoxID, PalletID, user}, Me.ChangePalletOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePalletOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePalletCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePalletCompleted(Me, New ChangePalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OQAWipIn", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OQAWipIn(ByVal ExtNo As String, ByVal OperatorName As String, ByVal InvOrg As String) As String
            Dim results() As Object = Me.Invoke("OQAWipIn", New Object() {ExtNo, OperatorName, InvOrg})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OQAWipInAsync(ByVal ExtNo As String, ByVal OperatorName As String, ByVal InvOrg As String)
            Me.OQAWipInAsync(ExtNo, OperatorName, InvOrg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OQAWipInAsync(ByVal ExtNo As String, ByVal OperatorName As String, ByVal InvOrg As String, ByVal userState As Object)
            If (Me.OQAWipInOperationCompleted Is Nothing) Then
                Me.OQAWipInOperationCompleted = AddressOf Me.OnOQAWipInOperationCompleted
            End If
            Me.InvokeAsync("OQAWipIn", New Object() {ExtNo, OperatorName, InvOrg}, Me.OQAWipInOperationCompleted, userState)
        End Sub
        
        Private Sub OnOQAWipInOperationCompleted(ByVal arg As Object)
            If (Not (Me.OQAWipInCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OQAWipInCompleted(Me, New OQAWipInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ExistsFunctionalTest", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExistsFunctionalTest(ByVal ExtNo As String) As String
            Dim results() As Object = Me.Invoke("ExistsFunctionalTest", New Object() {ExtNo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExistsFunctionalTestAsync(ByVal ExtNo As String)
            Me.ExistsFunctionalTestAsync(ExtNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExistsFunctionalTestAsync(ByVal ExtNo As String, ByVal userState As Object)
            If (Me.ExistsFunctionalTestOperationCompleted Is Nothing) Then
                Me.ExistsFunctionalTestOperationCompleted = AddressOf Me.OnExistsFunctionalTestOperationCompleted
            End If
            Me.InvokeAsync("ExistsFunctionalTest", New Object() {ExtNo}, Me.ExistsFunctionalTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnExistsFunctionalTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExistsFunctionalTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExistsFunctionalTestCompleted(Me, New ExistsFunctionalTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/TLAFlow", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TLAFlow(ByVal Model As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TLAFlow", New Object() {Model})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TLAFlowAsync(ByVal Model As String)
            Me.TLAFlowAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TLAFlowAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.TLAFlowOperationCompleted Is Nothing) Then
                Me.TLAFlowOperationCompleted = AddressOf Me.OnTLAFlowOperationCompleted
            End If
            Me.InvokeAsync("TLAFlow", New Object() {Model}, Me.TLAFlowOperationCompleted, userState)
        End Sub
        
        Private Sub OnTLAFlowOperationCompleted(ByVal arg As Object)
            If (Not (Me.TLAFlowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TLAFlowCompleted(Me, New TLAFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OQACosmetic", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OQACosmetic(ByVal ExtSN As String, ByVal Model As String, ByVal RetestNo As String, ByVal Result As String, ByVal ERPLoginData As ERPLogin, ByVal dsFlow As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("OQACosmetic", New Object() {ExtSN, Model, RetestNo, Result, ERPLoginData, dsFlow})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OQACosmeticAsync(ByVal ExtSN As String, ByVal Model As String, ByVal RetestNo As String, ByVal Result As String, ByVal ERPLoginData As ERPLogin, ByVal dsFlow As System.Data.DataSet)
            Me.OQACosmeticAsync(ExtSN, Model, RetestNo, Result, ERPLoginData, dsFlow, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OQACosmeticAsync(ByVal ExtSN As String, ByVal Model As String, ByVal RetestNo As String, ByVal Result As String, ByVal ERPLoginData As ERPLogin, ByVal dsFlow As System.Data.DataSet, ByVal userState As Object)
            If (Me.OQACosmeticOperationCompleted Is Nothing) Then
                Me.OQACosmeticOperationCompleted = AddressOf Me.OnOQACosmeticOperationCompleted
            End If
            Me.InvokeAsync("OQACosmetic", New Object() {ExtSN, Model, RetestNo, Result, ERPLoginData, dsFlow}, Me.OQACosmeticOperationCompleted, userState)
        End Sub
        
        Private Sub OnOQACosmeticOperationCompleted(ByVal arg As Object)
            If (Not (Me.OQACosmeticCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OQACosmeticCompleted(Me, New OQACosmeticCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getLabels", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLabels(ByVal Model As String, ByVal PCBA As String, ByVal Process As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getLabels", New Object() {Model, PCBA, Process})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLabelsAsync(ByVal Model As String, ByVal PCBA As String, ByVal Process As String)
            Me.getLabelsAsync(Model, PCBA, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLabelsAsync(ByVal Model As String, ByVal PCBA As String, ByVal Process As String, ByVal userState As Object)
            If (Me.getLabelsOperationCompleted Is Nothing) Then
                Me.getLabelsOperationCompleted = AddressOf Me.OngetLabelsOperationCompleted
            End If
            Me.InvokeAsync("getLabels", New Object() {Model, PCBA, Process}, Me.getLabelsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLabelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLabelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLabelsCompleted(Me, New getLabelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Rework", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Rework(ByVal ExtSN As String, ByVal DJ As String, ByVal Model As String, ByVal RetestNo As String, ByVal check As Boolean, ByVal ERPLoginData As ERPLogin, ByVal dsFlow As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("Rework", New Object() {ExtSN, DJ, Model, RetestNo, check, ERPLoginData, dsFlow})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReworkAsync(ByVal ExtSN As String, ByVal DJ As String, ByVal Model As String, ByVal RetestNo As String, ByVal check As Boolean, ByVal ERPLoginData As ERPLogin, ByVal dsFlow As System.Data.DataSet)
            Me.ReworkAsync(ExtSN, DJ, Model, RetestNo, check, ERPLoginData, dsFlow, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReworkAsync(ByVal ExtSN As String, ByVal DJ As String, ByVal Model As String, ByVal RetestNo As String, ByVal check As Boolean, ByVal ERPLoginData As ERPLogin, ByVal dsFlow As System.Data.DataSet, ByVal userState As Object)
            If (Me.ReworkOperationCompleted Is Nothing) Then
                Me.ReworkOperationCompleted = AddressOf Me.OnReworkOperationCompleted
            End If
            Me.InvokeAsync("Rework", New Object() {ExtSN, DJ, Model, RetestNo, check, ERPLoginData, dsFlow}, Me.ReworkOperationCompleted, userState)
        End Sub
        
        Private Sub OnReworkOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReworkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReworkCompleted(Me, New ReworkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Rework_New", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Rework_New(ByVal dsFlow As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("Rework_New", New Object() {dsFlow})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Rework_NewAsync(ByVal dsFlow As System.Data.DataSet)
            Me.Rework_NewAsync(dsFlow, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Rework_NewAsync(ByVal dsFlow As System.Data.DataSet, ByVal userState As Object)
            If (Me.Rework_NewOperationCompleted Is Nothing) Then
                Me.Rework_NewOperationCompleted = AddressOf Me.OnRework_NewOperationCompleted
            End If
            Me.InvokeAsync("Rework_New", New Object() {dsFlow}, Me.Rework_NewOperationCompleted, userState)
        End Sub
        
        Private Sub OnRework_NewOperationCompleted(ByVal arg As Object)
            If (Not (Me.Rework_NewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Rework_NewCompleted(Me, New Rework_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/TraceLevel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TraceLevel(ByVal Model As String) As String
            Dim results() As Object = Me.Invoke("TraceLevel", New Object() {Model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TraceLevelAsync(ByVal Model As String)
            Me.TraceLevelAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TraceLevelAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.TraceLevelOperationCompleted Is Nothing) Then
                Me.TraceLevelOperationCompleted = AddressOf Me.OnTraceLevelOperationCompleted
            End If
            Me.InvokeAsync("TraceLevel", New Object() {Model}, Me.TraceLevelOperationCompleted, userState)
        End Sub
        
        Private Sub OnTraceLevelOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraceLevelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraceLevelCompleted(Me, New TraceLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPanelSize", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPanelSize(ByVal Model As String, ByVal PCBA As String) As Integer
            Dim results() As Object = Me.Invoke("GetPanelSize", New Object() {Model, PCBA})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPanelSizeAsync(ByVal Model As String, ByVal PCBA As String)
            Me.GetPanelSizeAsync(Model, PCBA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPanelSizeAsync(ByVal Model As String, ByVal PCBA As String, ByVal userState As Object)
            If (Me.GetPanelSizeOperationCompleted Is Nothing) Then
                Me.GetPanelSizeOperationCompleted = AddressOf Me.OnGetPanelSizeOperationCompleted
            End If
            Me.InvokeAsync("GetPanelSize", New Object() {Model, PCBA}, Me.GetPanelSizeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPanelSizeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPanelSizeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPanelSizeCompleted(Me, New GetPanelSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IntSNIsValidByPanel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IntSNIsValidByPanel(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("IntSNIsValidByPanel", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IntSNIsValidByPanelAsync(ByVal IntSN As String)
            Me.IntSNIsValidByPanelAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IntSNIsValidByPanelAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.IntSNIsValidByPanelOperationCompleted Is Nothing) Then
                Me.IntSNIsValidByPanelOperationCompleted = AddressOf Me.OnIntSNIsValidByPanelOperationCompleted
            End If
            Me.InvokeAsync("IntSNIsValidByPanel", New Object() {IntSN}, Me.IntSNIsValidByPanelOperationCompleted, userState)
        End Sub
        
        Private Sub OnIntSNIsValidByPanelOperationCompleted(ByVal arg As Object)
            If (Not (Me.IntSNIsValidByPanelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IntSNIsValidByPanelCompleted(Me, New IntSNIsValidByPanelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPMatchingByPanel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPMatchingByPanel(ByVal DSWIP As System.Data.DataSet, ByVal PanelSize As Integer) As String
            Dim results() As Object = Me.Invoke("WIPMatchingByPanel", New Object() {DSWIP, PanelSize})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPMatchingByPanelAsync(ByVal DSWIP As System.Data.DataSet, ByVal PanelSize As Integer)
            Me.WIPMatchingByPanelAsync(DSWIP, PanelSize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPMatchingByPanelAsync(ByVal DSWIP As System.Data.DataSet, ByVal PanelSize As Integer, ByVal userState As Object)
            If (Me.WIPMatchingByPanelOperationCompleted Is Nothing) Then
                Me.WIPMatchingByPanelOperationCompleted = AddressOf Me.OnWIPMatchingByPanelOperationCompleted
            End If
            Me.InvokeAsync("WIPMatchingByPanel", New Object() {DSWIP, PanelSize}, Me.WIPMatchingByPanelOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPMatchingByPanelOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPMatchingByPanelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPMatchingByPanelCompleted(Me, New WIPMatchingByPanelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckPanelID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPanelID(ByVal PanelID As String, ByVal Model As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("CheckPanelID", New Object() {PanelID, Model, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPanelIDAsync(ByVal PanelID As String, ByVal Model As String, ByVal Process As String)
            Me.CheckPanelIDAsync(PanelID, Model, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPanelIDAsync(ByVal PanelID As String, ByVal Model As String, ByVal Process As String, ByVal userState As Object)
            If (Me.CheckPanelIDOperationCompleted Is Nothing) Then
                Me.CheckPanelIDOperationCompleted = AddressOf Me.OnCheckPanelIDOperationCompleted
            End If
            Me.InvokeAsync("CheckPanelID", New Object() {PanelID, Model, Process}, Me.CheckPanelIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPanelIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPanelIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPanelIDCompleted(Me, New CheckPanelIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WIPRework", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WIPRework(ByVal IntSN As String, ByVal ERPLoginData As ERPLogin, ByVal dsFlow As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("WIPRework", New Object() {IntSN, ERPLoginData, dsFlow})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WIPReworkAsync(ByVal IntSN As String, ByVal ERPLoginData As ERPLogin, ByVal dsFlow As System.Data.DataSet)
            Me.WIPReworkAsync(IntSN, ERPLoginData, dsFlow, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WIPReworkAsync(ByVal IntSN As String, ByVal ERPLoginData As ERPLogin, ByVal dsFlow As System.Data.DataSet, ByVal userState As Object)
            If (Me.WIPReworkOperationCompleted Is Nothing) Then
                Me.WIPReworkOperationCompleted = AddressOf Me.OnWIPReworkOperationCompleted
            End If
            Me.InvokeAsync("WIPRework", New Object() {IntSN, ERPLoginData, dsFlow}, Me.WIPReworkOperationCompleted, userState)
        End Sub
        
        Private Sub OnWIPReworkOperationCompleted(ByVal arg As Object)
            If (Not (Me.WIPReworkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WIPReworkCompleted(Me, New WIPReworkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadMIData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadMIData(ByVal model As String, ByVal pcba As String, ByVal process As String, ByVal status As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadMIData", New Object() {model, pcba, process, status})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadMIDataAsync(ByVal model As String, ByVal pcba As String, ByVal process As String, ByVal status As String)
            Me.ReadMIDataAsync(model, pcba, process, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadMIDataAsync(ByVal model As String, ByVal pcba As String, ByVal process As String, ByVal status As String, ByVal userState As Object)
            If (Me.ReadMIDataOperationCompleted Is Nothing) Then
                Me.ReadMIDataOperationCompleted = AddressOf Me.OnReadMIDataOperationCompleted
            End If
            Me.InvokeAsync("ReadMIData", New Object() {model, pcba, process, status}, Me.ReadMIDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadMIDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadMIDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadMIDataCompleted(Me, New ReadMIDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getMIFileData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMIFileData(ByVal model As String, ByVal PCBA As String, ByVal Process As String) As Object
            Dim results() As Object = Me.Invoke("getMIFileData", New Object() {model, PCBA, Process})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMIFileDataAsync(ByVal model As String, ByVal PCBA As String, ByVal Process As String)
            Me.getMIFileDataAsync(model, PCBA, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMIFileDataAsync(ByVal model As String, ByVal PCBA As String, ByVal Process As String, ByVal userState As Object)
            If (Me.getMIFileDataOperationCompleted Is Nothing) Then
                Me.getMIFileDataOperationCompleted = AddressOf Me.OngetMIFileDataOperationCompleted
            End If
            Me.InvokeAsync("getMIFileData", New Object() {model, PCBA, Process}, Me.getMIFileDataOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMIFileDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMIFileDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMIFileDataCompleted(Me, New getMIFileDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveMIRecord", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveMIRecord(ByVal MIRecord As System.Data.DataSet, ByVal username As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveMIRecord", New Object() {MIRecord, username})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveMIRecordAsync(ByVal MIRecord As System.Data.DataSet, ByVal username As String)
            Me.SaveMIRecordAsync(MIRecord, username, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveMIRecordAsync(ByVal MIRecord As System.Data.DataSet, ByVal username As String, ByVal userState As Object)
            If (Me.SaveMIRecordOperationCompleted Is Nothing) Then
                Me.SaveMIRecordOperationCompleted = AddressOf Me.OnSaveMIRecordOperationCompleted
            End If
            Me.InvokeAsync("SaveMIRecord", New Object() {MIRecord, username}, Me.SaveMIRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveMIRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveMIRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveMIRecordCompleted(Me, New SaveMIRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetConfig", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConfig(ByVal eTraceModule As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetConfig", New Object() {eTraceModule})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConfigAsync(ByVal eTraceModule As String)
            Me.GetConfigAsync(eTraceModule, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConfigAsync(ByVal eTraceModule As String, ByVal userState As Object)
            If (Me.GetConfigOperationCompleted Is Nothing) Then
                Me.GetConfigOperationCompleted = AddressOf Me.OnGetConfigOperationCompleted
            End If
            Me.InvokeAsync("GetConfig", New Object() {eTraceModule}, Me.GetConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConfigCompleted(Me, New GetConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetModelByIntSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetModelByIntSN(ByVal intSN As String) As String
            Dim results() As Object = Me.Invoke("GetModelByIntSN", New Object() {intSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetModelByIntSNAsync(ByVal intSN As String)
            Me.GetModelByIntSNAsync(intSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetModelByIntSNAsync(ByVal intSN As String, ByVal userState As Object)
            If (Me.GetModelByIntSNOperationCompleted Is Nothing) Then
                Me.GetModelByIntSNOperationCompleted = AddressOf Me.OnGetModelByIntSNOperationCompleted
            End If
            Me.InvokeAsync("GetModelByIntSN", New Object() {intSN}, Me.GetModelByIntSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetModelByIntSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetModelByIntSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModelByIntSNCompleted(Me, New GetModelByIntSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPCBAByIntSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPCBAByIntSN(ByVal intSN As String) As String
            Dim results() As Object = Me.Invoke("GetPCBAByIntSN", New Object() {intSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPCBAByIntSNAsync(ByVal intSN As String)
            Me.GetPCBAByIntSNAsync(intSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPCBAByIntSNAsync(ByVal intSN As String, ByVal userState As Object)
            If (Me.GetPCBAByIntSNOperationCompleted Is Nothing) Then
                Me.GetPCBAByIntSNOperationCompleted = AddressOf Me.OnGetPCBAByIntSNOperationCompleted
            End If
            Me.InvokeAsync("GetPCBAByIntSN", New Object() {intSN}, Me.GetPCBAByIntSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPCBAByIntSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPCBAByIntSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPCBAByIntSNCompleted(Me, New GetPCBAByIntSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetLastTestResult", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLastTestResult(ByVal intSN As String, ByVal ProcessName As String) As String
            Dim results() As Object = Me.Invoke("GetLastTestResult", New Object() {intSN, ProcessName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLastTestResultAsync(ByVal intSN As String, ByVal ProcessName As String)
            Me.GetLastTestResultAsync(intSN, ProcessName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLastTestResultAsync(ByVal intSN As String, ByVal ProcessName As String, ByVal userState As Object)
            If (Me.GetLastTestResultOperationCompleted Is Nothing) Then
                Me.GetLastTestResultOperationCompleted = AddressOf Me.OnGetLastTestResultOperationCompleted
            End If
            Me.InvokeAsync("GetLastTestResult", New Object() {intSN, ProcessName}, Me.GetLastTestResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLastTestResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLastTestResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLastTestResultCompleted(Me, New GetLastTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getNow", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getNow() As Date
            Dim results() As Object = Me.Invoke("getNow", New Object(-1) {})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getNowAsync()
            Me.getNowAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getNowAsync(ByVal userState As Object)
            If (Me.getNowOperationCompleted Is Nothing) Then
                Me.getNowOperationCompleted = AddressOf Me.OngetNowOperationCompleted
            End If
            Me.InvokeAsync("getNow", New Object(-1) {}, Me.getNowOperationCompleted, userState)
        End Sub
        
        Private Sub OngetNowOperationCompleted(ByVal arg As Object)
            If (Not (Me.getNowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getNowCompleted(Me, New getNowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getPONumber", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPONumber(ByVal buildplanDetail As System.Data.DataSet, ByVal ERPLogin As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("getPONumber", New Object() {buildplanDetail, ERPLogin})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPONumberAsync(ByVal buildplanDetail As System.Data.DataSet, ByVal ERPLogin As ERPLogin)
            Me.getPONumberAsync(buildplanDetail, ERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPONumberAsync(ByVal buildplanDetail As System.Data.DataSet, ByVal ERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.getPONumberOperationCompleted Is Nothing) Then
                Me.getPONumberOperationCompleted = AddressOf Me.OngetPONumberOperationCompleted
            End If
            Me.InvokeAsync("getPONumber", New Object() {buildplanDetail, ERPLogin}, Me.getPONumberOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPONumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPONumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPONumberCompleted(Me, New getPONumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/checkPermission", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkPermission(ByVal ERPLogin As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("checkPermission", New Object() {ERPLogin})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkPermissionAsync(ByVal ERPLogin As ERPLogin)
            Me.checkPermissionAsync(ERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkPermissionAsync(ByVal ERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.checkPermissionOperationCompleted Is Nothing) Then
                Me.checkPermissionOperationCompleted = AddressOf Me.OncheckPermissionOperationCompleted
            End If
            Me.InvokeAsync("checkPermission", New Object() {ERPLogin}, Me.checkPermissionOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckPermissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkPermissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkPermissionCompleted(Me, New checkPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/checkTMFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkTMFormat(ByVal MRListData As System.Data.DataSet, ByVal ExcelMRData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("checkTMFormat", New Object() {MRListData, ExcelMRData, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkTMFormatAsync(ByVal MRListData As System.Data.DataSet, ByVal ExcelMRData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.checkTMFormatAsync(MRListData, ExcelMRData, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkTMFormatAsync(ByVal MRListData As System.Data.DataSet, ByVal ExcelMRData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.checkTMFormatOperationCompleted Is Nothing) Then
                Me.checkTMFormatOperationCompleted = AddressOf Me.OncheckTMFormatOperationCompleted
            End If
            Me.InvokeAsync("checkTMFormat", New Object() {MRListData, ExcelMRData, OracleERPLogin}, Me.checkTMFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckTMFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkTMFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkTMFormatCompleted(Me, New checkTMFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/checkQSFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkQSFormat(ByVal MRListData As System.Data.DataSet, ByVal ExcelMRData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("checkQSFormat", New Object() {MRListData, ExcelMRData, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkQSFormatAsync(ByVal MRListData As System.Data.DataSet, ByVal ExcelMRData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.checkQSFormatAsync(MRListData, ExcelMRData, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkQSFormatAsync(ByVal MRListData As System.Data.DataSet, ByVal ExcelMRData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.checkQSFormatOperationCompleted Is Nothing) Then
                Me.checkQSFormatOperationCompleted = AddressOf Me.OncheckQSFormatOperationCompleted
            End If
            Me.InvokeAsync("checkQSFormat", New Object() {MRListData, ExcelMRData, OracleERPLogin}, Me.checkQSFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckQSFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkQSFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkQSFormatCompleted(Me, New checkQSFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getExceptionReport", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getExceptionReport(ByVal LoginData As ERPLogin, ByVal report As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getExceptionReport", New Object() {LoginData, report})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getExceptionReportAsync(ByVal LoginData As ERPLogin, ByVal report As System.Data.DataSet)
            Me.getExceptionReportAsync(LoginData, report, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getExceptionReportAsync(ByVal LoginData As ERPLogin, ByVal report As System.Data.DataSet, ByVal userState As Object)
            If (Me.getExceptionReportOperationCompleted Is Nothing) Then
                Me.getExceptionReportOperationCompleted = AddressOf Me.OngetExceptionReportOperationCompleted
            End If
            Me.InvokeAsync("getExceptionReport", New Object() {LoginData, report}, Me.getExceptionReportOperationCompleted, userState)
        End Sub
        
        Private Sub OngetExceptionReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.getExceptionReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getExceptionReportCompleted(Me, New getExceptionReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveBuildPlanData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveBuildPlanData(ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("SaveBuildPlanData", New Object() {p_ds, LoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveBuildPlanDataAsync(ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin)
            Me.SaveBuildPlanDataAsync(p_ds, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveBuildPlanDataAsync(ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.SaveBuildPlanDataOperationCompleted Is Nothing) Then
                Me.SaveBuildPlanDataOperationCompleted = AddressOf Me.OnSaveBuildPlanDataOperationCompleted
            End If
            Me.InvokeAsync("SaveBuildPlanData", New Object() {p_ds, LoginData}, Me.SaveBuildPlanDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveBuildPlanDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveBuildPlanDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveBuildPlanDataCompleted(Me, New SaveBuildPlanDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SkipLot", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SkipLot(ByVal oracleLoginData As ERPLogin, ByVal buildPlanId As Long) As Boolean
            Dim results() As Object = Me.Invoke("SkipLot", New Object() {oracleLoginData, buildPlanId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SkipLotAsync(ByVal oracleLoginData As ERPLogin, ByVal buildPlanId As Long)
            Me.SkipLotAsync(oracleLoginData, buildPlanId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SkipLotAsync(ByVal oracleLoginData As ERPLogin, ByVal buildPlanId As Long, ByVal userState As Object)
            If (Me.SkipLotOperationCompleted Is Nothing) Then
                Me.SkipLotOperationCompleted = AddressOf Me.OnSkipLotOperationCompleted
            End If
            Me.InvokeAsync("SkipLot", New Object() {oracleLoginData, buildPlanId}, Me.SkipLotOperationCompleted, userState)
        End Sub
        
        Private Sub OnSkipLotOperationCompleted(ByVal arg As Object)
            If (Not (Me.SkipLotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SkipLotCompleted(Me, New SkipLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/checkIPPFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkIPPFormat(ByVal MRListData As System.Data.DataSet, ByVal ExcelMRData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("checkIPPFormat", New Object() {MRListData, ExcelMRData, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkIPPFormatAsync(ByVal MRListData As System.Data.DataSet, ByVal ExcelMRData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.checkIPPFormatAsync(MRListData, ExcelMRData, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkIPPFormatAsync(ByVal MRListData As System.Data.DataSet, ByVal ExcelMRData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.checkIPPFormatOperationCompleted Is Nothing) Then
                Me.checkIPPFormatOperationCompleted = AddressOf Me.OncheckIPPFormatOperationCompleted
            End If
            Me.InvokeAsync("checkIPPFormat", New Object() {MRListData, ExcelMRData, OracleERPLogin}, Me.checkIPPFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckIPPFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkIPPFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkIPPFormatCompleted(Me, New checkIPPFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Upload_EJITIPP", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Upload_EJITIPP(ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("Upload_EJITIPP", New Object() {p_ds, LoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Upload_EJITIPPAsync(ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin)
            Me.Upload_EJITIPPAsync(p_ds, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Upload_EJITIPPAsync(ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.Upload_EJITIPPOperationCompleted Is Nothing) Then
                Me.Upload_EJITIPPOperationCompleted = AddressOf Me.OnUpload_EJITIPPOperationCompleted
            End If
            Me.InvokeAsync("Upload_EJITIPP", New Object() {p_ds, LoginData}, Me.Upload_EJITIPPOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpload_EJITIPPOperationCompleted(ByVal arg As Object)
            If (Not (Me.Upload_EJITIPPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Upload_EJITIPPCompleted(Me, New Upload_EJITIPPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getProdFloor", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProdFloor(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getProdFloor", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProdFloorAsync(ByVal LoginData As ERPLogin)
            Me.getProdFloorAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProdFloorAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.getProdFloorOperationCompleted Is Nothing) Then
                Me.getProdFloorOperationCompleted = AddressOf Me.OngetProdFloorOperationCompleted
            End If
            Me.InvokeAsync("getProdFloor", New Object() {LoginData}, Me.getProdFloorOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProdFloorOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProdFloorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProdFloorCompleted(Me, New getProdFloorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getEjitIPPList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getEjitIPPList(ByVal startDate As String, ByVal endDate As String, ByVal productionfloor As String, ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getEjitIPPList", New Object() {startDate, endDate, productionfloor, p_ds, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEjitIPPListAsync(ByVal startDate As String, ByVal endDate As String, ByVal productionfloor As String, ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin)
            Me.getEjitIPPListAsync(startDate, endDate, productionfloor, p_ds, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEjitIPPListAsync(ByVal startDate As String, ByVal endDate As String, ByVal productionfloor As String, ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.getEjitIPPListOperationCompleted Is Nothing) Then
                Me.getEjitIPPListOperationCompleted = AddressOf Me.OngetEjitIPPListOperationCompleted
            End If
            Me.InvokeAsync("getEjitIPPList", New Object() {startDate, endDate, productionfloor, p_ds, LoginData}, Me.getEjitIPPListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEjitIPPListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEjitIPPListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEjitIPPListCompleted(Me, New getEjitIPPListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getIPPDetail", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIPPDetail(ByVal IPPId As String, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getIPPDetail", New Object() {IPPId, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIPPDetailAsync(ByVal IPPId As String, ByVal LoginData As ERPLogin)
            Me.getIPPDetailAsync(IPPId, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIPPDetailAsync(ByVal IPPId As String, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.getIPPDetailOperationCompleted Is Nothing) Then
                Me.getIPPDetailOperationCompleted = AddressOf Me.OngetIPPDetailOperationCompleted
            End If
            Me.InvokeAsync("getIPPDetail", New Object() {IPPId, LoginData}, Me.getIPPDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIPPDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIPPDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIPPDetailCompleted(Me, New getIPPDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_TCLIDData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_TCLIDData(ByVal CLID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_TCLIDData", New Object() {CLID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_TCLIDDataAsync(ByVal CLID As String)
            Me.Report_TCLIDDataAsync(CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_TCLIDDataAsync(ByVal CLID As String, ByVal userState As Object)
            If (Me.Report_TCLIDDataOperationCompleted Is Nothing) Then
                Me.Report_TCLIDDataOperationCompleted = AddressOf Me.OnReport_TCLIDDataOperationCompleted
            End If
            Me.InvokeAsync("Report_TCLIDData", New Object() {CLID}, Me.Report_TCLIDDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_TCLIDDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_TCLIDDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_TCLIDDataCompleted(Me, New Report_TCLIDDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_TItemData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_TItemData(ByVal Item As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_TItemData", New Object() {Item})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_TItemDataAsync(ByVal Item As String)
            Me.Report_TItemDataAsync(Item, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_TItemDataAsync(ByVal Item As String, ByVal userState As Object)
            If (Me.Report_TItemDataOperationCompleted Is Nothing) Then
                Me.Report_TItemDataOperationCompleted = AddressOf Me.OnReport_TItemDataOperationCompleted
            End If
            Me.InvokeAsync("Report_TItemData", New Object() {Item}, Me.Report_TItemDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_TItemDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_TItemDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_TItemDataCompleted(Me, New Report_TItemDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_TAging", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_TAging(ByVal Org As String, ByVal SubINV As String, ByVal Item As String, ByVal Comparison As ComparisonSign, ByVal AgingDays As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_TAging", New Object() {Org, SubINV, Item, Comparison, AgingDays})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_TAgingAsync(ByVal Org As String, ByVal SubINV As String, ByVal Item As String, ByVal Comparison As ComparisonSign, ByVal AgingDays As Integer)
            Me.Report_TAgingAsync(Org, SubINV, Item, Comparison, AgingDays, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_TAgingAsync(ByVal Org As String, ByVal SubINV As String, ByVal Item As String, ByVal Comparison As ComparisonSign, ByVal AgingDays As Integer, ByVal userState As Object)
            If (Me.Report_TAgingOperationCompleted Is Nothing) Then
                Me.Report_TAgingOperationCompleted = AddressOf Me.OnReport_TAgingOperationCompleted
            End If
            Me.InvokeAsync("Report_TAging", New Object() {Org, SubINV, Item, Comparison, AgingDays}, Me.Report_TAgingOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_TAgingOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_TAgingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_TAgingCompleted(Me, New Report_TAgingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_TDJData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_TDJData(ByVal Org As String, ByVal CLID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_TDJData", New Object() {Org, CLID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_TDJDataAsync(ByVal Org As String, ByVal CLID As String)
            Me.Report_TDJDataAsync(Org, CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_TDJDataAsync(ByVal Org As String, ByVal CLID As String, ByVal userState As Object)
            If (Me.Report_TDJDataOperationCompleted Is Nothing) Then
                Me.Report_TDJDataOperationCompleted = AddressOf Me.OnReport_TDJDataOperationCompleted
            End If
            Me.InvokeAsync("Report_TDJData", New Object() {Org, CLID}, Me.Report_TDJDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_TDJDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_TDJDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_TDJDataCompleted(Me, New Report_TDJDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_TCLIDIssueData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_TCLIDIssueData(ByVal CLID As String, ByVal DJ As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_TCLIDIssueData", New Object() {CLID, DJ})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_TCLIDIssueDataAsync(ByVal CLID As String, ByVal DJ As String)
            Me.Report_TCLIDIssueDataAsync(CLID, DJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_TCLIDIssueDataAsync(ByVal CLID As String, ByVal DJ As String, ByVal userState As Object)
            If (Me.Report_TCLIDIssueDataOperationCompleted Is Nothing) Then
                Me.Report_TCLIDIssueDataOperationCompleted = AddressOf Me.OnReport_TCLIDIssueDataOperationCompleted
            End If
            Me.InvokeAsync("Report_TCLIDIssueData", New Object() {CLID, DJ}, Me.Report_TCLIDIssueDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_TCLIDIssueDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_TCLIDIssueDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_TCLIDIssueDataCompleted(Me, New Report_TCLIDIssueDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_TCLIDInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_TCLIDInfo(ByVal CLID As String) As String
            Dim results() As Object = Me.Invoke("Report_TCLIDInfo", New Object() {CLID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_TCLIDInfoAsync(ByVal CLID As String)
            Me.Report_TCLIDInfoAsync(CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_TCLIDInfoAsync(ByVal CLID As String, ByVal userState As Object)
            If (Me.Report_TCLIDInfoOperationCompleted Is Nothing) Then
                Me.Report_TCLIDInfoOperationCompleted = AddressOf Me.OnReport_TCLIDInfoOperationCompleted
            End If
            Me.InvokeAsync("Report_TCLIDInfo", New Object() {CLID}, Me.Report_TCLIDInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_TCLIDInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_TCLIDInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_TCLIDInfoCompleted(Me, New Report_TCLIDInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_AMLIProVSeTrace", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_AMLIProVSeTrace(ByVal Org As String, ByVal SubInv As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_AMLIProVSeTrace", New Object() {Org, SubInv})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_AMLIProVSeTraceAsync(ByVal Org As String, ByVal SubInv As String)
            Me.Report_AMLIProVSeTraceAsync(Org, SubInv, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_AMLIProVSeTraceAsync(ByVal Org As String, ByVal SubInv As String, ByVal userState As Object)
            If (Me.Report_AMLIProVSeTraceOperationCompleted Is Nothing) Then
                Me.Report_AMLIProVSeTraceOperationCompleted = AddressOf Me.OnReport_AMLIProVSeTraceOperationCompleted
            End If
            Me.InvokeAsync("Report_AMLIProVSeTrace", New Object() {Org, SubInv}, Me.Report_AMLIProVSeTraceOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_AMLIProVSeTraceOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_AMLIProVSeTraceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_AMLIProVSeTraceCompleted(Me, New Report_AMLIProVSeTraceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_AMLIProVSeTrace2", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_AMLIProVSeTrace2(ByVal strOrgCode As String, ByVal strSubINV As String, ByVal rtDateFrom As String, ByVal rtDateTo As String, ByVal amlStatus As String, ByVal clidStatus As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_AMLIProVSeTrace2", New Object() {strOrgCode, strSubINV, rtDateFrom, rtDateTo, amlStatus, clidStatus})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_AMLIProVSeTrace2Async(ByVal strOrgCode As String, ByVal strSubINV As String, ByVal rtDateFrom As String, ByVal rtDateTo As String, ByVal amlStatus As String, ByVal clidStatus As String)
            Me.Report_AMLIProVSeTrace2Async(strOrgCode, strSubINV, rtDateFrom, rtDateTo, amlStatus, clidStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_AMLIProVSeTrace2Async(ByVal strOrgCode As String, ByVal strSubINV As String, ByVal rtDateFrom As String, ByVal rtDateTo As String, ByVal amlStatus As String, ByVal clidStatus As String, ByVal userState As Object)
            If (Me.Report_AMLIProVSeTrace2OperationCompleted Is Nothing) Then
                Me.Report_AMLIProVSeTrace2OperationCompleted = AddressOf Me.OnReport_AMLIProVSeTrace2OperationCompleted
            End If
            Me.InvokeAsync("Report_AMLIProVSeTrace2", New Object() {strOrgCode, strSubINV, rtDateFrom, rtDateTo, amlStatus, clidStatus}, Me.Report_AMLIProVSeTrace2OperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_AMLIProVSeTrace2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_AMLIProVSeTrace2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_AMLIProVSeTrace2Completed(Me, New Report_AMLIProVSeTrace2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_TCLIDMSLData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_TCLIDMSLData(ByVal CLId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_TCLIDMSLData", New Object() {CLId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_TCLIDMSLDataAsync(ByVal CLId As String)
            Me.Report_TCLIDMSLDataAsync(CLId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_TCLIDMSLDataAsync(ByVal CLId As String, ByVal userState As Object)
            If (Me.Report_TCLIDMSLDataOperationCompleted Is Nothing) Then
                Me.Report_TCLIDMSLDataOperationCompleted = AddressOf Me.OnReport_TCLIDMSLDataOperationCompleted
            End If
            Me.InvokeAsync("Report_TCLIDMSLData", New Object() {CLId}, Me.Report_TCLIDMSLDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_TCLIDMSLDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_TCLIDMSLDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_TCLIDMSLDataCompleted(Me, New Report_TCLIDMSLDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_MPNOnHand", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_MPNOnHand(ByVal OrgId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_MPNOnHand", New Object() {OrgId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_MPNOnHandAsync(ByVal OrgId As String)
            Me.Report_MPNOnHandAsync(OrgId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_MPNOnHandAsync(ByVal OrgId As String, ByVal userState As Object)
            If (Me.Report_MPNOnHandOperationCompleted Is Nothing) Then
                Me.Report_MPNOnHandOperationCompleted = AddressOf Me.OnReport_MPNOnHandOperationCompleted
            End If
            Me.InvokeAsync("Report_MPNOnHand", New Object() {OrgId}, Me.Report_MPNOnHandOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_MPNOnHandOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_MPNOnHandCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_MPNOnHandCompleted(Me, New Report_MPNOnHandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_OnHandMFGMPN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_OnHandMFGMPN(ByVal Org As String, ByVal Material As String, ByVal SubInv As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_OnHandMFGMPN", New Object() {Org, Material, SubInv})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_OnHandMFGMPNAsync(ByVal Org As String, ByVal Material As String, ByVal SubInv As String)
            Me.Report_OnHandMFGMPNAsync(Org, Material, SubInv, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_OnHandMFGMPNAsync(ByVal Org As String, ByVal Material As String, ByVal SubInv As String, ByVal userState As Object)
            If (Me.Report_OnHandMFGMPNOperationCompleted Is Nothing) Then
                Me.Report_OnHandMFGMPNOperationCompleted = AddressOf Me.OnReport_OnHandMFGMPNOperationCompleted
            End If
            Me.InvokeAsync("Report_OnHandMFGMPN", New Object() {Org, Material, SubInv}, Me.Report_OnHandMFGMPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_OnHandMFGMPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_OnHandMFGMPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_OnHandMFGMPNCompleted(Me, New Report_OnHandMFGMPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_TIssueCompare", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_TIssueCompare(ByVal DJ As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_TIssueCompare", New Object() {DJ})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_TIssueCompareAsync(ByVal DJ As String)
            Me.Report_TIssueCompareAsync(DJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_TIssueCompareAsync(ByVal DJ As String, ByVal userState As Object)
            If (Me.Report_TIssueCompareOperationCompleted Is Nothing) Then
                Me.Report_TIssueCompareOperationCompleted = AddressOf Me.OnReport_TIssueCompareOperationCompleted
            End If
            Me.InvokeAsync("Report_TIssueCompare", New Object() {DJ}, Me.Report_TIssueCompareOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_TIssueCompareOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_TIssueCompareCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_TIssueCompareCompleted(Me, New Report_TIssueCompareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_TMaterialTransfer", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_TMaterialTransfer(ByVal Org As String, ByVal MaterialNo As String, ByVal MPN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_TMaterialTransfer", New Object() {Org, MaterialNo, MPN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_TMaterialTransferAsync(ByVal Org As String, ByVal MaterialNo As String, ByVal MPN As String)
            Me.Report_TMaterialTransferAsync(Org, MaterialNo, MPN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_TMaterialTransferAsync(ByVal Org As String, ByVal MaterialNo As String, ByVal MPN As String, ByVal userState As Object)
            If (Me.Report_TMaterialTransferOperationCompleted Is Nothing) Then
                Me.Report_TMaterialTransferOperationCompleted = AddressOf Me.OnReport_TMaterialTransferOperationCompleted
            End If
            Me.InvokeAsync("Report_TMaterialTransfer", New Object() {Org, MaterialNo, MPN}, Me.Report_TMaterialTransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_TMaterialTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_TMaterialTransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_TMaterialTransferCompleted(Me, New Report_TMaterialTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_GeteTraceOH", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_GeteTraceOH(ByVal Org As String, ByVal ItemNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_GeteTraceOH", New Object() {Org, ItemNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_GeteTraceOHAsync(ByVal Org As String, ByVal ItemNo As String)
            Me.Report_GeteTraceOHAsync(Org, ItemNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_GeteTraceOHAsync(ByVal Org As String, ByVal ItemNo As String, ByVal userState As Object)
            If (Me.Report_GeteTraceOHOperationCompleted Is Nothing) Then
                Me.Report_GeteTraceOHOperationCompleted = AddressOf Me.OnReport_GeteTraceOHOperationCompleted
            End If
            Me.InvokeAsync("Report_GeteTraceOH", New Object() {Org, ItemNo}, Me.Report_GeteTraceOHOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_GeteTraceOHOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_GeteTraceOHCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_GeteTraceOHCompleted(Me, New Report_GeteTraceOHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_StandardTime", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_StandardTime() As String
            Dim results() As Object = Me.Invoke("Report_StandardTime", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_StandardTimeAsync()
            Me.Report_StandardTimeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_StandardTimeAsync(ByVal userState As Object)
            If (Me.Report_StandardTimeOperationCompleted Is Nothing) Then
                Me.Report_StandardTimeOperationCompleted = AddressOf Me.OnReport_StandardTimeOperationCompleted
            End If
            Me.InvokeAsync("Report_StandardTime", New Object(-1) {}, Me.Report_StandardTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_StandardTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_StandardTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_StandardTimeCompleted(Me, New Report_StandardTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_GetOHQTYWithMPNList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_GetOHQTYWithMPNList(ByVal Org As String, ByVal MPNlist As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_GetOHQTYWithMPNList", New Object() {Org, MPNlist})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_GetOHQTYWithMPNListAsync(ByVal Org As String, ByVal MPNlist As String)
            Me.Report_GetOHQTYWithMPNListAsync(Org, MPNlist, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_GetOHQTYWithMPNListAsync(ByVal Org As String, ByVal MPNlist As String, ByVal userState As Object)
            If (Me.Report_GetOHQTYWithMPNListOperationCompleted Is Nothing) Then
                Me.Report_GetOHQTYWithMPNListOperationCompleted = AddressOf Me.OnReport_GetOHQTYWithMPNListOperationCompleted
            End If
            Me.InvokeAsync("Report_GetOHQTYWithMPNList", New Object() {Org, MPNlist}, Me.Report_GetOHQTYWithMPNListOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_GetOHQTYWithMPNListOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_GetOHQTYWithMPNListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_GetOHQTYWithMPNListCompleted(Me, New Report_GetOHQTYWithMPNListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_GeteTraceItemOHMPQ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_GeteTraceItemOHMPQ(ByVal Org As String, ByVal Itemlist As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Report_GeteTraceItemOHMPQ", New Object() {Org, Itemlist})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_GeteTraceItemOHMPQAsync(ByVal Org As String, ByVal Itemlist As String)
            Me.Report_GeteTraceItemOHMPQAsync(Org, Itemlist, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_GeteTraceItemOHMPQAsync(ByVal Org As String, ByVal Itemlist As String, ByVal userState As Object)
            If (Me.Report_GeteTraceItemOHMPQOperationCompleted Is Nothing) Then
                Me.Report_GeteTraceItemOHMPQOperationCompleted = AddressOf Me.OnReport_GeteTraceItemOHMPQOperationCompleted
            End If
            Me.InvokeAsync("Report_GeteTraceItemOHMPQ", New Object() {Org, Itemlist}, Me.Report_GeteTraceItemOHMPQOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_GeteTraceItemOHMPQOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_GeteTraceItemOHMPQCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_GeteTraceItemOHMPQCompleted(Me, New Report_GeteTraceItemOHMPQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Report_GetConnectString", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Report_GetConnectString(ByVal Type As String) As String
            Dim results() As Object = Me.Invoke("Report_GetConnectString", New Object() {Type})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Report_GetConnectStringAsync(ByVal Type As String)
            Me.Report_GetConnectStringAsync(Type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Report_GetConnectStringAsync(ByVal Type As String, ByVal userState As Object)
            If (Me.Report_GetConnectStringOperationCompleted Is Nothing) Then
                Me.Report_GetConnectStringOperationCompleted = AddressOf Me.OnReport_GetConnectStringOperationCompleted
            End If
            Me.InvokeAsync("Report_GetConnectString", New Object() {Type}, Me.Report_GetConnectStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnReport_GetConnectStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.Report_GetConnectStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Report_GetConnectStringCompleted(Me, New Report_GetConnectStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMaterialInfoByCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaterialInfoByCLID(ByVal CLID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMaterialInfoByCLID", New Object() {CLID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaterialInfoByCLIDAsync(ByVal CLID As String)
            Me.GetMaterialInfoByCLIDAsync(CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaterialInfoByCLIDAsync(ByVal CLID As String, ByVal userState As Object)
            If (Me.GetMaterialInfoByCLIDOperationCompleted Is Nothing) Then
                Me.GetMaterialInfoByCLIDOperationCompleted = AddressOf Me.OnGetMaterialInfoByCLIDOperationCompleted
            End If
            Me.InvokeAsync("GetMaterialInfoByCLID", New Object() {CLID}, Me.GetMaterialInfoByCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaterialInfoByCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaterialInfoByCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaterialInfoByCLIDCompleted(Me, New GetMaterialInfoByCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMaterialToXMLByCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaterialToXMLByCLID(ByVal From_MR As Date, ByVal To_MR As Date, ByVal pn As String) As String
            Dim results() As Object = Me.Invoke("GetMaterialToXMLByCLID", New Object() {From_MR, To_MR, pn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaterialToXMLByCLIDAsync(ByVal From_MR As Date, ByVal To_MR As Date, ByVal pn As String)
            Me.GetMaterialToXMLByCLIDAsync(From_MR, To_MR, pn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaterialToXMLByCLIDAsync(ByVal From_MR As Date, ByVal To_MR As Date, ByVal pn As String, ByVal userState As Object)
            If (Me.GetMaterialToXMLByCLIDOperationCompleted Is Nothing) Then
                Me.GetMaterialToXMLByCLIDOperationCompleted = AddressOf Me.OnGetMaterialToXMLByCLIDOperationCompleted
            End If
            Me.InvokeAsync("GetMaterialToXMLByCLID", New Object() {From_MR, To_MR, pn}, Me.GetMaterialToXMLByCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaterialToXMLByCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaterialToXMLByCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaterialToXMLByCLIDCompleted(Me, New GetMaterialToXMLByCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMaterialToXMLByCLID2", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaterialToXMLByCLID2(ByVal From_MR As Date, ByVal To_MR As Date, ByVal pn As String) As String
            Dim results() As Object = Me.Invoke("GetMaterialToXMLByCLID2", New Object() {From_MR, To_MR, pn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaterialToXMLByCLID2Async(ByVal From_MR As Date, ByVal To_MR As Date, ByVal pn As String)
            Me.GetMaterialToXMLByCLID2Async(From_MR, To_MR, pn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaterialToXMLByCLID2Async(ByVal From_MR As Date, ByVal To_MR As Date, ByVal pn As String, ByVal userState As Object)
            If (Me.GetMaterialToXMLByCLID2OperationCompleted Is Nothing) Then
                Me.GetMaterialToXMLByCLID2OperationCompleted = AddressOf Me.OnGetMaterialToXMLByCLID2OperationCompleted
            End If
            Me.InvokeAsync("GetMaterialToXMLByCLID2", New Object() {From_MR, To_MR, pn}, Me.GetMaterialToXMLByCLID2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaterialToXMLByCLID2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaterialToXMLByCLID2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaterialToXMLByCLID2Completed(Me, New GetMaterialToXMLByCLID2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDJToXML", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDJToXML() As String
            Dim results() As Object = Me.Invoke("GetDJToXML", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDJToXMLAsync()
            Me.GetDJToXMLAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDJToXMLAsync(ByVal userState As Object)
            If (Me.GetDJToXMLOperationCompleted Is Nothing) Then
                Me.GetDJToXMLOperationCompleted = AddressOf Me.OnGetDJToXMLOperationCompleted
            End If
            Me.InvokeAsync("GetDJToXML", New Object(-1) {}, Me.GetDJToXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDJToXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDJToXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDJToXMLCompleted(Me, New GetDJToXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMaterialByCLIDToDataSet", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaterialByCLIDToDataSet(ByVal From_MR As Date, ByVal To_MR As Date, ByVal pn As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMaterialByCLIDToDataSet", New Object() {From_MR, To_MR, pn})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaterialByCLIDToDataSetAsync(ByVal From_MR As Date, ByVal To_MR As Date, ByVal pn As String)
            Me.GetMaterialByCLIDToDataSetAsync(From_MR, To_MR, pn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaterialByCLIDToDataSetAsync(ByVal From_MR As Date, ByVal To_MR As Date, ByVal pn As String, ByVal userState As Object)
            If (Me.GetMaterialByCLIDToDataSetOperationCompleted Is Nothing) Then
                Me.GetMaterialByCLIDToDataSetOperationCompleted = AddressOf Me.OnGetMaterialByCLIDToDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetMaterialByCLIDToDataSet", New Object() {From_MR, To_MR, pn}, Me.GetMaterialByCLIDToDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaterialByCLIDToDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaterialByCLIDToDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaterialByCLIDToDataSetCompleted(Me, New GetMaterialByCLIDToDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetReturnCLIDByDate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReturnCLIDByDate(ByVal From_RTN As Date, ByVal To_RTN As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReturnCLIDByDate", New Object() {From_RTN, To_RTN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReturnCLIDByDateAsync(ByVal From_RTN As Date, ByVal To_RTN As Date)
            Me.GetReturnCLIDByDateAsync(From_RTN, To_RTN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReturnCLIDByDateAsync(ByVal From_RTN As Date, ByVal To_RTN As Date, ByVal userState As Object)
            If (Me.GetReturnCLIDByDateOperationCompleted Is Nothing) Then
                Me.GetReturnCLIDByDateOperationCompleted = AddressOf Me.OnGetReturnCLIDByDateOperationCompleted
            End If
            Me.InvokeAsync("GetReturnCLIDByDate", New Object() {From_RTN, To_RTN}, Me.GetReturnCLIDByDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReturnCLIDByDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReturnCLIDByDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReturnCLIDByDateCompleted(Me, New GetReturnCLIDByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidReqlineStatus", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidReqlineStatus(ByVal p_orgcode As String, ByVal p_dnpo As String, ByVal p_input_type As String, ByVal p_ejit_id As Integer) As String
            Dim results() As Object = Me.Invoke("ValidReqlineStatus", New Object() {p_orgcode, p_dnpo, p_input_type, p_ejit_id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidReqlineStatusAsync(ByVal p_orgcode As String, ByVal p_dnpo As String, ByVal p_input_type As String, ByVal p_ejit_id As Integer)
            Me.ValidReqlineStatusAsync(p_orgcode, p_dnpo, p_input_type, p_ejit_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidReqlineStatusAsync(ByVal p_orgcode As String, ByVal p_dnpo As String, ByVal p_input_type As String, ByVal p_ejit_id As Integer, ByVal userState As Object)
            If (Me.ValidReqlineStatusOperationCompleted Is Nothing) Then
                Me.ValidReqlineStatusOperationCompleted = AddressOf Me.OnValidReqlineStatusOperationCompleted
            End If
            Me.InvokeAsync("ValidReqlineStatus", New Object() {p_orgcode, p_dnpo, p_input_type, p_ejit_id}, Me.ValidReqlineStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidReqlineStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidReqlineStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidReqlineStatusCompleted(Me, New ValidReqlineStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getMatlByDJModel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMatlByDJModel(ByVal DJ As String, ByVal PartNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMatlByDJModel", New Object() {DJ, PartNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMatlByDJModelAsync(ByVal DJ As String, ByVal PartNo As String)
            Me.getMatlByDJModelAsync(DJ, PartNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMatlByDJModelAsync(ByVal DJ As String, ByVal PartNo As String, ByVal userState As Object)
            If (Me.getMatlByDJModelOperationCompleted Is Nothing) Then
                Me.getMatlByDJModelOperationCompleted = AddressOf Me.OngetMatlByDJModelOperationCompleted
            End If
            Me.InvokeAsync("getMatlByDJModel", New Object() {DJ, PartNo}, Me.getMatlByDJModelOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMatlByDJModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMatlByDJModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMatlByDJModelCompleted(Me, New getMatlByDJModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMatlByCLIDDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMatlByCLIDDJ(ByVal CLID As String, ByVal DJ As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMatlByCLIDDJ", New Object() {CLID, DJ})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMatlByCLIDDJAsync(ByVal CLID As String, ByVal DJ As String)
            Me.GetMatlByCLIDDJAsync(CLID, DJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMatlByCLIDDJAsync(ByVal CLID As String, ByVal DJ As String, ByVal userState As Object)
            If (Me.GetMatlByCLIDDJOperationCompleted Is Nothing) Then
                Me.GetMatlByCLIDDJOperationCompleted = AddressOf Me.OnGetMatlByCLIDDJOperationCompleted
            End If
            Me.InvokeAsync("GetMatlByCLIDDJ", New Object() {CLID, DJ}, Me.GetMatlByCLIDDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMatlByCLIDDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMatlByCLIDDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMatlByCLIDDJCompleted(Me, New GetMatlByCLIDDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getMatlCLIDbyDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMatlCLIDbyDJ(ByVal DJ As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMatlCLIDbyDJ", New Object() {DJ})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMatlCLIDbyDJAsync(ByVal DJ As String)
            Me.getMatlCLIDbyDJAsync(DJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMatlCLIDbyDJAsync(ByVal DJ As String, ByVal userState As Object)
            If (Me.getMatlCLIDbyDJOperationCompleted Is Nothing) Then
                Me.getMatlCLIDbyDJOperationCompleted = AddressOf Me.OngetMatlCLIDbyDJOperationCompleted
            End If
            Me.InvokeAsync("getMatlCLIDbyDJ", New Object() {DJ}, Me.getMatlCLIDbyDJOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMatlCLIDbyDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMatlCLIDbyDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMatlCLIDbyDJCompleted(Me, New getMatlCLIDbyDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintLabels", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintLabels(ByVal Printer As String, ByVal labelFile As String, ByVal strContent As String) As String
            Dim results() As Object = Me.Invoke("PrintLabels", New Object() {Printer, labelFile, strContent})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintLabelsAsync(ByVal Printer As String, ByVal labelFile As String, ByVal strContent As String)
            Me.PrintLabelsAsync(Printer, labelFile, strContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintLabelsAsync(ByVal Printer As String, ByVal labelFile As String, ByVal strContent As String, ByVal userState As Object)
            If (Me.PrintLabelsOperationCompleted Is Nothing) Then
                Me.PrintLabelsOperationCompleted = AddressOf Me.OnPrintLabelsOperationCompleted
            End If
            Me.InvokeAsync("PrintLabels", New Object() {Printer, labelFile, strContent}, Me.PrintLabelsOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintLabelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintLabelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintLabelsCompleted(Me, New PrintLabelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveEMCResult", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveEMCResult(ByVal sn As String, ByVal processname As String, ByVal result As String, ByVal userid As String) As String
            Dim results() As Object = Me.Invoke("SaveEMCResult", New Object() {sn, processname, result, userid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveEMCResultAsync(ByVal sn As String, ByVal processname As String, ByVal result As String, ByVal userid As String)
            Me.SaveEMCResultAsync(sn, processname, result, userid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveEMCResultAsync(ByVal sn As String, ByVal processname As String, ByVal result As String, ByVal userid As String, ByVal userState As Object)
            If (Me.SaveEMCResultOperationCompleted Is Nothing) Then
                Me.SaveEMCResultOperationCompleted = AddressOf Me.OnSaveEMCResultOperationCompleted
            End If
            Me.InvokeAsync("SaveEMCResult", New Object() {sn, processname, result, userid}, Me.SaveEMCResultOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveEMCResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveEMCResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveEMCResultCompleted(Me, New SaveEMCResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintMacAddress", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintMacAddress(ByVal macType As String, ByVal addressTotal As Integer, ByVal user As String, ByVal printerName As String) As String
            Dim results() As Object = Me.Invoke("PrintMacAddress", New Object() {macType, addressTotal, user, printerName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintMacAddressAsync(ByVal macType As String, ByVal addressTotal As Integer, ByVal user As String, ByVal printerName As String)
            Me.PrintMacAddressAsync(macType, addressTotal, user, printerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintMacAddressAsync(ByVal macType As String, ByVal addressTotal As Integer, ByVal user As String, ByVal printerName As String, ByVal userState As Object)
            If (Me.PrintMacAddressOperationCompleted Is Nothing) Then
                Me.PrintMacAddressOperationCompleted = AddressOf Me.OnPrintMacAddressOperationCompleted
            End If
            Me.InvokeAsync("PrintMacAddress", New Object() {macType, addressTotal, user, printerName}, Me.PrintMacAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintMacAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintMacAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintMacAddressCompleted(Me, New PrintMacAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReprintMacAddress", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReprintMacAddress(ByVal macType As String, ByVal startAddress As String, ByVal endAddress As String, ByVal user As String, ByVal printerName As String) As String
            Dim results() As Object = Me.Invoke("ReprintMacAddress", New Object() {macType, startAddress, endAddress, user, printerName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReprintMacAddressAsync(ByVal macType As String, ByVal startAddress As String, ByVal endAddress As String, ByVal user As String, ByVal printerName As String)
            Me.ReprintMacAddressAsync(macType, startAddress, endAddress, user, printerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReprintMacAddressAsync(ByVal macType As String, ByVal startAddress As String, ByVal endAddress As String, ByVal user As String, ByVal printerName As String, ByVal userState As Object)
            If (Me.ReprintMacAddressOperationCompleted Is Nothing) Then
                Me.ReprintMacAddressOperationCompleted = AddressOf Me.OnReprintMacAddressOperationCompleted
            End If
            Me.InvokeAsync("ReprintMacAddress", New Object() {macType, startAddress, endAddress, user, printerName}, Me.ReprintMacAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnReprintMacAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReprintMacAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReprintMacAddressCompleted(Me, New ReprintMacAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPreMacAddress", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPreMacAddress(ByVal AddressType As String) As String
            Dim results() As Object = Me.Invoke("GetPreMacAddress", New Object() {AddressType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPreMacAddressAsync(ByVal AddressType As String)
            Me.GetPreMacAddressAsync(AddressType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPreMacAddressAsync(ByVal AddressType As String, ByVal userState As Object)
            If (Me.GetPreMacAddressOperationCompleted Is Nothing) Then
                Me.GetPreMacAddressOperationCompleted = AddressOf Me.OnGetPreMacAddressOperationCompleted
            End If
            Me.InvokeAsync("GetPreMacAddress", New Object() {AddressType}, Me.GetPreMacAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPreMacAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPreMacAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPreMacAddressCompleted(Me, New GetPreMacAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetLengthMacAddress", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLengthMacAddress(ByVal Category As String) As String
            Dim results() As Object = Me.Invoke("GetLengthMacAddress", New Object() {Category})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLengthMacAddressAsync(ByVal Category As String)
            Me.GetLengthMacAddressAsync(Category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLengthMacAddressAsync(ByVal Category As String, ByVal userState As Object)
            If (Me.GetLengthMacAddressOperationCompleted Is Nothing) Then
                Me.GetLengthMacAddressOperationCompleted = AddressOf Me.OnGetLengthMacAddressOperationCompleted
            End If
            Me.InvokeAsync("GetLengthMacAddress", New Object() {Category}, Me.GetLengthMacAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLengthMacAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLengthMacAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLengthMacAddressCompleted(Me, New GetLengthMacAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetTraveller", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTraveller(ByVal model As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetTraveller", New Object() {model})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTravellerAsync(ByVal model As String)
            Me.GetTravellerAsync(model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTravellerAsync(ByVal model As String, ByVal userState As Object)
            If (Me.GetTravellerOperationCompleted Is Nothing) Then
                Me.GetTravellerOperationCompleted = AddressOf Me.OnGetTravellerOperationCompleted
            End If
            Me.InvokeAsync("GetTraveller", New Object() {model}, Me.GetTravellerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTravellerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTravellerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTravellerCompleted(Me, New GetTravellerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetAllTravellerData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllTravellerData() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetAllTravellerData", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllTravellerDataAsync()
            Me.GetAllTravellerDataAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllTravellerDataAsync(ByVal userState As Object)
            If (Me.GetAllTravellerDataOperationCompleted Is Nothing) Then
                Me.GetAllTravellerDataOperationCompleted = AddressOf Me.OnGetAllTravellerDataOperationCompleted
            End If
            Me.InvokeAsync("GetAllTravellerData", New Object(-1) {}, Me.GetAllTravellerDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllTravellerDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllTravellerDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllTravellerDataCompleted(Me, New GetAllTravellerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateTravellerInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTravellerInfo(ByVal ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UpdateTravellerInfo", New Object() {ds})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTravellerInfoAsync(ByVal ds As System.Data.DataSet)
            Me.UpdateTravellerInfoAsync(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTravellerInfoAsync(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateTravellerInfoOperationCompleted Is Nothing) Then
                Me.UpdateTravellerInfoOperationCompleted = AddressOf Me.OnUpdateTravellerInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateTravellerInfo", New Object() {ds}, Me.UpdateTravellerInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTravellerInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTravellerInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTravellerInfoCompleted(Me, New UpdateTravellerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetAllModels", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllModels() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetAllModels", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllModelsAsync()
            Me.GetAllModelsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllModelsAsync(ByVal userState As Object)
            If (Me.GetAllModelsOperationCompleted Is Nothing) Then
                Me.GetAllModelsOperationCompleted = AddressOf Me.OnGetAllModelsOperationCompleted
            End If
            Me.InvokeAsync("GetAllModels", New Object(-1) {}, Me.GetAllModelsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllModelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllModelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllModelsCompleted(Me, New GetAllModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DeleteModel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteModel(ByVal model As String) As Object
            Dim results() As Object = Me.Invoke("DeleteModel", New Object() {model})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteModelAsync(ByVal model As String)
            Me.DeleteModelAsync(model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteModelAsync(ByVal model As String, ByVal userState As Object)
            If (Me.DeleteModelOperationCompleted Is Nothing) Then
                Me.DeleteModelOperationCompleted = AddressOf Me.OnDeleteModelOperationCompleted
            End If
            Me.InvokeAsync("DeleteModel", New Object() {model}, Me.DeleteModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteModelCompleted(Me, New DeleteModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPrinterServer", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPrinterServer() As String
            Dim results() As Object = Me.Invoke("GetPrinterServer", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPrinterServerAsync()
            Me.GetPrinterServerAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPrinterServerAsync(ByVal userState As Object)
            If (Me.GetPrinterServerOperationCompleted Is Nothing) Then
                Me.GetPrinterServerOperationCompleted = AddressOf Me.OnGetPrinterServerOperationCompleted
            End If
            Me.InvokeAsync("GetPrinterServer", New Object(-1) {}, Me.GetPrinterServerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPrinterServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPrinterServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPrinterServerCompleted(Me, New GetPrinterServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDaughterBdByDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDaughterBdByDJ(ByVal DJ As String, ByVal Flag As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDaughterBdByDJ", New Object() {DJ, Flag})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDaughterBdByDJAsync(ByVal DJ As String, ByVal Flag As String)
            Me.GetDaughterBdByDJAsync(DJ, Flag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDaughterBdByDJAsync(ByVal DJ As String, ByVal Flag As String, ByVal userState As Object)
            If (Me.GetDaughterBdByDJOperationCompleted Is Nothing) Then
                Me.GetDaughterBdByDJOperationCompleted = AddressOf Me.OnGetDaughterBdByDJOperationCompleted
            End If
            Me.InvokeAsync("GetDaughterBdByDJ", New Object() {DJ, Flag}, Me.GetDaughterBdByDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDaughterBdByDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDaughterBdByDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDaughterBdByDJCompleted(Me, New GetDaughterBdByDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSMTQCByDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMTQCByDJ(ByVal DJ As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetSMTQCByDJ", New Object() {DJ})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMTQCByDJAsync(ByVal DJ As String)
            Me.GetSMTQCByDJAsync(DJ, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMTQCByDJAsync(ByVal DJ As String, ByVal userState As Object)
            If (Me.GetSMTQCByDJOperationCompleted Is Nothing) Then
                Me.GetSMTQCByDJOperationCompleted = AddressOf Me.OnGetSMTQCByDJOperationCompleted
            End If
            Me.InvokeAsync("GetSMTQCByDJ", New Object() {DJ}, Me.GetSMTQCByDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMTQCByDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMTQCByDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMTQCByDJCompleted(Me, New GetSMTQCByDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSMTQCModels", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMTQCModels(ByVal lineType As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetSMTQCModels", New Object() {lineType})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMTQCModelsAsync(ByVal lineType As String)
            Me.GetSMTQCModelsAsync(lineType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMTQCModelsAsync(ByVal lineType As String, ByVal userState As Object)
            If (Me.GetSMTQCModelsOperationCompleted Is Nothing) Then
                Me.GetSMTQCModelsOperationCompleted = AddressOf Me.OnGetSMTQCModelsOperationCompleted
            End If
            Me.InvokeAsync("GetSMTQCModels", New Object() {lineType}, Me.GetSMTQCModelsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMTQCModelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMTQCModelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMTQCModelsCompleted(Me, New GetSMTQCModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveSMTQCData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveSMTQCData(ByVal dtSMTQC As System.Data.DataTable, ByVal paras() As String) As String
            Dim results() As Object = Me.Invoke("SaveSMTQCData", New Object() {dtSMTQC, paras})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveSMTQCDataAsync(ByVal dtSMTQC As System.Data.DataTable, ByVal paras() As String)
            Me.SaveSMTQCDataAsync(dtSMTQC, paras, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveSMTQCDataAsync(ByVal dtSMTQC As System.Data.DataTable, ByVal paras() As String, ByVal userState As Object)
            If (Me.SaveSMTQCDataOperationCompleted Is Nothing) Then
                Me.SaveSMTQCDataOperationCompleted = AddressOf Me.OnSaveSMTQCDataOperationCompleted
            End If
            Me.InvokeAsync("SaveSMTQCData", New Object() {dtSMTQC, paras}, Me.SaveSMTQCDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveSMTQCDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveSMTQCDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveSMTQCDataCompleted(Me, New SaveSMTQCDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetAllSMTQCData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllSMTQCData(ByVal para() As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetAllSMTQCData", New Object() {para})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllSMTQCDataAsync(ByVal para() As String)
            Me.GetAllSMTQCDataAsync(para, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllSMTQCDataAsync(ByVal para() As String, ByVal userState As Object)
            If (Me.GetAllSMTQCDataOperationCompleted Is Nothing) Then
                Me.GetAllSMTQCDataOperationCompleted = AddressOf Me.OnGetAllSMTQCDataOperationCompleted
            End If
            Me.InvokeAsync("GetAllSMTQCData", New Object() {para}, Me.GetAllSMTQCDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllSMTQCDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllSMTQCDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllSMTQCDataCompleted(Me, New GetAllSMTQCDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DeleteSMTQCData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSMTQCData(ByVal para() As String) As String
            Dim results() As Object = Me.Invoke("DeleteSMTQCData", New Object() {para})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSMTQCDataAsync(ByVal para() As String)
            Me.DeleteSMTQCDataAsync(para, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSMTQCDataAsync(ByVal para() As String, ByVal userState As Object)
            If (Me.DeleteSMTQCDataOperationCompleted Is Nothing) Then
                Me.DeleteSMTQCDataOperationCompleted = AddressOf Me.OnDeleteSMTQCDataOperationCompleted
            End If
            Me.InvokeAsync("DeleteSMTQCData", New Object() {para}, Me.DeleteSMTQCDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSMTQCDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSMTQCDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSMTQCDataCompleted(Me, New DeleteSMTQCDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LookUpProductInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LookUpProductInfo() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LookUpProductInfo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LookUpProductInfoAsync()
            Me.LookUpProductInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LookUpProductInfoAsync(ByVal userState As Object)
            If (Me.LookUpProductInfoOperationCompleted Is Nothing) Then
                Me.LookUpProductInfoOperationCompleted = AddressOf Me.OnLookUpProductInfoOperationCompleted
            End If
            Me.InvokeAsync("LookUpProductInfo", New Object(-1) {}, Me.LookUpProductInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnLookUpProductInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.LookUpProductInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LookUpProductInfoCompleted(Me, New LookUpProductInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RevinBox", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RevinBox(ByVal BoxID As String) As String
            Dim results() As Object = Me.Invoke("RevinBox", New Object() {BoxID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RevinBoxAsync(ByVal BoxID As String)
            Me.RevinBoxAsync(BoxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RevinBoxAsync(ByVal BoxID As String, ByVal userState As Object)
            If (Me.RevinBoxOperationCompleted Is Nothing) Then
                Me.RevinBoxOperationCompleted = AddressOf Me.OnRevinBoxOperationCompleted
            End If
            Me.InvokeAsync("RevinBox", New Object() {BoxID}, Me.RevinBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnRevinBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.RevinBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RevinBoxCompleted(Me, New RevinBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CloneProductInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloneProductInfo(ByVal newModel As String, ByVal originalModel As String, ByVal userName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CloneProductInfo", New Object() {newModel, originalModel, userName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloneProductInfoAsync(ByVal newModel As String, ByVal originalModel As String, ByVal userName As String)
            Me.CloneProductInfoAsync(newModel, originalModel, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloneProductInfoAsync(ByVal newModel As String, ByVal originalModel As String, ByVal userName As String, ByVal userState As Object)
            If (Me.CloneProductInfoOperationCompleted Is Nothing) Then
                Me.CloneProductInfoOperationCompleted = AddressOf Me.OnCloneProductInfoOperationCompleted
            End If
            Me.InvokeAsync("CloneProductInfo", New Object() {newModel, originalModel, userName}, Me.CloneProductInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloneProductInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloneProductInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloneProductInfoCompleted(Me, New CloneProductInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadProductInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadProductInfo(ByVal productModel As ProductModel) As String
            Dim results() As Object = Me.Invoke("UploadProductInfo", New Object() {productModel})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadProductInfoAsync(ByVal productModel As ProductModel)
            Me.UploadProductInfoAsync(productModel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadProductInfoAsync(ByVal productModel As ProductModel, ByVal userState As Object)
            If (Me.UploadProductInfoOperationCompleted Is Nothing) Then
                Me.UploadProductInfoOperationCompleted = AddressOf Me.OnUploadProductInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadProductInfo", New Object() {productModel}, Me.UploadProductInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadProductInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadProductInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadProductInfoCompleted(Me, New UploadProductInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LookUpMSLInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LookUpMSLInfo(ByVal model As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LookUpMSLInfo", New Object() {model})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LookUpMSLInfoAsync(ByVal model As String)
            Me.LookUpMSLInfoAsync(model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LookUpMSLInfoAsync(ByVal model As String, ByVal userState As Object)
            If (Me.LookUpMSLInfoOperationCompleted Is Nothing) Then
                Me.LookUpMSLInfoOperationCompleted = AddressOf Me.OnLookUpMSLInfoOperationCompleted
            End If
            Me.InvokeAsync("LookUpMSLInfo", New Object() {model}, Me.LookUpMSLInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnLookUpMSLInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.LookUpMSLInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LookUpMSLInfoCompleted(Me, New LookUpMSLInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadProductCPN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadProductCPN(ByVal productCPN As System.Data.DataTable, ByVal model As String, ByVal changedBy As String) As String
            Dim results() As Object = Me.Invoke("UploadProductCPN", New Object() {productCPN, model, changedBy})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadProductCPNAsync(ByVal productCPN As System.Data.DataTable, ByVal model As String, ByVal changedBy As String)
            Me.UploadProductCPNAsync(productCPN, model, changedBy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadProductCPNAsync(ByVal productCPN As System.Data.DataTable, ByVal model As String, ByVal changedBy As String, ByVal userState As Object)
            If (Me.UploadProductCPNOperationCompleted Is Nothing) Then
                Me.UploadProductCPNOperationCompleted = AddressOf Me.OnUploadProductCPNOperationCompleted
            End If
            Me.InvokeAsync("UploadProductCPN", New Object() {productCPN, model, changedBy}, Me.UploadProductCPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadProductCPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadProductCPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadProductCPNCompleted(Me, New UploadProductCPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LookUpLabelPara", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LookUpLabelPara(ByVal labelID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LookUpLabelPara", New Object() {labelID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LookUpLabelParaAsync(ByVal labelID As String)
            Me.LookUpLabelParaAsync(labelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LookUpLabelParaAsync(ByVal labelID As String, ByVal userState As Object)
            If (Me.LookUpLabelParaOperationCompleted Is Nothing) Then
                Me.LookUpLabelParaOperationCompleted = AddressOf Me.OnLookUpLabelParaOperationCompleted
            End If
            Me.InvokeAsync("LookUpLabelPara", New Object() {labelID}, Me.LookUpLabelParaOperationCompleted, userState)
        End Sub
        
        Private Sub OnLookUpLabelParaOperationCompleted(ByVal arg As Object)
            If (Not (Me.LookUpLabelParaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LookUpLabelParaCompleted(Me, New LookUpLabelParaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LookUpTransPara", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LookUpTransPara(ByVal transId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LookUpTransPara", New Object() {transId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LookUpTransParaAsync(ByVal transId As String)
            Me.LookUpTransParaAsync(transId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LookUpTransParaAsync(ByVal transId As String, ByVal userState As Object)
            If (Me.LookUpTransParaOperationCompleted Is Nothing) Then
                Me.LookUpTransParaOperationCompleted = AddressOf Me.OnLookUpTransParaOperationCompleted
            End If
            Me.InvokeAsync("LookUpTransPara", New Object() {transId}, Me.LookUpTransParaOperationCompleted, userState)
        End Sub
        
        Private Sub OnLookUpTransParaOperationCompleted(ByVal arg As Object)
            If (Not (Me.LookUpTransParaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LookUpTransParaCompleted(Me, New LookUpTransParaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LookUpSFCInfoByModel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LookUpSFCInfoByModel(ByVal model As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LookUpSFCInfoByModel", New Object() {model})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LookUpSFCInfoByModelAsync(ByVal model As String)
            Me.LookUpSFCInfoByModelAsync(model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LookUpSFCInfoByModelAsync(ByVal model As String, ByVal userState As Object)
            If (Me.LookUpSFCInfoByModelOperationCompleted Is Nothing) Then
                Me.LookUpSFCInfoByModelOperationCompleted = AddressOf Me.OnLookUpSFCInfoByModelOperationCompleted
            End If
            Me.InvokeAsync("LookUpSFCInfoByModel", New Object() {model}, Me.LookUpSFCInfoByModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnLookUpSFCInfoByModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.LookUpSFCInfoByModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LookUpSFCInfoByModelCompleted(Me, New LookUpSFCInfoByModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadProductStructure", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadProductStructure(ByVal productStructure As System.Data.DataTable, ByVal model As String) As String
            Dim results() As Object = Me.Invoke("UploadProductStructure", New Object() {productStructure, model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadProductStructureAsync(ByVal productStructure As System.Data.DataTable, ByVal model As String)
            Me.UploadProductStructureAsync(productStructure, model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadProductStructureAsync(ByVal productStructure As System.Data.DataTable, ByVal model As String, ByVal userState As Object)
            If (Me.UploadProductStructureOperationCompleted Is Nothing) Then
                Me.UploadProductStructureOperationCompleted = AddressOf Me.OnUploadProductStructureOperationCompleted
            End If
            Me.InvokeAsync("UploadProductStructure", New Object() {productStructure, model}, Me.UploadProductStructureOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadProductStructureOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadProductStructureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadProductStructureCompleted(Me, New UploadProductStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadProductRouting", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadProductRouting(ByVal productRouting As System.Data.DataTable, ByVal model As String) As String
            Dim results() As Object = Me.Invoke("UploadProductRouting", New Object() {productRouting, model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadProductRoutingAsync(ByVal productRouting As System.Data.DataTable, ByVal model As String)
            Me.UploadProductRoutingAsync(productRouting, model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadProductRoutingAsync(ByVal productRouting As System.Data.DataTable, ByVal model As String, ByVal userState As Object)
            If (Me.UploadProductRoutingOperationCompleted Is Nothing) Then
                Me.UploadProductRoutingOperationCompleted = AddressOf Me.OnUploadProductRoutingOperationCompleted
            End If
            Me.InvokeAsync("UploadProductRouting", New Object() {productRouting, model}, Me.UploadProductRoutingOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadProductRoutingOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadProductRoutingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadProductRoutingCompleted(Me, New UploadProductRoutingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadProductProperties", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadProductProperties(ByVal productProperties As System.Data.DataTable, ByVal model As String) As String
            Dim results() As Object = Me.Invoke("UploadProductProperties", New Object() {productProperties, model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadProductPropertiesAsync(ByVal productProperties As System.Data.DataTable, ByVal model As String)
            Me.UploadProductPropertiesAsync(productProperties, model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadProductPropertiesAsync(ByVal productProperties As System.Data.DataTable, ByVal model As String, ByVal userState As Object)
            If (Me.UploadProductPropertiesOperationCompleted Is Nothing) Then
                Me.UploadProductPropertiesOperationCompleted = AddressOf Me.OnUploadProductPropertiesOperationCompleted
            End If
            Me.InvokeAsync("UploadProductProperties", New Object() {productProperties, model}, Me.UploadProductPropertiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadProductPropertiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadProductPropertiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadProductPropertiesCompleted(Me, New UploadProductPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadLabelInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadLabelInfo(ByVal labelModel As LabelModel, ByVal dtLabelPara As System.Data.DataTable) As String
            Dim results() As Object = Me.Invoke("UploadLabelInfo", New Object() {labelModel, dtLabelPara})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadLabelInfoAsync(ByVal labelModel As LabelModel, ByVal dtLabelPara As System.Data.DataTable)
            Me.UploadLabelInfoAsync(labelModel, dtLabelPara, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadLabelInfoAsync(ByVal labelModel As LabelModel, ByVal dtLabelPara As System.Data.DataTable, ByVal userState As Object)
            If (Me.UploadLabelInfoOperationCompleted Is Nothing) Then
                Me.UploadLabelInfoOperationCompleted = AddressOf Me.OnUploadLabelInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadLabelInfo", New Object() {labelModel, dtLabelPara}, Me.UploadLabelInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadLabelInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadLabelInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadLabelInfoCompleted(Me, New UploadLabelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadProcessInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadProcessInfo(ByVal processEntity As System.Data.DataTable, ByVal userName As String) As String
            Dim results() As Object = Me.Invoke("UploadProcessInfo", New Object() {processEntity, userName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadProcessInfoAsync(ByVal processEntity As System.Data.DataTable, ByVal userName As String)
            Me.UploadProcessInfoAsync(processEntity, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadProcessInfoAsync(ByVal processEntity As System.Data.DataTable, ByVal userName As String, ByVal userState As Object)
            If (Me.UploadProcessInfoOperationCompleted Is Nothing) Then
                Me.UploadProcessInfoOperationCompleted = AddressOf Me.OnUploadProcessInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadProcessInfo", New Object() {processEntity, userName}, Me.UploadProcessInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadProcessInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadProcessInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadProcessInfoCompleted(Me, New UploadProcessInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadTransInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTransInfo(ByVal labelArray() As String, ByVal transEntity As System.Data.DataTable) As String
            Dim results() As Object = Me.Invoke("UploadTransInfo", New Object() {labelArray, transEntity})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTransInfoAsync(ByVal labelArray() As String, ByVal transEntity As System.Data.DataTable)
            Me.UploadTransInfoAsync(labelArray, transEntity, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTransInfoAsync(ByVal labelArray() As String, ByVal transEntity As System.Data.DataTable, ByVal userState As Object)
            If (Me.UploadTransInfoOperationCompleted Is Nothing) Then
                Me.UploadTransInfoOperationCompleted = AddressOf Me.OnUploadTransInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadTransInfo", New Object() {labelArray, transEntity}, Me.UploadTransInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTransInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTransInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTransInfoCompleted(Me, New UploadTransInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IsAuthenticateUser", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsAuthenticateUser(ByVal userId As String) As Boolean
            Dim results() As Object = Me.Invoke("IsAuthenticateUser", New Object() {userId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsAuthenticateUserAsync(ByVal userId As String)
            Me.IsAuthenticateUserAsync(userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsAuthenticateUserAsync(ByVal userId As String, ByVal userState As Object)
            If (Me.IsAuthenticateUserOperationCompleted Is Nothing) Then
                Me.IsAuthenticateUserOperationCompleted = AddressOf Me.OnIsAuthenticateUserOperationCompleted
            End If
            Me.InvokeAsync("IsAuthenticateUser", New Object() {userId}, Me.IsAuthenticateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsAuthenticateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsAuthenticateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsAuthenticateUserCompleted(Me, New IsAuthenticateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LookUpRoutingInfoBy", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LookUpRoutingInfoBy(ByVal routingId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LookUpRoutingInfoBy", New Object() {routingId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LookUpRoutingInfoByAsync(ByVal routingId As String)
            Me.LookUpRoutingInfoByAsync(routingId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LookUpRoutingInfoByAsync(ByVal routingId As String, ByVal userState As Object)
            If (Me.LookUpRoutingInfoByOperationCompleted Is Nothing) Then
                Me.LookUpRoutingInfoByOperationCompleted = AddressOf Me.OnLookUpRoutingInfoByOperationCompleted
            End If
            Me.InvokeAsync("LookUpRoutingInfoBy", New Object() {routingId}, Me.LookUpRoutingInfoByOperationCompleted, userState)
        End Sub
        
        Private Sub OnLookUpRoutingInfoByOperationCompleted(ByVal arg As Object)
            If (Not (Me.LookUpRoutingInfoByCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LookUpRoutingInfoByCompleted(Me, New LookUpRoutingInfoByCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateRoutingInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRoutingInfo(ByVal dsRouting As System.Data.DataSet, ByVal list() As Object) As String
            Dim results() As Object = Me.Invoke("UpdateRoutingInfo", New Object() {dsRouting, list})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRoutingInfoAsync(ByVal dsRouting As System.Data.DataSet, ByVal list() As Object)
            Me.UpdateRoutingInfoAsync(dsRouting, list, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRoutingInfoAsync(ByVal dsRouting As System.Data.DataSet, ByVal list() As Object, ByVal userState As Object)
            If (Me.UpdateRoutingInfoOperationCompleted Is Nothing) Then
                Me.UpdateRoutingInfoOperationCompleted = AddressOf Me.OnUpdateRoutingInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateRoutingInfo", New Object() {dsRouting, list}, Me.UpdateRoutingInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRoutingInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRoutingInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRoutingInfoCompleted(Me, New UpdateRoutingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetProductLineInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductLineInfo() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProductLineInfo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductLineInfoAsync()
            Me.GetProductLineInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductLineInfoAsync(ByVal userState As Object)
            If (Me.GetProductLineInfoOperationCompleted Is Nothing) Then
                Me.GetProductLineInfoOperationCompleted = AddressOf Me.OnGetProductLineInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProductLineInfo", New Object(-1) {}, Me.GetProductLineInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductLineInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductLineInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductLineInfoCompleted(Me, New GetProductLineInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IsReworkUnit", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsReworkUnit(ByVal WIPID As String) As String
            Dim results() As Object = Me.Invoke("IsReworkUnit", New Object() {WIPID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsReworkUnitAsync(ByVal WIPID As String)
            Me.IsReworkUnitAsync(WIPID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsReworkUnitAsync(ByVal WIPID As String, ByVal userState As Object)
            If (Me.IsReworkUnitOperationCompleted Is Nothing) Then
                Me.IsReworkUnitOperationCompleted = AddressOf Me.OnIsReworkUnitOperationCompleted
            End If
            Me.InvokeAsync("IsReworkUnit", New Object() {WIPID}, Me.IsReworkUnitOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsReworkUnitOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsReworkUnitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsReworkUnitCompleted(Me, New IsReworkUnitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IsLastProcess", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsLastProcess(ByVal Model As String, ByVal PCBA As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("IsLastProcess", New Object() {Model, PCBA, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsLastProcessAsync(ByVal Model As String, ByVal PCBA As String, ByVal Process As String)
            Me.IsLastProcessAsync(Model, PCBA, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsLastProcessAsync(ByVal Model As String, ByVal PCBA As String, ByVal Process As String, ByVal userState As Object)
            If (Me.IsLastProcessOperationCompleted Is Nothing) Then
                Me.IsLastProcessOperationCompleted = AddressOf Me.OnIsLastProcessOperationCompleted
            End If
            Me.InvokeAsync("IsLastProcess", New Object() {Model, PCBA, Process}, Me.IsLastProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsLastProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsLastProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsLastProcessCompleted(Me, New IsLastProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/IsBottomPCBA", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsBottomPCBA(ByVal Model As String, ByVal PCBA As String) As String
            Dim results() As Object = Me.Invoke("IsBottomPCBA", New Object() {Model, PCBA})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsBottomPCBAAsync(ByVal Model As String, ByVal PCBA As String)
            Me.IsBottomPCBAAsync(Model, PCBA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsBottomPCBAAsync(ByVal Model As String, ByVal PCBA As String, ByVal userState As Object)
            If (Me.IsBottomPCBAOperationCompleted Is Nothing) Then
                Me.IsBottomPCBAOperationCompleted = AddressOf Me.OnIsBottomPCBAOperationCompleted
            End If
            Me.InvokeAsync("IsBottomPCBA", New Object() {Model, PCBA}, Me.IsBottomPCBAOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsBottomPCBAOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsBottomPCBACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsBottomPCBACompleted(Me, New IsBottomPCBACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetProdLineBy", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProdLineBy(ByVal prodLine As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProdLineBy", New Object() {prodLine})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProdLineByAsync(ByVal prodLine As String)
            Me.GetProdLineByAsync(prodLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProdLineByAsync(ByVal prodLine As String, ByVal userState As Object)
            If (Me.GetProdLineByOperationCompleted Is Nothing) Then
                Me.GetProdLineByOperationCompleted = AddressOf Me.OnGetProdLineByOperationCompleted
            End If
            Me.InvokeAsync("GetProdLineBy", New Object() {prodLine}, Me.GetProdLineByOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProdLineByOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProdLineByCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProdLineByCompleted(Me, New GetProdLineByCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateProductLine", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProductLine(ByVal dt As System.Data.DataTable, ByVal orgCode As String) As String
            Dim results() As Object = Me.Invoke("UpdateProductLine", New Object() {dt, orgCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProductLineAsync(ByVal dt As System.Data.DataTable, ByVal orgCode As String)
            Me.UpdateProductLineAsync(dt, orgCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProductLineAsync(ByVal dt As System.Data.DataTable, ByVal orgCode As String, ByVal userState As Object)
            If (Me.UpdateProductLineOperationCompleted Is Nothing) Then
                Me.UpdateProductLineOperationCompleted = AddressOf Me.OnUpdateProductLineOperationCompleted
            End If
            Me.InvokeAsync("UpdateProductLine", New Object() {dt, orgCode}, Me.UpdateProductLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProductLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProductLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProductLineCompleted(Me, New UpdateProductLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetEquipmentInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEquipmentInfo() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEquipmentInfo", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEquipmentInfoAsync()
            Me.GetEquipmentInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEquipmentInfoAsync(ByVal userState As Object)
            If (Me.GetEquipmentInfoOperationCompleted Is Nothing) Then
                Me.GetEquipmentInfoOperationCompleted = AddressOf Me.OnGetEquipmentInfoOperationCompleted
            End If
            Me.InvokeAsync("GetEquipmentInfo", New Object(-1) {}, Me.GetEquipmentInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEquipmentInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEquipmentInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEquipmentInfoCompleted(Me, New GetEquipmentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateEquipmentInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateEquipmentInfo(ByVal dt As System.Data.DataTable, ByVal para() As String) As String
            Dim results() As Object = Me.Invoke("UpdateEquipmentInfo", New Object() {dt, para})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateEquipmentInfoAsync(ByVal dt As System.Data.DataTable, ByVal para() As String)
            Me.UpdateEquipmentInfoAsync(dt, para, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEquipmentInfoAsync(ByVal dt As System.Data.DataTable, ByVal para() As String, ByVal userState As Object)
            If (Me.UpdateEquipmentInfoOperationCompleted Is Nothing) Then
                Me.UpdateEquipmentInfoOperationCompleted = AddressOf Me.OnUpdateEquipmentInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateEquipmentInfo", New Object() {dt, para}, Me.UpdateEquipmentInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEquipmentInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEquipmentInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEquipmentInfoCompleted(Me, New UpdateEquipmentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/MOSpecialPick", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MOSpecialPick(ByVal LoginData As ERPLogin, ByRef myMOData As MOData) As String
            Dim results() As Object = Me.Invoke("MOSpecialPick", New Object() {LoginData, myMOData})
            myMOData = CType(results(1),MOData)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MOSpecialPickAsync(ByVal LoginData As ERPLogin, ByVal myMOData As MOData)
            Me.MOSpecialPickAsync(LoginData, myMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MOSpecialPickAsync(ByVal LoginData As ERPLogin, ByVal myMOData As MOData, ByVal userState As Object)
            If (Me.MOSpecialPickOperationCompleted Is Nothing) Then
                Me.MOSpecialPickOperationCompleted = AddressOf Me.OnMOSpecialPickOperationCompleted
            End If
            Me.InvokeAsync("MOSpecialPick", New Object() {LoginData, myMOData}, Me.MOSpecialPickOperationCompleted, userState)
        End Sub
        
        Private Sub OnMOSpecialPickOperationCompleted(ByVal arg As Object)
            If (Not (Me.MOSpecialPickCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MOSpecialPickCompleted(Me, New MOSpecialPickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/MOSpecialPost", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MOSpecialPost(ByVal LoginData As ERPLogin, ByVal myMOData As MOData) As String
            Dim results() As Object = Me.Invoke("MOSpecialPost", New Object() {LoginData, myMOData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MOSpecialPostAsync(ByVal LoginData As ERPLogin, ByVal myMOData As MOData)
            Me.MOSpecialPostAsync(LoginData, myMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MOSpecialPostAsync(ByVal LoginData As ERPLogin, ByVal myMOData As MOData, ByVal userState As Object)
            If (Me.MOSpecialPostOperationCompleted Is Nothing) Then
                Me.MOSpecialPostOperationCompleted = AddressOf Me.OnMOSpecialPostOperationCompleted
            End If
            Me.InvokeAsync("MOSpecialPost", New Object() {LoginData, myMOData}, Me.MOSpecialPostOperationCompleted, userState)
        End Sub
        
        Private Sub OnMOSpecialPostOperationCompleted(ByVal arg As Object)
            If (Not (Me.MOSpecialPostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MOSpecialPostCompleted(Me, New MOSpecialPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadPOrderList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadPOrderList(ByVal ProdFloor As String, ByVal Open As Boolean, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadPOrderList", New Object() {ProdFloor, Open, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadPOrderListAsync(ByVal ProdFloor As String, ByVal Open As Boolean, ByVal LoginData As ERPLogin)
            Me.ReadPOrderListAsync(ProdFloor, Open, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadPOrderListAsync(ByVal ProdFloor As String, ByVal Open As Boolean, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.ReadPOrderListOperationCompleted Is Nothing) Then
                Me.ReadPOrderListOperationCompleted = AddressOf Me.OnReadPOrderListOperationCompleted
            End If
            Me.InvokeAsync("ReadPOrderList", New Object() {ProdFloor, Open, LoginData}, Me.ReadPOrderListOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadPOrderListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadPOrderListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadPOrderListCompleted(Me, New ReadPOrderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadPOrderItems", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadPOrderItems(ByVal PickOrder As String, ByVal ShowAllMatls As Boolean, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadPOrderItems", New Object() {PickOrder, ShowAllMatls, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadPOrderItemsAsync(ByVal PickOrder As String, ByVal ShowAllMatls As Boolean, ByVal LoginData As ERPLogin)
            Me.ReadPOrderItemsAsync(PickOrder, ShowAllMatls, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadPOrderItemsAsync(ByVal PickOrder As String, ByVal ShowAllMatls As Boolean, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.ReadPOrderItemsOperationCompleted Is Nothing) Then
                Me.ReadPOrderItemsOperationCompleted = AddressOf Me.OnReadPOrderItemsOperationCompleted
            End If
            Me.InvokeAsync("ReadPOrderItems", New Object() {PickOrder, ShowAllMatls, LoginData}, Me.ReadPOrderItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadPOrderItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadPOrderItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadPOrderItemsCompleted(Me, New ReadPOrderItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdatePOrderHeader", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePOrderHeader(ByVal PickOrder As String, ByVal Status As String, ByVal LoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("UpdatePOrderHeader", New Object() {PickOrder, Status, LoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePOrderHeaderAsync(ByVal PickOrder As String, ByVal Status As String, ByVal LoginData As ERPLogin)
            Me.UpdatePOrderHeaderAsync(PickOrder, Status, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePOrderHeaderAsync(ByVal PickOrder As String, ByVal Status As String, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.UpdatePOrderHeaderOperationCompleted Is Nothing) Then
                Me.UpdatePOrderHeaderOperationCompleted = AddressOf Me.OnUpdatePOrderHeaderOperationCompleted
            End If
            Me.InvokeAsync("UpdatePOrderHeader", New Object() {PickOrder, Status, LoginData}, Me.UpdatePOrderHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePOrderHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePOrderHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePOrderHeaderCompleted(Me, New UpdatePOrderHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PickOrderPost", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PickOrderPost(ByVal Items As System.Data.DataSet, ByVal LoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("PickOrderPost", New Object() {Items, LoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PickOrderPostAsync(ByVal Items As System.Data.DataSet, ByVal LoginData As ERPLogin)
            Me.PickOrderPostAsync(Items, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PickOrderPostAsync(ByVal Items As System.Data.DataSet, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.PickOrderPostOperationCompleted Is Nothing) Then
                Me.PickOrderPostOperationCompleted = AddressOf Me.OnPickOrderPostOperationCompleted
            End If
            Me.InvokeAsync("PickOrderPost", New Object() {Items, LoginData}, Me.PickOrderPostOperationCompleted, userState)
        End Sub
        
        Private Sub OnPickOrderPostOperationCompleted(ByVal arg As Object)
            If (Not (Me.PickOrderPostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PickOrderPostCompleted(Me, New PickOrderPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMOFromDN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMOFromDN(ByVal DN As String, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMOFromDN", New Object() {DN, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMOFromDNAsync(ByVal DN As String, ByVal LoginData As ERPLogin)
            Me.GetMOFromDNAsync(DN, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMOFromDNAsync(ByVal DN As String, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetMOFromDNOperationCompleted Is Nothing) Then
                Me.GetMOFromDNOperationCompleted = AddressOf Me.OnGetMOFromDNOperationCompleted
            End If
            Me.InvokeAsync("GetMOFromDN", New Object() {DN, LoginData}, Me.GetMOFromDNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMOFromDNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMOFromDNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMOFromDNCompleted(Me, New GetMOFromDNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDNMOLines", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDNMOLines(ByVal DN As String, ByVal MO As String, ByVal PickStatus As String, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDNMOLines", New Object() {DN, MO, PickStatus, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDNMOLinesAsync(ByVal DN As String, ByVal MO As String, ByVal PickStatus As String, ByVal LoginData As ERPLogin)
            Me.GetDNMOLinesAsync(DN, MO, PickStatus, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDNMOLinesAsync(ByVal DN As String, ByVal MO As String, ByVal PickStatus As String, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetDNMOLinesOperationCompleted Is Nothing) Then
                Me.GetDNMOLinesOperationCompleted = AddressOf Me.OnGetDNMOLinesOperationCompleted
            End If
            Me.InvokeAsync("GetDNMOLines", New Object() {DN, MO, PickStatus, LoginData}, Me.GetDNMOLinesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDNMOLinesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDNMOLinesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDNMOLinesCompleted(Me, New GetDNMOLinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ShipmentPost", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShipmentPost(ByVal Items As System.Data.DataSet, ByVal LoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("ShipmentPost", New Object() {Items, LoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShipmentPostAsync(ByVal Items As System.Data.DataSet, ByVal LoginData As ERPLogin)
            Me.ShipmentPostAsync(Items, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShipmentPostAsync(ByVal Items As System.Data.DataSet, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.ShipmentPostOperationCompleted Is Nothing) Then
                Me.ShipmentPostOperationCompleted = AddressOf Me.OnShipmentPostOperationCompleted
            End If
            Me.InvokeAsync("ShipmentPost", New Object() {Items, LoginData}, Me.ShipmentPostOperationCompleted, userState)
        End Sub
        
        Private Sub OnShipmentPostOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShipmentPostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShipmentPostCompleted(Me, New ShipmentPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDNPickedLists", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDNPickedLists(ByVal LoginData As ERPLogin, ByVal DN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDNPickedLists", New Object() {LoginData, DN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDNPickedListsAsync(ByVal LoginData As ERPLogin, ByVal DN As String)
            Me.GetDNPickedListsAsync(LoginData, DN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDNPickedListsAsync(ByVal LoginData As ERPLogin, ByVal DN As String, ByVal userState As Object)
            If (Me.GetDNPickedListsOperationCompleted Is Nothing) Then
                Me.GetDNPickedListsOperationCompleted = AddressOf Me.OnGetDNPickedListsOperationCompleted
            End If
            Me.InvokeAsync("GetDNPickedLists", New Object() {LoginData, DN}, Me.GetDNPickedListsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDNPickedListsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDNPickedListsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDNPickedListsCompleted(Me, New GetDNPickedListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDNPickedCLIDs", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDNPickedCLIDs(ByVal LoginData As ERPLogin, ByVal DN As String, ByVal CLID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDNPickedCLIDs", New Object() {LoginData, DN, CLID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDNPickedCLIDsAsync(ByVal LoginData As ERPLogin, ByVal DN As String, ByVal CLID As String)
            Me.GetDNPickedCLIDsAsync(LoginData, DN, CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDNPickedCLIDsAsync(ByVal LoginData As ERPLogin, ByVal DN As String, ByVal CLID As String, ByVal userState As Object)
            If (Me.GetDNPickedCLIDsOperationCompleted Is Nothing) Then
                Me.GetDNPickedCLIDsOperationCompleted = AddressOf Me.OnGetDNPickedCLIDsOperationCompleted
            End If
            Me.InvokeAsync("GetDNPickedCLIDs", New Object() {LoginData, DN, CLID}, Me.GetDNPickedCLIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDNPickedCLIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDNPickedCLIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDNPickedCLIDsCompleted(Me, New GetDNPickedCLIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SOReversalPost", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SOReversalPost(ByVal Items As System.Data.DataSet, ByVal LoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("SOReversalPost", New Object() {Items, LoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SOReversalPostAsync(ByVal Items As System.Data.DataSet, ByVal LoginData As ERPLogin)
            Me.SOReversalPostAsync(Items, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SOReversalPostAsync(ByVal Items As System.Data.DataSet, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.SOReversalPostOperationCompleted Is Nothing) Then
                Me.SOReversalPostOperationCompleted = AddressOf Me.OnSOReversalPostOperationCompleted
            End If
            Me.InvokeAsync("SOReversalPost", New Object() {Items, LoginData}, Me.SOReversalPostOperationCompleted, userState)
        End Sub
        
        Private Sub OnSOReversalPostOperationCompleted(ByVal arg As Object)
            If (Not (Me.SOReversalPostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SOReversalPostCompleted(Me, New SOReversalPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintProcessLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintProcessLabel(ByVal LoginData As ERPLogin, ByVal ds As System.Data.DataSet, ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintProcessLabel", New Object() {LoginData, ds, Printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintProcessLabelAsync(ByVal LoginData As ERPLogin, ByVal ds As System.Data.DataSet, ByVal Printer As String)
            Me.PrintProcessLabelAsync(LoginData, ds, Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintProcessLabelAsync(ByVal LoginData As ERPLogin, ByVal ds As System.Data.DataSet, ByVal Printer As String, ByVal userState As Object)
            If (Me.PrintProcessLabelOperationCompleted Is Nothing) Then
                Me.PrintProcessLabelOperationCompleted = AddressOf Me.OnPrintProcessLabelOperationCompleted
            End If
            Me.InvokeAsync("PrintProcessLabel", New Object() {LoginData, ds, Printer}, Me.PrintProcessLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintProcessLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintProcessLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintProcessLabelCompleted(Me, New PrintProcessLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadProcessLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadProcessLabel(ByVal LoginData As ERPLogin, ByVal LabelID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadProcessLabel", New Object() {LoginData, LabelID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadProcessLabelAsync(ByVal LoginData As ERPLogin, ByVal LabelID As String)
            Me.ReadProcessLabelAsync(LoginData, LabelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadProcessLabelAsync(ByVal LoginData As ERPLogin, ByVal LabelID As String, ByVal userState As Object)
            If (Me.ReadProcessLabelOperationCompleted Is Nothing) Then
                Me.ReadProcessLabelOperationCompleted = AddressOf Me.OnReadProcessLabelOperationCompleted
            End If
            Me.InvokeAsync("ReadProcessLabel", New Object() {LoginData, LabelID}, Me.ReadProcessLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadProcessLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadProcessLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadProcessLabelCompleted(Me, New ReadProcessLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PCBSlotLightOn", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PCBSlotLightOn(ByVal LoginData As ERPLogin, ByRef myMOData As MOData) As String
            Dim results() As Object = Me.Invoke("PCBSlotLightOn", New Object() {LoginData, myMOData})
            myMOData = CType(results(1),MOData)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PCBSlotLightOnAsync(ByVal LoginData As ERPLogin, ByVal myMOData As MOData)
            Me.PCBSlotLightOnAsync(LoginData, myMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PCBSlotLightOnAsync(ByVal LoginData As ERPLogin, ByVal myMOData As MOData, ByVal userState As Object)
            If (Me.PCBSlotLightOnOperationCompleted Is Nothing) Then
                Me.PCBSlotLightOnOperationCompleted = AddressOf Me.OnPCBSlotLightOnOperationCompleted
            End If
            Me.InvokeAsync("PCBSlotLightOn", New Object() {LoginData, myMOData}, Me.PCBSlotLightOnOperationCompleted, userState)
        End Sub
        
        Private Sub OnPCBSlotLightOnOperationCompleted(ByVal arg As Object)
            If (Not (Me.PCBSlotLightOnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PCBSlotLightOnCompleted(Me, New PCBSlotLightOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMatList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMatList(ByVal Selection As SelCriteria) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMatList", New Object() {Selection})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMatListAsync(ByVal Selection As SelCriteria)
            Me.GetMatListAsync(Selection, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMatListAsync(ByVal Selection As SelCriteria, ByVal userState As Object)
            If (Me.GetMatListOperationCompleted Is Nothing) Then
                Me.GetMatListOperationCompleted = AddressOf Me.OnGetMatListOperationCompleted
            End If
            Me.InvokeAsync("GetMatList", New Object() {Selection}, Me.GetMatListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMatListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMatListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMatListCompleted(Me, New GetMatListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SLEDSaveChanges", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SLEDSaveChanges(ByVal OracleLoginData As ERPLogin, ByVal CLIDs As System.Data.DataSet) As PostSLEDResponse
            Dim results() As Object = Me.Invoke("SLEDSaveChanges", New Object() {OracleLoginData, CLIDs})
            Return CType(results(0),PostSLEDResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SLEDSaveChangesAsync(ByVal OracleLoginData As ERPLogin, ByVal CLIDs As System.Data.DataSet)
            Me.SLEDSaveChangesAsync(OracleLoginData, CLIDs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SLEDSaveChangesAsync(ByVal OracleLoginData As ERPLogin, ByVal CLIDs As System.Data.DataSet, ByVal userState As Object)
            If (Me.SLEDSaveChangesOperationCompleted Is Nothing) Then
                Me.SLEDSaveChangesOperationCompleted = AddressOf Me.OnSLEDSaveChangesOperationCompleted
            End If
            Me.InvokeAsync("SLEDSaveChanges", New Object() {OracleLoginData, CLIDs}, Me.SLEDSaveChangesOperationCompleted, userState)
        End Sub
        
        Private Sub OnSLEDSaveChangesOperationCompleted(ByVal arg As Object)
            If (Not (Me.SLEDSaveChangesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SLEDSaveChangesCompleted(Me, New SLEDSaveChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SLED_ReviewUpd", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SLED_ReviewUpd(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As String, ByVal TransactionID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SLED_ReviewUpd", New Object() {p_ds, OracleLoginData, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SLED_ReviewUpdAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As String, ByVal TransactionID As Integer)
            Me.SLED_ReviewUpdAsync(p_ds, OracleLoginData, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SLED_ReviewUpdAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As String, ByVal TransactionID As Integer, ByVal userState As Object)
            If (Me.SLED_ReviewUpdOperationCompleted Is Nothing) Then
                Me.SLED_ReviewUpdOperationCompleted = AddressOf Me.OnSLED_ReviewUpdOperationCompleted
            End If
            Me.InvokeAsync("SLED_ReviewUpd", New Object() {p_ds, OracleLoginData, TransactionID}, Me.SLED_ReviewUpdOperationCompleted, userState)
        End Sub
        
        Private Sub OnSLED_ReviewUpdOperationCompleted(ByVal arg As Object)
            If (Not (Me.SLED_ReviewUpdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SLED_ReviewUpdCompleted(Me, New SLED_ReviewUpdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SLED_FailUpd", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SLED_FailUpd(ByVal p_ds_fail As System.Data.DataSet, ByVal OracleLoginData As String, ByVal TransactionID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SLED_FailUpd", New Object() {p_ds_fail, OracleLoginData, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SLED_FailUpdAsync(ByVal p_ds_fail As System.Data.DataSet, ByVal OracleLoginData As String, ByVal TransactionID As Integer)
            Me.SLED_FailUpdAsync(p_ds_fail, OracleLoginData, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SLED_FailUpdAsync(ByVal p_ds_fail As System.Data.DataSet, ByVal OracleLoginData As String, ByVal TransactionID As Integer, ByVal userState As Object)
            If (Me.SLED_FailUpdOperationCompleted Is Nothing) Then
                Me.SLED_FailUpdOperationCompleted = AddressOf Me.OnSLED_FailUpdOperationCompleted
            End If
            Me.InvokeAsync("SLED_FailUpd", New Object() {p_ds_fail, OracleLoginData, TransactionID}, Me.SLED_FailUpdOperationCompleted, userState)
        End Sub
        
        Private Sub OnSLED_FailUpdOperationCompleted(ByVal arg As Object)
            If (Not (Me.SLED_FailUpdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SLED_FailUpdCompleted(Me, New SLED_FailUpdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/eTrace_Upd", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function eTrace_Upd(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String) As PostSLEDResponse
            Dim results() As Object = Me.Invoke("eTrace_Upd", New Object() {UpdtTable, OracleLoginData})
            Return CType(results(0),PostSLEDResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub eTrace_UpdAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String)
            Me.eTrace_UpdAsync(UpdtTable, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub eTrace_UpdAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String, ByVal userState As Object)
            If (Me.eTrace_UpdOperationCompleted Is Nothing) Then
                Me.eTrace_UpdOperationCompleted = AddressOf Me.OneTrace_UpdOperationCompleted
            End If
            Me.InvokeAsync("eTrace_Upd", New Object() {UpdtTable, OracleLoginData}, Me.eTrace_UpdOperationCompleted, userState)
        End Sub
        
        Private Sub OneTrace_UpdOperationCompleted(ByVal arg As Object)
            If (Not (Me.eTrace_UpdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent eTrace_UpdCompleted(Me, New eTrace_UpdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SLEDSaveTrace", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SLEDSaveTrace(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String) As PostSLEDResponse
            Dim results() As Object = Me.Invoke("SLEDSaveTrace", New Object() {UpdtTable, OracleLoginData})
            Return CType(results(0),PostSLEDResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SLEDSaveTraceAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String)
            Me.SLEDSaveTraceAsync(UpdtTable, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SLEDSaveTraceAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String, ByVal userState As Object)
            If (Me.SLEDSaveTraceOperationCompleted Is Nothing) Then
                Me.SLEDSaveTraceOperationCompleted = AddressOf Me.OnSLEDSaveTraceOperationCompleted
            End If
            Me.InvokeAsync("SLEDSaveTrace", New Object() {UpdtTable, OracleLoginData}, Me.SLEDSaveTraceOperationCompleted, userState)
        End Sub
        
        Private Sub OnSLEDSaveTraceOperationCompleted(ByVal arg As Object)
            If (Not (Me.SLEDSaveTraceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SLEDSaveTraceCompleted(Me, New SLEDSaveTraceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/eTraceUpd_Review", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function eTraceUpd_Review(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String) As String
            Dim results() As Object = Me.Invoke("eTraceUpd_Review", New Object() {UpdtTable, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub eTraceUpd_ReviewAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String)
            Me.eTraceUpd_ReviewAsync(UpdtTable, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub eTraceUpd_ReviewAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String, ByVal userState As Object)
            If (Me.eTraceUpd_ReviewOperationCompleted Is Nothing) Then
                Me.eTraceUpd_ReviewOperationCompleted = AddressOf Me.OneTraceUpd_ReviewOperationCompleted
            End If
            Me.InvokeAsync("eTraceUpd_Review", New Object() {UpdtTable, OracleLoginData}, Me.eTraceUpd_ReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OneTraceUpd_ReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.eTraceUpd_ReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent eTraceUpd_ReviewCompleted(Me, New eTraceUpd_ReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/eTraceUpd_Fail", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function eTraceUpd_Fail(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String) As String
            Dim results() As Object = Me.Invoke("eTraceUpd_Fail", New Object() {UpdtTable, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub eTraceUpd_FailAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String)
            Me.eTraceUpd_FailAsync(UpdtTable, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub eTraceUpd_FailAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String, ByVal userState As Object)
            If (Me.eTraceUpd_FailOperationCompleted Is Nothing) Then
                Me.eTraceUpd_FailOperationCompleted = AddressOf Me.OneTraceUpd_FailOperationCompleted
            End If
            Me.InvokeAsync("eTraceUpd_Fail", New Object() {UpdtTable, OracleLoginData}, Me.eTraceUpd_FailOperationCompleted, userState)
        End Sub
        
        Private Sub OneTraceUpd_FailOperationCompleted(ByVal arg As Object)
            If (Not (Me.eTraceUpd_FailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent eTraceUpd_FailCompleted(Me, New eTraceUpd_FailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/eTraceUpd_Pass", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function eTraceUpd_Pass(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String) As String
            Dim results() As Object = Me.Invoke("eTraceUpd_Pass", New Object() {UpdtTable, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub eTraceUpd_PassAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String)
            Me.eTraceUpd_PassAsync(UpdtTable, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub eTraceUpd_PassAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As String, ByVal userState As Object)
            If (Me.eTraceUpd_PassOperationCompleted Is Nothing) Then
                Me.eTraceUpd_PassOperationCompleted = AddressOf Me.OneTraceUpd_PassOperationCompleted
            End If
            Me.InvokeAsync("eTraceUpd_Pass", New Object() {UpdtTable, OracleLoginData}, Me.eTraceUpd_PassOperationCompleted, userState)
        End Sub
        
        Private Sub OneTraceUpd_PassOperationCompleted(ByVal arg As Object)
            If (Not (Me.eTraceUpd_PassCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent eTraceUpd_PassCompleted(Me, New eTraceUpd_PassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetModelRevision", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetModelRevision(ByVal PalletID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetModelRevision", New Object() {PalletID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetModelRevisionAsync(ByVal PalletID As String, ByVal OracleLoginData As ERPLogin)
            Me.GetModelRevisionAsync(PalletID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetModelRevisionAsync(ByVal PalletID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetModelRevisionOperationCompleted Is Nothing) Then
                Me.GetModelRevisionOperationCompleted = AddressOf Me.OnGetModelRevisionOperationCompleted
            End If
            Me.InvokeAsync("GetModelRevision", New Object() {PalletID, OracleLoginData}, Me.GetModelRevisionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetModelRevisionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetModelRevisionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModelRevisionCompleted(Me, New GetModelRevisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetModelRevDJ_WithType", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetModelRevDJ_WithType(ByVal PalletID As String, ByVal Type As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetModelRevDJ_WithType", New Object() {PalletID, Type, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetModelRevDJ_WithTypeAsync(ByVal PalletID As String, ByVal Type As String, ByVal OracleLoginData As ERPLogin)
            Me.GetModelRevDJ_WithTypeAsync(PalletID, Type, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetModelRevDJ_WithTypeAsync(ByVal PalletID As String, ByVal Type As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetModelRevDJ_WithTypeOperationCompleted Is Nothing) Then
                Me.GetModelRevDJ_WithTypeOperationCompleted = AddressOf Me.OnGetModelRevDJ_WithTypeOperationCompleted
            End If
            Me.InvokeAsync("GetModelRevDJ_WithType", New Object() {PalletID, Type, OracleLoginData}, Me.GetModelRevDJ_WithTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetModelRevDJ_WithTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetModelRevDJ_WithTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModelRevDJ_WithTypeCompleted(Me, New GetModelRevDJ_WithTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetModelRevDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetModelRevDJ(ByVal PalletID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetModelRevDJ", New Object() {PalletID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetModelRevDJAsync(ByVal PalletID As String, ByVal OracleLoginData As ERPLogin)
            Me.GetModelRevDJAsync(PalletID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetModelRevDJAsync(ByVal PalletID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetModelRevDJOperationCompleted Is Nothing) Then
                Me.GetModelRevDJOperationCompleted = AddressOf Me.OnGetModelRevDJOperationCompleted
            End If
            Me.InvokeAsync("GetModelRevDJ", New Object() {PalletID, OracleLoginData}, Me.GetModelRevDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetModelRevDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetModelRevDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModelRevDJCompleted(Me, New GetModelRevDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSNList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSNList(ByVal PalletID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSNList", New Object() {PalletID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSNListAsync(ByVal PalletID As String, ByVal OracleLoginData As ERPLogin)
            Me.GetSNListAsync(PalletID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSNListAsync(ByVal PalletID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetSNListOperationCompleted Is Nothing) Then
                Me.GetSNListOperationCompleted = AddressOf Me.OnGetSNListOperationCompleted
            End If
            Me.InvokeAsync("GetSNList", New Object() {PalletID, OracleLoginData}, Me.GetSNListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSNListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSNListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSNListCompleted(Me, New GetSNListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ChangeModel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeModel(ByVal BoxID() As String, ByVal NewModel As String, ByVal NewRev As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("ChangeModel", New Object() {BoxID, NewModel, NewRev, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeModelAsync(ByVal BoxID() As String, ByVal NewModel As String, ByVal NewRev As String, ByVal OracleLoginData As ERPLogin)
            Me.ChangeModelAsync(BoxID, NewModel, NewRev, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeModelAsync(ByVal BoxID() As String, ByVal NewModel As String, ByVal NewRev As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ChangeModelOperationCompleted Is Nothing) Then
                Me.ChangeModelOperationCompleted = AddressOf Me.OnChangeModelOperationCompleted
            End If
            Me.InvokeAsync("ChangeModel", New Object() {BoxID, NewModel, NewRev, OracleLoginData}, Me.ChangeModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeModelCompleted(Me, New ChangeModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Change_Model", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Change_Model(ByVal BoxID() As String, ByVal NewModel As String, ByVal NewRev As String, ByVal NewDJ As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("Change_Model", New Object() {BoxID, NewModel, NewRev, NewDJ, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Change_ModelAsync(ByVal BoxID() As String, ByVal NewModel As String, ByVal NewRev As String, ByVal NewDJ As String, ByVal OracleLoginData As ERPLogin)
            Me.Change_ModelAsync(BoxID, NewModel, NewRev, NewDJ, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Change_ModelAsync(ByVal BoxID() As String, ByVal NewModel As String, ByVal NewRev As String, ByVal NewDJ As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Change_ModelOperationCompleted Is Nothing) Then
                Me.Change_ModelOperationCompleted = AddressOf Me.OnChange_ModelOperationCompleted
            End If
            Me.InvokeAsync("Change_Model", New Object() {BoxID, NewModel, NewRev, NewDJ, OracleLoginData}, Me.Change_ModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnChange_ModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.Change_ModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Change_ModelCompleted(Me, New Change_ModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSMTCCName", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMTCCName(ByVal OrgCode As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSMTCCName", New Object() {OrgCode, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMTCCNameAsync(ByVal OrgCode As String, ByVal OracleLoginData As ERPLogin)
            Me.GetSMTCCNameAsync(OrgCode, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMTCCNameAsync(ByVal OrgCode As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetSMTCCNameOperationCompleted Is Nothing) Then
                Me.GetSMTCCNameOperationCompleted = AddressOf Me.OnGetSMTCCNameOperationCompleted
            End If
            Me.InvokeAsync("GetSMTCCName", New Object() {OrgCode, OracleLoginData}, Me.GetSMTCCNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMTCCNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMTCCNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMTCCNameCompleted(Me, New GetSMTCCNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SMTCycleCountHH", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SMTCycleCountHH(ByVal EventID As String, ByVal CLID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SMTCycleCountHH", New Object() {EventID, CLID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SMTCycleCountHHAsync(ByVal EventID As String, ByVal CLID As String, ByVal OracleLoginData As ERPLogin)
            Me.SMTCycleCountHHAsync(EventID, CLID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SMTCycleCountHHAsync(ByVal EventID As String, ByVal CLID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.SMTCycleCountHHOperationCompleted Is Nothing) Then
                Me.SMTCycleCountHHOperationCompleted = AddressOf Me.OnSMTCycleCountHHOperationCompleted
            End If
            Me.InvokeAsync("SMTCycleCountHH", New Object() {EventID, CLID, OracleLoginData}, Me.SMTCycleCountHHOperationCompleted, userState)
        End Sub
        
        Private Sub OnSMTCycleCountHHOperationCompleted(ByVal arg As Object)
            If (Not (Me.SMTCycleCountHHCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SMTCycleCountHHCompleted(Me, New SMTCycleCountHHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SMTCycleCountCLIDValid", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SMTCycleCountCLIDValid(ByVal EventID As String, ByVal CLID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SMTCycleCountCLIDValid", New Object() {EventID, CLID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SMTCycleCountCLIDValidAsync(ByVal EventID As String, ByVal CLID As String, ByVal OracleLoginData As ERPLogin)
            Me.SMTCycleCountCLIDValidAsync(EventID, CLID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SMTCycleCountCLIDValidAsync(ByVal EventID As String, ByVal CLID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.SMTCycleCountCLIDValidOperationCompleted Is Nothing) Then
                Me.SMTCycleCountCLIDValidOperationCompleted = AddressOf Me.OnSMTCycleCountCLIDValidOperationCompleted
            End If
            Me.InvokeAsync("SMTCycleCountCLIDValid", New Object() {EventID, CLID, OracleLoginData}, Me.SMTCycleCountCLIDValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnSMTCycleCountCLIDValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.SMTCycleCountCLIDValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SMTCycleCountCLIDValidCompleted(Me, New SMTCycleCountCLIDValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SMTCCSave", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SMTCCSave(ByVal EventID As String, ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("SMTCCSave", New Object() {EventID, p_ds, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SMTCCSaveAsync(ByVal EventID As String, ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.SMTCCSaveAsync(EventID, p_ds, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SMTCCSaveAsync(ByVal EventID As String, ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.SMTCCSaveOperationCompleted Is Nothing) Then
                Me.SMTCCSaveOperationCompleted = AddressOf Me.OnSMTCCSaveOperationCompleted
            End If
            Me.InvokeAsync("SMTCCSave", New Object() {EventID, p_ds, OracleLoginData}, Me.SMTCCSaveOperationCompleted, userState)
        End Sub
        
        Private Sub OnSMTCCSaveOperationCompleted(ByVal arg As Object)
            If (Not (Me.SMTCCSaveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SMTCCSaveCompleted(Me, New SMTCCSaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SMTCLIDStatusChanged", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SMTCLIDStatusChanged(ByRef EventID As String, ByRef CLID As String, ByRef Action As String, ByRef ResultFlag As String) As String
            Dim results() As Object = Me.Invoke("SMTCLIDStatusChanged", New Object() {EventID, CLID, Action, ResultFlag})
            EventID = CType(results(1),String)
            CLID = CType(results(2),String)
            Action = CType(results(3),String)
            ResultFlag = CType(results(4),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SMTCLIDStatusChangedAsync(ByVal EventID As String, ByVal CLID As String, ByVal Action As String, ByVal ResultFlag As String)
            Me.SMTCLIDStatusChangedAsync(EventID, CLID, Action, ResultFlag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SMTCLIDStatusChangedAsync(ByVal EventID As String, ByVal CLID As String, ByVal Action As String, ByVal ResultFlag As String, ByVal userState As Object)
            If (Me.SMTCLIDStatusChangedOperationCompleted Is Nothing) Then
                Me.SMTCLIDStatusChangedOperationCompleted = AddressOf Me.OnSMTCLIDStatusChangedOperationCompleted
            End If
            Me.InvokeAsync("SMTCLIDStatusChanged", New Object() {EventID, CLID, Action, ResultFlag}, Me.SMTCLIDStatusChangedOperationCompleted, userState)
        End Sub
        
        Private Sub OnSMTCLIDStatusChangedOperationCompleted(ByVal arg As Object)
            If (Not (Me.SMTCLIDStatusChangedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SMTCLIDStatusChangedCompleted(Me, New SMTCLIDStatusChangedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SMTCLIDStatusChangedByPC", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SMTCLIDStatusChangedByPC(ByRef EventID As String, ByRef CLID As String, ByRef Action As String, ByRef ResultFlag As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("SMTCLIDStatusChangedByPC", New Object() {EventID, CLID, Action, ResultFlag, OracleLoginData})
            EventID = CType(results(1),String)
            CLID = CType(results(2),String)
            Action = CType(results(3),String)
            ResultFlag = CType(results(4),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SMTCLIDStatusChangedByPCAsync(ByVal EventID As String, ByVal CLID As String, ByVal Action As String, ByVal ResultFlag As String, ByVal OracleLoginData As ERPLogin)
            Me.SMTCLIDStatusChangedByPCAsync(EventID, CLID, Action, ResultFlag, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SMTCLIDStatusChangedByPCAsync(ByVal EventID As String, ByVal CLID As String, ByVal Action As String, ByVal ResultFlag As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.SMTCLIDStatusChangedByPCOperationCompleted Is Nothing) Then
                Me.SMTCLIDStatusChangedByPCOperationCompleted = AddressOf Me.OnSMTCLIDStatusChangedByPCOperationCompleted
            End If
            Me.InvokeAsync("SMTCLIDStatusChangedByPC", New Object() {EventID, CLID, Action, ResultFlag, OracleLoginData}, Me.SMTCLIDStatusChangedByPCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSMTCLIDStatusChangedByPCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SMTCLIDStatusChangedByPCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SMTCLIDStatusChangedByPCCompleted(Me, New SMTCLIDStatusChangedByPCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSMTCCList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMTCCList(ByVal OrgCode As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSMTCCList", New Object() {OrgCode, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMTCCListAsync(ByVal OrgCode As String, ByVal OracleLoginData As ERPLogin)
            Me.GetSMTCCListAsync(OrgCode, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMTCCListAsync(ByVal OrgCode As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetSMTCCListOperationCompleted Is Nothing) Then
                Me.GetSMTCCListOperationCompleted = AddressOf Me.OnGetSMTCCListOperationCompleted
            End If
            Me.InvokeAsync("GetSMTCCList", New Object() {OrgCode, OracleLoginData}, Me.GetSMTCCListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMTCCListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMTCCListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMTCCListCompleted(Me, New GetSMTCCListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSMTScanedCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMTScanedCLID(ByVal EventID As String, ByVal Seq As Integer, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSMTScanedCLID", New Object() {EventID, Seq, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMTScanedCLIDAsync(ByVal EventID As String, ByVal Seq As Integer, ByVal OracleLoginData As ERPLogin)
            Me.GetSMTScanedCLIDAsync(EventID, Seq, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMTScanedCLIDAsync(ByVal EventID As String, ByVal Seq As Integer, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetSMTScanedCLIDOperationCompleted Is Nothing) Then
                Me.GetSMTScanedCLIDOperationCompleted = AddressOf Me.OnGetSMTScanedCLIDOperationCompleted
            End If
            Me.InvokeAsync("GetSMTScanedCLID", New Object() {EventID, Seq, OracleLoginData}, Me.GetSMTScanedCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMTScanedCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMTScanedCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMTScanedCLIDCompleted(Me, New GetSMTScanedCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCyDate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCyDate(ByVal cc_name As String, ByVal seq As Integer, ByVal OracleLoginData As ERPLogin) As GetCycleCount
            Dim results() As Object = Me.Invoke("GetCyDate", New Object() {cc_name, seq, OracleLoginData})
            Return CType(results(0),GetCycleCount)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCyDateAsync(ByVal cc_name As String, ByVal seq As Integer, ByVal OracleLoginData As ERPLogin)
            Me.GetCyDateAsync(cc_name, seq, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCyDateAsync(ByVal cc_name As String, ByVal seq As Integer, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetCyDateOperationCompleted Is Nothing) Then
                Me.GetCyDateOperationCompleted = AddressOf Me.OnGetCyDateOperationCompleted
            End If
            Me.InvokeAsync("GetCyDate", New Object() {cc_name, seq, OracleLoginData}, Me.GetCyDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCyDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCyDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCyDateCompleted(Me, New GetCyDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateCycle", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCycle(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("UpdateCycle", New Object() {p_ds, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCycleAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.UpdateCycleAsync(p_ds, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCycleAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.UpdateCycleOperationCompleted Is Nothing) Then
                Me.UpdateCycleOperationCompleted = AddressOf Me.OnUpdateCycleOperationCompleted
            End If
            Me.InvokeAsync("UpdateCycle", New Object() {p_ds, OracleLoginData}, Me.UpdateCycleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCycleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCycleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCycleCompleted(Me, New UpdateCycleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCLIDate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCLIDate(ByVal CLID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCLIDate", New Object() {CLID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCLIDateAsync(ByVal CLID As String, ByVal OracleLoginData As ERPLogin)
            Me.GetCLIDateAsync(CLID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCLIDateAsync(ByVal CLID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetCLIDateOperationCompleted Is Nothing) Then
                Me.GetCLIDateOperationCompleted = AddressOf Me.OnGetCLIDateOperationCompleted
            End If
            Me.InvokeAsync("GetCLIDate", New Object() {CLID, OracleLoginData}, Me.GetCLIDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCLIDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCLIDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCLIDateCompleted(Me, New GetCLIDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/TBoxData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TBoxData(ByVal BoxID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("TBoxData", New Object() {BoxID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TBoxDataAsync(ByVal BoxID As String, ByVal OracleLoginData As ERPLogin)
            Me.TBoxDataAsync(BoxID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TBoxDataAsync(ByVal BoxID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.TBoxDataOperationCompleted Is Nothing) Then
                Me.TBoxDataOperationCompleted = AddressOf Me.OnTBoxDataOperationCompleted
            End If
            Me.InvokeAsync("TBoxData", New Object() {BoxID, OracleLoginData}, Me.TBoxDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnTBoxDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.TBoxDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TBoxDataCompleted(Me, New TBoxDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Testupdata", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Testupdata(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Testupdata", New Object() {p_ds, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestupdataAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.TestupdataAsync(p_ds, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestupdataAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.TestupdataOperationCompleted Is Nothing) Then
                Me.TestupdataOperationCompleted = AddressOf Me.OnTestupdataOperationCompleted
            End If
            Me.InvokeAsync("Testupdata", New Object() {p_ds, OracleLoginData}, Me.TestupdataOperationCompleted, userState)
        End Sub
        
        Private Sub OnTestupdataOperationCompleted(ByVal arg As Object)
            If (Not (Me.TestupdataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestupdataCompleted(Me, New TestupdataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateReason", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateReason(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("UpdateReason", New Object() {p_ds, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateReasonAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.UpdateReasonAsync(p_ds, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateReasonAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.UpdateReasonOperationCompleted Is Nothing) Then
                Me.UpdateReasonOperationCompleted = AddressOf Me.OnUpdateReasonOperationCompleted
            End If
            Me.InvokeAsync("UpdateReason", New Object() {p_ds, OracleLoginData}, Me.UpdateReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateReasonCompleted(Me, New UpdateReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMRPData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMRPData(ByVal myInputData As InputData) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMRPData", New Object() {myInputData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMRPDataAsync(ByVal myInputData As InputData)
            Me.GetMRPDataAsync(myInputData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMRPDataAsync(ByVal myInputData As InputData, ByVal userState As Object)
            If (Me.GetMRPDataOperationCompleted Is Nothing) Then
                Me.GetMRPDataOperationCompleted = AddressOf Me.OnGetMRPDataOperationCompleted
            End If
            Me.InvokeAsync("GetMRPData", New Object() {myInputData}, Me.GetMRPDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMRPDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMRPDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMRPDataCompleted(Me, New GetMRPDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SIT_MassPrintCLIDs", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SIT_MassPrintCLIDs(ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("SIT_MassPrintCLIDs", New Object() {Printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SIT_MassPrintCLIDsAsync(ByVal Printer As String)
            Me.SIT_MassPrintCLIDsAsync(Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SIT_MassPrintCLIDsAsync(ByVal Printer As String, ByVal userState As Object)
            If (Me.SIT_MassPrintCLIDsOperationCompleted Is Nothing) Then
                Me.SIT_MassPrintCLIDsOperationCompleted = AddressOf Me.OnSIT_MassPrintCLIDsOperationCompleted
            End If
            Me.InvokeAsync("SIT_MassPrintCLIDs", New Object() {Printer}, Me.SIT_MassPrintCLIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSIT_MassPrintCLIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SIT_MassPrintCLIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SIT_MassPrintCLIDsCompleted(Me, New SIT_MassPrintCLIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SIT_DeleteCLIDs", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SIT_DeleteCLIDs() As Boolean
            Dim results() As Object = Me.Invoke("SIT_DeleteCLIDs", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SIT_DeleteCLIDsAsync()
            Me.SIT_DeleteCLIDsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SIT_DeleteCLIDsAsync(ByVal userState As Object)
            If (Me.SIT_DeleteCLIDsOperationCompleted Is Nothing) Then
                Me.SIT_DeleteCLIDsOperationCompleted = AddressOf Me.OnSIT_DeleteCLIDsOperationCompleted
            End If
            Me.InvokeAsync("SIT_DeleteCLIDs", New Object(-1) {}, Me.SIT_DeleteCLIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSIT_DeleteCLIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SIT_DeleteCLIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SIT_DeleteCLIDsCompleted(Me, New SIT_DeleteCLIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SIT_Print_OnHand", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SIT_Print_OnHand(ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("SIT_Print_OnHand", New Object() {Printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SIT_Print_OnHandAsync(ByVal Printer As String)
            Me.SIT_Print_OnHandAsync(Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SIT_Print_OnHandAsync(ByVal Printer As String, ByVal userState As Object)
            If (Me.SIT_Print_OnHandOperationCompleted Is Nothing) Then
                Me.SIT_Print_OnHandOperationCompleted = AddressOf Me.OnSIT_Print_OnHandOperationCompleted
            End If
            Me.InvokeAsync("SIT_Print_OnHand", New Object() {Printer}, Me.SIT_Print_OnHandOperationCompleted, userState)
        End Sub
        
        Private Sub OnSIT_Print_OnHandOperationCompleted(ByVal arg As Object)
            If (Not (Me.SIT_Print_OnHandCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SIT_Print_OnHandCompleted(Me, New SIT_Print_OnHandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadProductRoutingLog", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadProductRoutingLog(ByVal productRouting As System.Data.DataTable, ByVal userID As String) As String
            Dim results() As Object = Me.Invoke("UploadProductRoutingLog", New Object() {productRouting, userID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadProductRoutingLogAsync(ByVal productRouting As System.Data.DataTable, ByVal userID As String)
            Me.UploadProductRoutingLogAsync(productRouting, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadProductRoutingLogAsync(ByVal productRouting As System.Data.DataTable, ByVal userID As String, ByVal userState As Object)
            If (Me.UploadProductRoutingLogOperationCompleted Is Nothing) Then
                Me.UploadProductRoutingLogOperationCompleted = AddressOf Me.OnUploadProductRoutingLogOperationCompleted
            End If
            Me.InvokeAsync("UploadProductRoutingLog", New Object() {productRouting, userID}, Me.UploadProductRoutingLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadProductRoutingLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadProductRoutingLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadProductRoutingLogCompleted(Me, New UploadProductRoutingLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadProductChangeLog", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadProductChangeLog(ByVal LogTable As System.Data.DataTable, ByVal userID As String) As String
            Dim results() As Object = Me.Invoke("UploadProductChangeLog", New Object() {LogTable, userID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadProductChangeLogAsync(ByVal LogTable As System.Data.DataTable, ByVal userID As String)
            Me.UploadProductChangeLogAsync(LogTable, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadProductChangeLogAsync(ByVal LogTable As System.Data.DataTable, ByVal userID As String, ByVal userState As Object)
            If (Me.UploadProductChangeLogOperationCompleted Is Nothing) Then
                Me.UploadProductChangeLogOperationCompleted = AddressOf Me.OnUploadProductChangeLogOperationCompleted
            End If
            Me.InvokeAsync("UploadProductChangeLog", New Object() {LogTable, userID}, Me.UploadProductChangeLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadProductChangeLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadProductChangeLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadProductChangeLogCompleted(Me, New UploadProductChangeLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CopyDJInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyDJInfo(ByVal orgcode As String, ByVal isdelOldData As Integer) As Boolean
            Dim results() As Object = Me.Invoke("CopyDJInfo", New Object() {orgcode, isdelOldData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyDJInfoAsync(ByVal orgcode As String, ByVal isdelOldData As Integer)
            Me.CopyDJInfoAsync(orgcode, isdelOldData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyDJInfoAsync(ByVal orgcode As String, ByVal isdelOldData As Integer, ByVal userState As Object)
            If (Me.CopyDJInfoOperationCompleted Is Nothing) Then
                Me.CopyDJInfoOperationCompleted = AddressOf Me.OnCopyDJInfoOperationCompleted
            End If
            Me.InvokeAsync("CopyDJInfo", New Object() {orgcode, isdelOldData}, Me.CopyDJInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyDJInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyDJInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyDJInfoCompleted(Me, New CopyDJInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CopyDJinfoUseServerName", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CopyDJinfoUseServerName() As Boolean
            Dim results() As Object = Me.Invoke("CopyDJinfoUseServerName", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyDJinfoUseServerNameAsync()
            Me.CopyDJinfoUseServerNameAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyDJinfoUseServerNameAsync(ByVal userState As Object)
            If (Me.CopyDJinfoUseServerNameOperationCompleted Is Nothing) Then
                Me.CopyDJinfoUseServerNameOperationCompleted = AddressOf Me.OnCopyDJinfoUseServerNameOperationCompleted
            End If
            Me.InvokeAsync("CopyDJinfoUseServerName", New Object(-1) {}, Me.CopyDJinfoUseServerNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyDJinfoUseServerNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyDJinfoUseServerNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyDJinfoUseServerNameCompleted(Me, New CopyDJinfoUseServerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/isValidDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isValidDJ(ByVal dj_name As String, ByVal Status As String, ByVal OracleERPLogin As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("isValidDJ", New Object() {dj_name, Status, OracleERPLogin})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isValidDJAsync(ByVal dj_name As String, ByVal Status As String, ByVal OracleERPLogin As ERPLogin)
            Me.isValidDJAsync(dj_name, Status, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isValidDJAsync(ByVal dj_name As String, ByVal Status As String, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.isValidDJOperationCompleted Is Nothing) Then
                Me.isValidDJOperationCompleted = AddressOf Me.OnisValidDJOperationCompleted
            End If
            Me.InvokeAsync("isValidDJ", New Object() {dj_name, Status, OracleERPLogin}, Me.isValidDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnisValidDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.isValidDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isValidDJCompleted(Me, New isValidDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/insertTDHeader", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function insertTDHeader(ByVal start As Integer, ByVal endindex As Integer) As Boolean
            Dim results() As Object = Me.Invoke("insertTDHeader", New Object() {start, endindex})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub insertTDHeaderAsync(ByVal start As Integer, ByVal endindex As Integer)
            Me.insertTDHeaderAsync(start, endindex, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub insertTDHeaderAsync(ByVal start As Integer, ByVal endindex As Integer, ByVal userState As Object)
            If (Me.insertTDHeaderOperationCompleted Is Nothing) Then
                Me.insertTDHeaderOperationCompleted = AddressOf Me.OninsertTDHeaderOperationCompleted
            End If
            Me.InvokeAsync("insertTDHeader", New Object() {start, endindex}, Me.insertTDHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OninsertTDHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.insertTDHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent insertTDHeaderCompleted(Me, New insertTDHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadRuleFromDB", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRuleFromDB() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRuleFromDB", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRuleFromDBAsync()
            Me.ReadRuleFromDBAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRuleFromDBAsync(ByVal userState As Object)
            If (Me.ReadRuleFromDBOperationCompleted Is Nothing) Then
                Me.ReadRuleFromDBOperationCompleted = AddressOf Me.OnReadRuleFromDBOperationCompleted
            End If
            Me.InvokeAsync("ReadRuleFromDB", New Object(-1) {}, Me.ReadRuleFromDBOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRuleFromDBOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRuleFromDBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRuleFromDBCompleted(Me, New ReadRuleFromDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/postProdMaster", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function postProdMaster(ByVal pordMaster As RuleDetail, ByVal ProdStructure As System.Data.DataSet, ByVal SAPLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("postProdMaster", New Object() {pordMaster, ProdStructure, SAPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub postProdMasterAsync(ByVal pordMaster As RuleDetail, ByVal ProdStructure As System.Data.DataSet, ByVal SAPLoginData As ERPLogin)
            Me.postProdMasterAsync(pordMaster, ProdStructure, SAPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub postProdMasterAsync(ByVal pordMaster As RuleDetail, ByVal ProdStructure As System.Data.DataSet, ByVal SAPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.postProdMasterOperationCompleted Is Nothing) Then
                Me.postProdMasterOperationCompleted = AddressOf Me.OnpostProdMasterOperationCompleted
            End If
            Me.InvokeAsync("postProdMaster", New Object() {pordMaster, ProdStructure, SAPLoginData}, Me.postProdMasterOperationCompleted, userState)
        End Sub
        
        Private Sub OnpostProdMasterOperationCompleted(ByVal arg As Object)
            If (Not (Me.postProdMasterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent postProdMasterCompleted(Me, New postProdMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DelProdMaster", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DelProdMaster(ByVal Model As String) As Boolean
            Dim results() As Object = Me.Invoke("DelProdMaster", New Object() {Model})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DelProdMasterAsync(ByVal Model As String)
            Me.DelProdMasterAsync(Model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelProdMasterAsync(ByVal Model As String, ByVal userState As Object)
            If (Me.DelProdMasterOperationCompleted Is Nothing) Then
                Me.DelProdMasterOperationCompleted = AddressOf Me.OnDelProdMasterOperationCompleted
            End If
            Me.InvokeAsync("DelProdMaster", New Object() {Model}, Me.DelProdMasterOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelProdMasterOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelProdMasterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelProdMasterCompleted(Me, New DelProdMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Getwipflowdata", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Getwipflowdata(ByVal intSN As String, ByVal ProcessName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Getwipflowdata", New Object() {intSN, ProcessName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetwipflowdataAsync(ByVal intSN As String, ByVal ProcessName As String)
            Me.GetwipflowdataAsync(intSN, ProcessName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetwipflowdataAsync(ByVal intSN As String, ByVal ProcessName As String, ByVal userState As Object)
            If (Me.GetwipflowdataOperationCompleted Is Nothing) Then
                Me.GetwipflowdataOperationCompleted = AddressOf Me.OnGetwipflowdataOperationCompleted
            End If
            Me.InvokeAsync("Getwipflowdata", New Object() {intSN, ProcessName}, Me.GetwipflowdataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetwipflowdataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetwipflowdataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetwipflowdataCompleted(Me, New GetwipflowdataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetModelRevForTE", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetModelRevForTE(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("GetModelRevForTE", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetModelRevForTEAsync(ByVal IntSN As String)
            Me.GetModelRevForTEAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetModelRevForTEAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.GetModelRevForTEOperationCompleted Is Nothing) Then
                Me.GetModelRevForTEOperationCompleted = AddressOf Me.OnGetModelRevForTEOperationCompleted
            End If
            Me.InvokeAsync("GetModelRevForTE", New Object() {IntSN}, Me.GetModelRevForTEOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetModelRevForTEOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetModelRevForTECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModelRevForTECompleted(Me, New GetModelRevForTECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetProdLineAndResultForTE", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProdLineAndResultForTE(ByVal IntSN As String, ByVal Process As String) As String
            Dim results() As Object = Me.Invoke("GetProdLineAndResultForTE", New Object() {IntSN, Process})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProdLineAndResultForTEAsync(ByVal IntSN As String, ByVal Process As String)
            Me.GetProdLineAndResultForTEAsync(IntSN, Process, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProdLineAndResultForTEAsync(ByVal IntSN As String, ByVal Process As String, ByVal userState As Object)
            If (Me.GetProdLineAndResultForTEOperationCompleted Is Nothing) Then
                Me.GetProdLineAndResultForTEOperationCompleted = AddressOf Me.OnGetProdLineAndResultForTEOperationCompleted
            End If
            Me.InvokeAsync("GetProdLineAndResultForTE", New Object() {IntSN, Process}, Me.GetProdLineAndResultForTEOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProdLineAndResultForTEOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProdLineAndResultForTECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProdLineAndResultForTECompleted(Me, New GetProdLineAndResultForTECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckFixutureID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckFixutureID(ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("CheckFixutureID", New Object() {FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckFixutureIDAsync(ByVal FixtureID As String)
            Me.CheckFixutureIDAsync(FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckFixutureIDAsync(ByVal FixtureID As String, ByVal userState As Object)
            If (Me.CheckFixutureIDOperationCompleted Is Nothing) Then
                Me.CheckFixutureIDOperationCompleted = AddressOf Me.OnCheckFixutureIDOperationCompleted
            End If
            Me.InvokeAsync("CheckFixutureID", New Object() {FixtureID}, Me.CheckFixutureIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckFixutureIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckFixutureIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckFixutureIDCompleted(Me, New CheckFixutureIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetWipHeaderByIntSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWipHeaderByIntSN(ByVal IntSN As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWipHeaderByIntSN", New Object() {IntSN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWipHeaderByIntSNAsync(ByVal IntSN As String)
            Me.GetWipHeaderByIntSNAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWipHeaderByIntSNAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.GetWipHeaderByIntSNOperationCompleted Is Nothing) Then
                Me.GetWipHeaderByIntSNOperationCompleted = AddressOf Me.OnGetWipHeaderByIntSNOperationCompleted
            End If
            Me.InvokeAsync("GetWipHeaderByIntSN", New Object() {IntSN}, Me.GetWipHeaderByIntSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWipHeaderByIntSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWipHeaderByIntSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWipHeaderByIntSNCompleted(Me, New GetWipHeaderByIntSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPanelIDByIntSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPanelIDByIntSN(ByVal intSN As String) As String
            Dim results() As Object = Me.Invoke("GetPanelIDByIntSN", New Object() {intSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPanelIDByIntSNAsync(ByVal intSN As String)
            Me.GetPanelIDByIntSNAsync(intSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPanelIDByIntSNAsync(ByVal intSN As String, ByVal userState As Object)
            If (Me.GetPanelIDByIntSNOperationCompleted Is Nothing) Then
                Me.GetPanelIDByIntSNOperationCompleted = AddressOf Me.OnGetPanelIDByIntSNOperationCompleted
            End If
            Me.InvokeAsync("GetPanelIDByIntSN", New Object() {intSN}, Me.GetPanelIDByIntSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPanelIDByIntSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPanelIDByIntSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPanelIDByIntSNCompleted(Me, New GetPanelIDByIntSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ClearFixtureID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClearFixtureID(ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("ClearFixtureID", New Object() {FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClearFixtureIDAsync(ByVal FixtureID As String)
            Me.ClearFixtureIDAsync(FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearFixtureIDAsync(ByVal FixtureID As String, ByVal userState As Object)
            If (Me.ClearFixtureIDOperationCompleted Is Nothing) Then
                Me.ClearFixtureIDOperationCompleted = AddressOf Me.OnClearFixtureIDOperationCompleted
            End If
            Me.InvokeAsync("ClearFixtureID", New Object() {FixtureID}, Me.ClearFixtureIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearFixtureIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearFixtureIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearFixtureIDCompleted(Me, New ClearFixtureIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/FixtureMount", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FixtureMount(ByVal DsFixture As System.Data.DataSet, ByVal FixuteID As String, ByVal user As String) As String
            Dim results() As Object = Me.Invoke("FixtureMount", New Object() {DsFixture, FixuteID, user})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FixtureMountAsync(ByVal DsFixture As System.Data.DataSet, ByVal FixuteID As String, ByVal user As String)
            Me.FixtureMountAsync(DsFixture, FixuteID, user, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FixtureMountAsync(ByVal DsFixture As System.Data.DataSet, ByVal FixuteID As String, ByVal user As String, ByVal userState As Object)
            If (Me.FixtureMountOperationCompleted Is Nothing) Then
                Me.FixtureMountOperationCompleted = AddressOf Me.OnFixtureMountOperationCompleted
            End If
            Me.InvokeAsync("FixtureMount", New Object() {DsFixture, FixuteID, user}, Me.FixtureMountOperationCompleted, userState)
        End Sub
        
        Private Sub OnFixtureMountOperationCompleted(ByVal arg As Object)
            If (Not (Me.FixtureMountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FixtureMountCompleted(Me, New FixtureMountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/TE_IntSNListReadbyFixtureID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TE_IntSNListReadbyFixtureID(ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("TE_IntSNListReadbyFixtureID", New Object() {FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TE_IntSNListReadbyFixtureIDAsync(ByVal FixtureID As String)
            Me.TE_IntSNListReadbyFixtureIDAsync(FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TE_IntSNListReadbyFixtureIDAsync(ByVal FixtureID As String, ByVal userState As Object)
            If (Me.TE_IntSNListReadbyFixtureIDOperationCompleted Is Nothing) Then
                Me.TE_IntSNListReadbyFixtureIDOperationCompleted = AddressOf Me.OnTE_IntSNListReadbyFixtureIDOperationCompleted
            End If
            Me.InvokeAsync("TE_IntSNListReadbyFixtureID", New Object() {FixtureID}, Me.TE_IntSNListReadbyFixtureIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnTE_IntSNListReadbyFixtureIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.TE_IntSNListReadbyFixtureIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TE_IntSNListReadbyFixtureIDCompleted(Me, New TE_IntSNListReadbyFixtureIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/TE_ReworkUnitFlag", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TE_ReworkUnitFlag(ByVal IntSN As String) As String
            Dim results() As Object = Me.Invoke("TE_ReworkUnitFlag", New Object() {IntSN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TE_ReworkUnitFlagAsync(ByVal IntSN As String)
            Me.TE_ReworkUnitFlagAsync(IntSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TE_ReworkUnitFlagAsync(ByVal IntSN As String, ByVal userState As Object)
            If (Me.TE_ReworkUnitFlagOperationCompleted Is Nothing) Then
                Me.TE_ReworkUnitFlagOperationCompleted = AddressOf Me.OnTE_ReworkUnitFlagOperationCompleted
            End If
            Me.InvokeAsync("TE_ReworkUnitFlag", New Object() {IntSN}, Me.TE_ReworkUnitFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnTE_ReworkUnitFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.TE_ReworkUnitFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TE_ReworkUnitFlagCompleted(Me, New TE_ReworkUnitFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/TE_UnbindFixtureID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TE_UnbindFixtureID(ByVal FixtureID As String) As String
            Dim results() As Object = Me.Invoke("TE_UnbindFixtureID", New Object() {FixtureID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TE_UnbindFixtureIDAsync(ByVal FixtureID As String)
            Me.TE_UnbindFixtureIDAsync(FixtureID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TE_UnbindFixtureIDAsync(ByVal FixtureID As String, ByVal userState As Object)
            If (Me.TE_UnbindFixtureIDOperationCompleted Is Nothing) Then
                Me.TE_UnbindFixtureIDOperationCompleted = AddressOf Me.OnTE_UnbindFixtureIDOperationCompleted
            End If
            Me.InvokeAsync("TE_UnbindFixtureID", New Object() {FixtureID}, Me.TE_UnbindFixtureIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnTE_UnbindFixtureIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.TE_UnbindFixtureIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TE_UnbindFixtureIDCompleted(Me, New TE_UnbindFixtureIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ChangeExpdateUser", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeExpdateUser(ByVal UserName As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangeExpdateUser", New Object() {UserName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeExpdateUserAsync(ByVal UserName As String)
            Me.ChangeExpdateUserAsync(UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeExpdateUserAsync(ByVal UserName As String, ByVal userState As Object)
            If (Me.ChangeExpdateUserOperationCompleted Is Nothing) Then
                Me.ChangeExpdateUserOperationCompleted = AddressOf Me.OnChangeExpdateUserOperationCompleted
            End If
            Me.InvokeAsync("ChangeExpdateUser", New Object() {UserName}, Me.ChangeExpdateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeExpdateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeExpdateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeExpdateUserCompleted(Me, New ChangeExpdateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BatchChangeExpdate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BatchChangeExpdate(ByVal BatchID As String, ByVal OracleERPLogin As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("BatchChangeExpdate", New Object() {BatchID, OracleERPLogin})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BatchChangeExpdateAsync(ByVal BatchID As String, ByVal OracleERPLogin As ERPLogin)
            Me.BatchChangeExpdateAsync(BatchID, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BatchChangeExpdateAsync(ByVal BatchID As String, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.BatchChangeExpdateOperationCompleted Is Nothing) Then
                Me.BatchChangeExpdateOperationCompleted = AddressOf Me.OnBatchChangeExpdateOperationCompleted
            End If
            Me.InvokeAsync("BatchChangeExpdate", New Object() {BatchID, OracleERPLogin}, Me.BatchChangeExpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnBatchChangeExpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchChangeExpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BatchChangeExpdateCompleted(Me, New BatchChangeExpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckCLIDExpFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckCLIDExpFormat(ByVal BatchID As String, ByVal mydsCLID As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckCLIDExpFormat", New Object() {BatchID, mydsCLID, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckCLIDExpFormatAsync(ByVal BatchID As String, ByVal mydsCLID As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.CheckCLIDExpFormatAsync(BatchID, mydsCLID, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckCLIDExpFormatAsync(ByVal BatchID As String, ByVal mydsCLID As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.CheckCLIDExpFormatOperationCompleted Is Nothing) Then
                Me.CheckCLIDExpFormatOperationCompleted = AddressOf Me.OnCheckCLIDExpFormatOperationCompleted
            End If
            Me.InvokeAsync("CheckCLIDExpFormat", New Object() {BatchID, mydsCLID, OracleERPLogin}, Me.CheckCLIDExpFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckCLIDExpFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckCLIDExpFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckCLIDExpFormatCompleted(Me, New CheckCLIDExpFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getKanbanIDinfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getKanbanIDinfo(ByVal LoginData As ERPLogin, ByVal iKanbanID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getKanbanIDinfo", New Object() {LoginData, iKanbanID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getKanbanIDinfoAsync(ByVal LoginData As ERPLogin, ByVal iKanbanID As String)
            Me.getKanbanIDinfoAsync(LoginData, iKanbanID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getKanbanIDinfoAsync(ByVal LoginData As ERPLogin, ByVal iKanbanID As String, ByVal userState As Object)
            If (Me.getKanbanIDinfoOperationCompleted Is Nothing) Then
                Me.getKanbanIDinfoOperationCompleted = AddressOf Me.OngetKanbanIDinfoOperationCompleted
            End If
            Me.InvokeAsync("getKanbanIDinfo", New Object() {LoginData, iKanbanID}, Me.getKanbanIDinfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetKanbanIDinfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getKanbanIDinfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getKanbanIDinfoCompleted(Me, New getKanbanIDinfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateKanbanCodeDS", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateKanbanCodeDS(ByVal p_OracleLoginData As ERPLogin, ByVal iKanbanID As String, ByVal p_needbydate As String) As String
            Dim results() As Object = Me.Invoke("UpdateKanbanCodeDS", New Object() {p_OracleLoginData, iKanbanID, p_needbydate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateKanbanCodeDSAsync(ByVal p_OracleLoginData As ERPLogin, ByVal iKanbanID As String, ByVal p_needbydate As String)
            Me.UpdateKanbanCodeDSAsync(p_OracleLoginData, iKanbanID, p_needbydate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateKanbanCodeDSAsync(ByVal p_OracleLoginData As ERPLogin, ByVal iKanbanID As String, ByVal p_needbydate As String, ByVal userState As Object)
            If (Me.UpdateKanbanCodeDSOperationCompleted Is Nothing) Then
                Me.UpdateKanbanCodeDSOperationCompleted = AddressOf Me.OnUpdateKanbanCodeDSOperationCompleted
            End If
            Me.InvokeAsync("UpdateKanbanCodeDS", New Object() {p_OracleLoginData, iKanbanID, p_needbydate}, Me.UpdateKanbanCodeDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateKanbanCodeDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateKanbanCodeDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateKanbanCodeDSCompleted(Me, New UpdateKanbanCodeDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckPNFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPNFormat(ByVal InvID As String, ByVal MRListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckPNFormat", New Object() {InvID, MRListData, ExcelData, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPNFormatAsync(ByVal InvID As String, ByVal MRListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.CheckPNFormatAsync(InvID, MRListData, ExcelData, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPNFormatAsync(ByVal InvID As String, ByVal MRListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.CheckPNFormatOperationCompleted Is Nothing) Then
                Me.CheckPNFormatOperationCompleted = AddressOf Me.OnCheckPNFormatOperationCompleted
            End If
            Me.InvokeAsync("CheckPNFormat", New Object() {InvID, MRListData, ExcelData, OracleERPLogin}, Me.CheckPNFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPNFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPNFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPNFormatCompleted(Me, New CheckPNFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckBuildPanFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBuildPanFormat(ByVal InvID As String, ByVal MRListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckBuildPanFormat", New Object() {InvID, MRListData, ExcelData, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBuildPanFormatAsync(ByVal InvID As String, ByVal MRListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.CheckBuildPanFormatAsync(InvID, MRListData, ExcelData, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBuildPanFormatAsync(ByVal InvID As String, ByVal MRListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.CheckBuildPanFormatOperationCompleted Is Nothing) Then
                Me.CheckBuildPanFormatOperationCompleted = AddressOf Me.OnCheckBuildPanFormatOperationCompleted
            End If
            Me.InvokeAsync("CheckBuildPanFormat", New Object() {InvID, MRListData, ExcelData, OracleERPLogin}, Me.CheckBuildPanFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBuildPanFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBuildPanFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBuildPanFormatCompleted(Me, New CheckBuildPanFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CommitBuildPlan", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommitBuildPlan(ByVal MRListData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal uploadType As Integer, ByVal saType As Integer, ByVal triggerType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CommitBuildPlan", New Object() {MRListData, OracleERPLogin, uploadType, saType, triggerType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommitBuildPlanAsync(ByVal MRListData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal uploadType As Integer, ByVal saType As Integer, ByVal triggerType As String)
            Me.CommitBuildPlanAsync(MRListData, OracleERPLogin, uploadType, saType, triggerType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommitBuildPlanAsync(ByVal MRListData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal uploadType As Integer, ByVal saType As Integer, ByVal triggerType As String, ByVal userState As Object)
            If (Me.CommitBuildPlanOperationCompleted Is Nothing) Then
                Me.CommitBuildPlanOperationCompleted = AddressOf Me.OnCommitBuildPlanOperationCompleted
            End If
            Me.InvokeAsync("CommitBuildPlan", New Object() {MRListData, OracleERPLogin, uploadType, saType, triggerType}, Me.CommitBuildPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommitBuildPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommitBuildPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommitBuildPlanCompleted(Me, New CommitBuildPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveKanbanData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveKanbanData(ByVal MRListData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As String
            Dim results() As Object = Me.Invoke("SaveKanbanData", New Object() {MRListData, OracleERPLogin})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveKanbanDataAsync(ByVal MRListData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.SaveKanbanDataAsync(MRListData, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveKanbanDataAsync(ByVal MRListData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.SaveKanbanDataOperationCompleted Is Nothing) Then
                Me.SaveKanbanDataOperationCompleted = AddressOf Me.OnSaveKanbanDataOperationCompleted
            End If
            Me.InvokeAsync("SaveKanbanData", New Object() {MRListData, OracleERPLogin}, Me.SaveKanbanDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveKanbanDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveKanbanDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveKanbanDataCompleted(Me, New SaveKanbanDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/uploadQuotaSharing", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function uploadQuotaSharing(ByVal exceldata As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("uploadQuotaSharing", New Object() {exceldata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub uploadQuotaSharingAsync(ByVal exceldata As System.Data.DataSet)
            Me.uploadQuotaSharingAsync(exceldata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub uploadQuotaSharingAsync(ByVal exceldata As System.Data.DataSet, ByVal userState As Object)
            If (Me.uploadQuotaSharingOperationCompleted Is Nothing) Then
                Me.uploadQuotaSharingOperationCompleted = AddressOf Me.OnuploadQuotaSharingOperationCompleted
            End If
            Me.InvokeAsync("uploadQuotaSharing", New Object() {exceldata}, Me.uploadQuotaSharingOperationCompleted, userState)
        End Sub
        
        Private Sub OnuploadQuotaSharingOperationCompleted(ByVal arg As Object)
            If (Not (Me.uploadQuotaSharingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent uploadQuotaSharingCompleted(Me, New uploadQuotaSharingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/uploadTransmission", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function uploadTransmission(ByVal exceldata As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("uploadTransmission", New Object() {exceldata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub uploadTransmissionAsync(ByVal exceldata As System.Data.DataSet)
            Me.uploadTransmissionAsync(exceldata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub uploadTransmissionAsync(ByVal exceldata As System.Data.DataSet, ByVal userState As Object)
            If (Me.uploadTransmissionOperationCompleted Is Nothing) Then
                Me.uploadTransmissionOperationCompleted = AddressOf Me.OnuploadTransmissionOperationCompleted
            End If
            Me.InvokeAsync("uploadTransmission", New Object() {exceldata}, Me.uploadTransmissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnuploadTransmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.uploadTransmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent uploadTransmissionCompleted(Me, New uploadTransmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getQuotaSharing", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getQuotaSharing(ByVal LoginData As ERPLogin, ByVal ItemNo As String, ByVal BuyerName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getQuotaSharing", New Object() {LoginData, ItemNo, BuyerName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getQuotaSharingAsync(ByVal LoginData As ERPLogin, ByVal ItemNo As String, ByVal BuyerName As String)
            Me.getQuotaSharingAsync(LoginData, ItemNo, BuyerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getQuotaSharingAsync(ByVal LoginData As ERPLogin, ByVal ItemNo As String, ByVal BuyerName As String, ByVal userState As Object)
            If (Me.getQuotaSharingOperationCompleted Is Nothing) Then
                Me.getQuotaSharingOperationCompleted = AddressOf Me.OngetQuotaSharingOperationCompleted
            End If
            Me.InvokeAsync("getQuotaSharing", New Object() {LoginData, ItemNo, BuyerName}, Me.getQuotaSharingOperationCompleted, userState)
        End Sub
        
        Private Sub OngetQuotaSharingOperationCompleted(ByVal arg As Object)
            If (Not (Me.getQuotaSharingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getQuotaSharingCompleted(Me, New getQuotaSharingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getTransmission", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTransmission(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getTransmission", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTransmissionAsync(ByVal LoginData As ERPLogin)
            Me.getTransmissionAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTransmissionAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.getTransmissionOperationCompleted Is Nothing) Then
                Me.getTransmissionOperationCompleted = AddressOf Me.OngetTransmissionOperationCompleted
            End If
            Me.InvokeAsync("getTransmission", New Object() {LoginData}, Me.getTransmissionOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTransmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTransmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTransmissionCompleted(Me, New getTransmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetNextBPID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextBPID(ByVal LoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("GetNextBPID", New Object() {LoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextBPIDAsync(ByVal LoginData As ERPLogin)
            Me.GetNextBPIDAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextBPIDAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetNextBPIDOperationCompleted Is Nothing) Then
                Me.GetNextBPIDOperationCompleted = AddressOf Me.OnGetNextBPIDOperationCompleted
            End If
            Me.InvokeAsync("GetNextBPID", New Object() {LoginData}, Me.GetNextBPIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextBPIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextBPIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextBPIDCompleted(Me, New GetNextBPIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getBuildPlanList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBuildPlanList(ByVal startDate As String, ByVal endDate As String, ByVal productionfloor As String, ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getBuildPlanList", New Object() {startDate, endDate, productionfloor, p_ds, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBuildPlanListAsync(ByVal startDate As String, ByVal endDate As String, ByVal productionfloor As String, ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin)
            Me.getBuildPlanListAsync(startDate, endDate, productionfloor, p_ds, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBuildPlanListAsync(ByVal startDate As String, ByVal endDate As String, ByVal productionfloor As String, ByVal p_ds As System.Data.DataSet, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.getBuildPlanListOperationCompleted Is Nothing) Then
                Me.getBuildPlanListOperationCompleted = AddressOf Me.OngetBuildPlanListOperationCompleted
            End If
            Me.InvokeAsync("getBuildPlanList", New Object() {startDate, endDate, productionfloor, p_ds, LoginData}, Me.getBuildPlanListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBuildPlanListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBuildPlanListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBuildPlanListCompleted(Me, New getBuildPlanListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getBuildPlandetail", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBuildPlandetail(ByVal buildplanid As String, ByVal ischecked As Boolean, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getBuildPlandetail", New Object() {buildplanid, ischecked, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBuildPlandetailAsync(ByVal buildplanid As String, ByVal ischecked As Boolean, ByVal LoginData As ERPLogin)
            Me.getBuildPlandetailAsync(buildplanid, ischecked, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBuildPlandetailAsync(ByVal buildplanid As String, ByVal ischecked As Boolean, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.getBuildPlandetailOperationCompleted Is Nothing) Then
                Me.getBuildPlandetailOperationCompleted = AddressOf Me.OngetBuildPlandetailOperationCompleted
            End If
            Me.InvokeAsync("getBuildPlandetail", New Object() {buildplanid, ischecked, LoginData}, Me.getBuildPlandetailOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBuildPlandetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBuildPlandetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBuildPlandetailCompleted(Me, New getBuildPlandetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/getLocatorsPB", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLocatorsPB(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getLocatorsPB", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLocatorsPBAsync(ByVal LoginData As ERPLogin)
            Me.getLocatorsPBAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLocatorsPBAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.getLocatorsPBOperationCompleted Is Nothing) Then
                Me.getLocatorsPBOperationCompleted = AddressOf Me.OngetLocatorsPBOperationCompleted
            End If
            Me.InvokeAsync("getLocatorsPB", New Object() {LoginData}, Me.getLocatorsPBOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLocatorsPBOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLocatorsPBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLocatorsPBCompleted(Me, New getLocatorsPBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetRTNo_MiscRcpt", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRTNo_MiscRcpt(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("GetRTNo_MiscRcpt", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRTNo_MiscRcptAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetRTNo_MiscRcptAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRTNo_MiscRcptAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetRTNo_MiscRcptOperationCompleted Is Nothing) Then
                Me.GetRTNo_MiscRcptOperationCompleted = AddressOf Me.OnGetRTNo_MiscRcptOperationCompleted
            End If
            Me.InvokeAsync("GetRTNo_MiscRcpt", New Object() {OracleLoginData}, Me.GetRTNo_MiscRcptOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRTNo_MiscRcptOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRTNo_MiscRcptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRTNo_MiscRcptCompleted(Me, New GetRTNo_MiscRcptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDate(ByVal OracleLoginData As ERPLogin) As Date
            Dim results() As Object = Me.Invoke("GetDate", New Object() {OracleLoginData})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDateAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetDateAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDateAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetDateOperationCompleted Is Nothing) Then
                Me.GetDateOperationCompleted = AddressOf Me.OnGetDateOperationCompleted
            End If
            Me.InvokeAsync("GetDate", New Object() {OracleLoginData}, Me.GetDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDateCompleted(Me, New GetDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetNextInvID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextInvID(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("GetNextInvID", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextInvIDAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetNextInvIDAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextInvIDAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetNextInvIDOperationCompleted Is Nothing) Then
                Me.GetNextInvIDOperationCompleted = AddressOf Me.OnGetNextInvIDOperationCompleted
            End If
            Me.InvokeAsync("GetNextInvID", New Object() {OracleLoginData}, Me.GetNextInvIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextInvIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextInvIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextInvIDCompleted(Me, New GetNextInvIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckFormat(ByVal InvID As String, ByVal MRListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckFormat", New Object() {InvID, MRListData, ExcelData, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckFormatAsync(ByVal InvID As String, ByVal MRListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.CheckFormatAsync(InvID, MRListData, ExcelData, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckFormatAsync(ByVal InvID As String, ByVal MRListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.CheckFormatOperationCompleted Is Nothing) Then
                Me.CheckFormatOperationCompleted = AddressOf Me.OnCheckFormatOperationCompleted
            End If
            Me.InvokeAsync("CheckFormat", New Object() {InvID, MRListData, ExcelData, OracleERPLogin}, Me.CheckFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckFormatCompleted(Me, New CheckFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckBatchFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBatchFormat(ByVal InvID As String, ByVal BatchListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckBatchFormat", New Object() {InvID, BatchListData, ExcelData, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBatchFormatAsync(ByVal InvID As String, ByVal BatchListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.CheckBatchFormatAsync(InvID, BatchListData, ExcelData, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBatchFormatAsync(ByVal InvID As String, ByVal BatchListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.CheckBatchFormatOperationCompleted Is Nothing) Then
                Me.CheckBatchFormatOperationCompleted = AddressOf Me.OnCheckBatchFormatOperationCompleted
            End If
            Me.InvokeAsync("CheckBatchFormat", New Object() {InvID, BatchListData, ExcelData, OracleERPLogin}, Me.CheckBatchFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBatchFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBatchFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBatchFormatCompleted(Me, New CheckBatchFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckPIFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPIFormat(ByVal InvID As String, ByVal PIListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal Type As String, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckPIFormat", New Object() {InvID, PIListData, ExcelData, Type, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPIFormatAsync(ByVal InvID As String, ByVal PIListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal Type As String, ByVal OracleERPLogin As ERPLogin)
            Me.CheckPIFormatAsync(InvID, PIListData, ExcelData, Type, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPIFormatAsync(ByVal InvID As String, ByVal PIListData As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal Type As String, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.CheckPIFormatOperationCompleted Is Nothing) Then
                Me.CheckPIFormatOperationCompleted = AddressOf Me.OnCheckPIFormatOperationCompleted
            End If
            Me.InvokeAsync("CheckPIFormat", New Object() {InvID, PIListData, ExcelData, Type, OracleERPLogin}, Me.CheckPIFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPIFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPIFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPIFormatCompleted(Me, New CheckPIFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidMRData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidMRData(ByVal MRListData As System.Data.DataSet, ByVal ItemListData As System.Data.DataSet, ByVal dsAML As System.Data.DataSet, ByVal SubinvLoc As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ValidMRData", New Object() {MRListData, ItemListData, dsAML, SubinvLoc, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidMRDataAsync(ByVal MRListData As System.Data.DataSet, ByVal ItemListData As System.Data.DataSet, ByVal dsAML As System.Data.DataSet, ByVal SubinvLoc As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.ValidMRDataAsync(MRListData, ItemListData, dsAML, SubinvLoc, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidMRDataAsync(ByVal MRListData As System.Data.DataSet, ByVal ItemListData As System.Data.DataSet, ByVal dsAML As System.Data.DataSet, ByVal SubinvLoc As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ValidMRDataOperationCompleted Is Nothing) Then
                Me.ValidMRDataOperationCompleted = AddressOf Me.OnValidMRDataOperationCompleted
            End If
            Me.InvokeAsync("ValidMRData", New Object() {MRListData, ItemListData, dsAML, SubinvLoc, OracleLoginData}, Me.ValidMRDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidMRDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidMRDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidMRDataCompleted(Me, New ValidMRDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidPIData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidPIData(ByVal PIListData As System.Data.DataSet, ByVal ItemListData As System.Data.DataSet, ByVal ItemOnhand As System.Data.DataSet, ByVal SubinvLoc As System.Data.DataSet, ByVal Type As String, ByVal TransactionID As Long, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ValidPIData", New Object() {PIListData, ItemListData, ItemOnhand, SubinvLoc, Type, TransactionID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidPIDataAsync(ByVal PIListData As System.Data.DataSet, ByVal ItemListData As System.Data.DataSet, ByVal ItemOnhand As System.Data.DataSet, ByVal SubinvLoc As System.Data.DataSet, ByVal Type As String, ByVal TransactionID As Long, ByVal OracleLoginData As ERPLogin)
            Me.ValidPIDataAsync(PIListData, ItemListData, ItemOnhand, SubinvLoc, Type, TransactionID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidPIDataAsync(ByVal PIListData As System.Data.DataSet, ByVal ItemListData As System.Data.DataSet, ByVal ItemOnhand As System.Data.DataSet, ByVal SubinvLoc As System.Data.DataSet, ByVal Type As String, ByVal TransactionID As Long, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ValidPIDataOperationCompleted Is Nothing) Then
                Me.ValidPIDataOperationCompleted = AddressOf Me.OnValidPIDataOperationCompleted
            End If
            Me.InvokeAsync("ValidPIData", New Object() {PIListData, ItemListData, ItemOnhand, SubinvLoc, Type, TransactionID, OracleLoginData}, Me.ValidPIDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidPIDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidPIDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidPIDataCompleted(Me, New ValidPIDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidINVNo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidINVNo(ByVal INVNo As String, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ValidINVNo", New Object() {INVNo, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidINVNoAsync(ByVal INVNo As String, ByVal OracleERPLogin As ERPLogin)
            Me.ValidINVNoAsync(INVNo, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidINVNoAsync(ByVal INVNo As String, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.ValidINVNoOperationCompleted Is Nothing) Then
                Me.ValidINVNoOperationCompleted = AddressOf Me.OnValidINVNoOperationCompleted
            End If
            Me.InvokeAsync("ValidINVNo", New Object() {INVNo, OracleERPLogin}, Me.ValidINVNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidINVNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidINVNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidINVNoCompleted(Me, New ValidINVNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidBatchNo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidBatchNo(ByVal BatchNo As String, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ValidBatchNo", New Object() {BatchNo, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidBatchNoAsync(ByVal BatchNo As String, ByVal OracleERPLogin As ERPLogin)
            Me.ValidBatchNoAsync(BatchNo, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidBatchNoAsync(ByVal BatchNo As String, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.ValidBatchNoOperationCompleted Is Nothing) Then
                Me.ValidBatchNoOperationCompleted = AddressOf Me.OnValidBatchNoOperationCompleted
            End If
            Me.InvokeAsync("ValidBatchNo", New Object() {BatchNo, OracleERPLogin}, Me.ValidBatchNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidBatchNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidBatchNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidBatchNoCompleted(Me, New ValidBatchNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostMR", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostMR(ByVal MRListData As System.Data.DataSet, ByVal MoveType As String, ByVal Printer As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PostMR", New Object() {MRListData, MoveType, Printer, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostMRAsync(ByVal MRListData As System.Data.DataSet, ByVal MoveType As String, ByVal Printer As String, ByVal OracleLoginData As ERPLogin)
            Me.PostMRAsync(MRListData, MoveType, Printer, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostMRAsync(ByVal MRListData As System.Data.DataSet, ByVal MoveType As String, ByVal Printer As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.PostMROperationCompleted Is Nothing) Then
                Me.PostMROperationCompleted = AddressOf Me.OnPostMROperationCompleted
            End If
            Me.InvokeAsync("PostMR", New Object() {MRListData, MoveType, Printer, OracleLoginData}, Me.PostMROperationCompleted, userState)
        End Sub
        
        Private Sub OnPostMROperationCompleted(ByVal arg As Object)
            If (Not (Me.PostMRCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostMRCompleted(Me, New PostMRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintCLIDforMR", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintCLIDforMR(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintCLIDforMR", New Object() {CLIDs, Printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintCLIDforMRAsync(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String)
            Me.PrintCLIDforMRAsync(CLIDs, Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintCLIDforMRAsync(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String, ByVal userState As Object)
            If (Me.PrintCLIDforMROperationCompleted Is Nothing) Then
                Me.PrintCLIDforMROperationCompleted = AddressOf Me.OnPrintCLIDforMROperationCompleted
            End If
            Me.InvokeAsync("PrintCLIDforMR", New Object() {CLIDs, Printer}, Me.PrintCLIDforMROperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintCLIDforMROperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintCLIDforMRCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintCLIDforMRCompleted(Me, New PrintCLIDforMRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CS_GetCLIDInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CS_GetCLIDInfo(ByVal clid As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CS_GetCLIDInfo", New Object() {clid, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CS_GetCLIDInfoAsync(ByVal clid As String, ByVal OracleLoginData As ERPLogin)
            Me.CS_GetCLIDInfoAsync(clid, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CS_GetCLIDInfoAsync(ByVal clid As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CS_GetCLIDInfoOperationCompleted Is Nothing) Then
                Me.CS_GetCLIDInfoOperationCompleted = AddressOf Me.OnCS_GetCLIDInfoOperationCompleted
            End If
            Me.InvokeAsync("CS_GetCLIDInfo", New Object() {clid, OracleLoginData}, Me.CS_GetCLIDInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCS_GetCLIDInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CS_GetCLIDInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CS_GetCLIDInfoCompleted(Me, New CS_GetCLIDInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CS_UpdateCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CS_UpdateCLID(ByVal clid As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("CS_UpdateCLID", New Object() {clid, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CS_UpdateCLIDAsync(ByVal clid As String, ByVal OracleLoginData As ERPLogin)
            Me.CS_UpdateCLIDAsync(clid, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CS_UpdateCLIDAsync(ByVal clid As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CS_UpdateCLIDOperationCompleted Is Nothing) Then
                Me.CS_UpdateCLIDOperationCompleted = AddressOf Me.OnCS_UpdateCLIDOperationCompleted
            End If
            Me.InvokeAsync("CS_UpdateCLID", New Object() {clid, OracleLoginData}, Me.CS_UpdateCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCS_UpdateCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CS_UpdateCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CS_UpdateCLIDCompleted(Me, New CS_UpdateCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetBerth", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBerth() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBerth", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBerthAsync()
            Me.GetBerthAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBerthAsync(ByVal userState As Object)
            If (Me.GetBerthOperationCompleted Is Nothing) Then
                Me.GetBerthOperationCompleted = AddressOf Me.OnGetBerthOperationCompleted
            End If
            Me.InvokeAsync("GetBerth", New Object(-1) {}, Me.GetBerthOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBerthOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBerthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBerthCompleted(Me, New GetBerthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDashboardData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDashboardData() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDashboardData", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDashboardDataAsync()
            Me.GetDashboardDataAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDashboardDataAsync(ByVal userState As Object)
            If (Me.GetDashboardDataOperationCompleted Is Nothing) Then
                Me.GetDashboardDataOperationCompleted = AddressOf Me.OnGetDashboardDataOperationCompleted
            End If
            Me.InvokeAsync("GetDashboardData", New Object(-1) {}, Me.GetDashboardDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDashboardDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDashboardDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDashboardDataCompleted(Me, New GetDashboardDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadEMCfile", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadEMCfile(ByVal DS As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UploadEMCfile", New Object() {DS})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadEMCfileAsync(ByVal DS As System.Data.DataSet)
            Me.UploadEMCfileAsync(DS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadEMCfileAsync(ByVal DS As System.Data.DataSet, ByVal userState As Object)
            If (Me.UploadEMCfileOperationCompleted Is Nothing) Then
                Me.UploadEMCfileOperationCompleted = AddressOf Me.OnUploadEMCfileOperationCompleted
            End If
            Me.InvokeAsync("UploadEMCfile", New Object() {DS}, Me.UploadEMCfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadEMCfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadEMCfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadEMCfileCompleted(Me, New UploadEMCfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidBatchData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidBatchData(ByVal MRListData As System.Data.DataSet, ByVal dsAML As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ValidBatchData", New Object() {MRListData, dsAML, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidBatchDataAsync(ByVal MRListData As System.Data.DataSet, ByVal dsAML As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.ValidBatchDataAsync(MRListData, dsAML, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidBatchDataAsync(ByVal MRListData As System.Data.DataSet, ByVal dsAML As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ValidBatchDataOperationCompleted Is Nothing) Then
                Me.ValidBatchDataOperationCompleted = AddressOf Me.OnValidBatchDataOperationCompleted
            End If
            Me.InvokeAsync("ValidBatchData", New Object() {MRListData, dsAML, OracleLoginData}, Me.ValidBatchDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidBatchDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidBatchDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidBatchDataCompleted(Me, New ValidBatchDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostBatchList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostBatchList(ByVal BatchListData As System.Data.DataSet, ByVal MoveType As String, ByVal Print As Boolean, ByVal Printer As String, ByVal OracleLoginData As ERPLogin) As PostBatchRslt
            Dim results() As Object = Me.Invoke("PostBatchList", New Object() {BatchListData, MoveType, Print, Printer, OracleLoginData})
            Return CType(results(0),PostBatchRslt)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostBatchListAsync(ByVal BatchListData As System.Data.DataSet, ByVal MoveType As String, ByVal Print As Boolean, ByVal Printer As String, ByVal OracleLoginData As ERPLogin)
            Me.PostBatchListAsync(BatchListData, MoveType, Print, Printer, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostBatchListAsync(ByVal BatchListData As System.Data.DataSet, ByVal MoveType As String, ByVal Print As Boolean, ByVal Printer As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.PostBatchListOperationCompleted Is Nothing) Then
                Me.PostBatchListOperationCompleted = AddressOf Me.OnPostBatchListOperationCompleted
            End If
            Me.InvokeAsync("PostBatchList", New Object() {BatchListData, MoveType, Print, Printer, OracleLoginData}, Me.PostBatchListOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostBatchListOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostBatchListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostBatchListCompleted(Me, New PostBatchListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BJ_GetDJInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BJ_GetDJInfo(ByVal DJ As String, ByVal PWC As String, ByVal OracleLoginData As ERPLogin) As BJ_Rs
            Dim results() As Object = Me.Invoke("BJ_GetDJInfo", New Object() {DJ, PWC, OracleLoginData})
            Return CType(results(0),BJ_Rs)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BJ_GetDJInfoAsync(ByVal DJ As String, ByVal PWC As String, ByVal OracleLoginData As ERPLogin)
            Me.BJ_GetDJInfoAsync(DJ, PWC, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BJ_GetDJInfoAsync(ByVal DJ As String, ByVal PWC As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.BJ_GetDJInfoOperationCompleted Is Nothing) Then
                Me.BJ_GetDJInfoOperationCompleted = AddressOf Me.OnBJ_GetDJInfoOperationCompleted
            End If
            Me.InvokeAsync("BJ_GetDJInfo", New Object() {DJ, PWC, OracleLoginData}, Me.BJ_GetDJInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnBJ_GetDJInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.BJ_GetDJInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BJ_GetDJInfoCompleted(Me, New BJ_GetDJInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BJ_Creation", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BJ_Creation(ByVal DJInfo As System.Data.DataSet, ByVal BJds As System.Data.DataSet, ByVal PWC As String, ByVal OracleLoginData As ERPLogin) As BJ_Rs
            Dim results() As Object = Me.Invoke("BJ_Creation", New Object() {DJInfo, BJds, PWC, OracleLoginData})
            Return CType(results(0),BJ_Rs)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BJ_CreationAsync(ByVal DJInfo As System.Data.DataSet, ByVal BJds As System.Data.DataSet, ByVal PWC As String, ByVal OracleLoginData As ERPLogin)
            Me.BJ_CreationAsync(DJInfo, BJds, PWC, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BJ_CreationAsync(ByVal DJInfo As System.Data.DataSet, ByVal BJds As System.Data.DataSet, ByVal PWC As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.BJ_CreationOperationCompleted Is Nothing) Then
                Me.BJ_CreationOperationCompleted = AddressOf Me.OnBJ_CreationOperationCompleted
            End If
            Me.InvokeAsync("BJ_Creation", New Object() {DJInfo, BJds, PWC, OracleLoginData}, Me.BJ_CreationOperationCompleted, userState)
        End Sub
        
        Private Sub OnBJ_CreationOperationCompleted(ByVal arg As Object)
            If (Not (Me.BJ_CreationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BJ_CreationCompleted(Me, New BJ_CreationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BJ_SaveChange", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BJ_SaveChange(ByVal BJInfo As System.Data.DataSet, ByVal BJInitial As System.Data.DataSet, ByVal txtDJ As String, ByVal CreateFlag As Boolean, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("BJ_SaveChange", New Object() {BJInfo, BJInitial, txtDJ, CreateFlag, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BJ_SaveChangeAsync(ByVal BJInfo As System.Data.DataSet, ByVal BJInitial As System.Data.DataSet, ByVal txtDJ As String, ByVal CreateFlag As Boolean, ByVal OracleLoginData As ERPLogin)
            Me.BJ_SaveChangeAsync(BJInfo, BJInitial, txtDJ, CreateFlag, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BJ_SaveChangeAsync(ByVal BJInfo As System.Data.DataSet, ByVal BJInitial As System.Data.DataSet, ByVal txtDJ As String, ByVal CreateFlag As Boolean, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.BJ_SaveChangeOperationCompleted Is Nothing) Then
                Me.BJ_SaveChangeOperationCompleted = AddressOf Me.OnBJ_SaveChangeOperationCompleted
            End If
            Me.InvokeAsync("BJ_SaveChange", New Object() {BJInfo, BJInitial, txtDJ, CreateFlag, OracleLoginData}, Me.BJ_SaveChangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnBJ_SaveChangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.BJ_SaveChangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BJ_SaveChangeCompleted(Me, New BJ_SaveChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckBJInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBJInfo(ByVal DJ As String, ByVal PWC As String, ByVal BJds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As BJ_Rs
            Dim results() As Object = Me.Invoke("CheckBJInfo", New Object() {DJ, PWC, BJds, OracleLoginData})
            Return CType(results(0),BJ_Rs)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBJInfoAsync(ByVal DJ As String, ByVal PWC As String, ByVal BJds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.CheckBJInfoAsync(DJ, PWC, BJds, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBJInfoAsync(ByVal DJ As String, ByVal PWC As String, ByVal BJds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckBJInfoOperationCompleted Is Nothing) Then
                Me.CheckBJInfoOperationCompleted = AddressOf Me.OnCheckBJInfoOperationCompleted
            End If
            Me.InvokeAsync("CheckBJInfo", New Object() {DJ, PWC, BJds, OracleLoginData}, Me.CheckBJInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBJInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBJInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBJInfoCompleted(Me, New CheckBJInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BJ_GetBJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BJ_GetBJ(ByVal DJ As String, ByVal PWC As String, ByVal BJds As System.Data.DataSet, ByVal OnlyOpen As Boolean, ByVal OracleLoginData As ERPLogin) As BJ_Rs
            Dim results() As Object = Me.Invoke("BJ_GetBJ", New Object() {DJ, PWC, BJds, OnlyOpen, OracleLoginData})
            Return CType(results(0),BJ_Rs)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BJ_GetBJAsync(ByVal DJ As String, ByVal PWC As String, ByVal BJds As System.Data.DataSet, ByVal OnlyOpen As Boolean, ByVal OracleLoginData As ERPLogin)
            Me.BJ_GetBJAsync(DJ, PWC, BJds, OnlyOpen, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BJ_GetBJAsync(ByVal DJ As String, ByVal PWC As String, ByVal BJds As System.Data.DataSet, ByVal OnlyOpen As Boolean, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.BJ_GetBJOperationCompleted Is Nothing) Then
                Me.BJ_GetBJOperationCompleted = AddressOf Me.OnBJ_GetBJOperationCompleted
            End If
            Me.InvokeAsync("BJ_GetBJ", New Object() {DJ, PWC, BJds, OnlyOpen, OracleLoginData}, Me.BJ_GetBJOperationCompleted, userState)
        End Sub
        
        Private Sub OnBJ_GetBJOperationCompleted(ByVal arg As Object)
            If (Not (Me.BJ_GetBJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BJ_GetBJCompleted(Me, New BJ_GetBJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/BJ_GenMO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BJ_GenMO(ByVal PWC As String, ByVal DJ As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("BJ_GenMO", New Object() {PWC, DJ, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BJ_GenMOAsync(ByVal PWC As String, ByVal DJ As String, ByVal OracleLoginData As ERPLogin)
            Me.BJ_GenMOAsync(PWC, DJ, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BJ_GenMOAsync(ByVal PWC As String, ByVal DJ As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.BJ_GenMOOperationCompleted Is Nothing) Then
                Me.BJ_GenMOOperationCompleted = AddressOf Me.OnBJ_GenMOOperationCompleted
            End If
            Me.InvokeAsync("BJ_GenMO", New Object() {PWC, DJ, OracleLoginData}, Me.BJ_GenMOOperationCompleted, userState)
        End Sub
        
        Private Sub OnBJ_GenMOOperationCompleted(ByVal arg As Object)
            If (Not (Me.BJ_GenMOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BJ_GenMOCompleted(Me, New BJ_GenMOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LEDDashBoardByRack", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LEDDashBoardByRack() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LEDDashBoardByRack", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LEDDashBoardByRackAsync()
            Me.LEDDashBoardByRackAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LEDDashBoardByRackAsync(ByVal userState As Object)
            If (Me.LEDDashBoardByRackOperationCompleted Is Nothing) Then
                Me.LEDDashBoardByRackOperationCompleted = AddressOf Me.OnLEDDashBoardByRackOperationCompleted
            End If
            Me.InvokeAsync("LEDDashBoardByRack", New Object(-1) {}, Me.LEDDashBoardByRackOperationCompleted, userState)
        End Sub
        
        Private Sub OnLEDDashBoardByRackOperationCompleted(ByVal arg As Object)
            If (Not (Me.LEDDashBoardByRackCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LEDDashBoardByRackCompleted(Me, New LEDDashBoardByRackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LEDDashBoardPCB", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LEDDashBoardPCB(ByVal PCBWarehouse As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("LEDDashBoardPCB", New Object() {PCBWarehouse})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LEDDashBoardPCBAsync(ByVal PCBWarehouse As String)
            Me.LEDDashBoardPCBAsync(PCBWarehouse, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LEDDashBoardPCBAsync(ByVal PCBWarehouse As String, ByVal userState As Object)
            If (Me.LEDDashBoardPCBOperationCompleted Is Nothing) Then
                Me.LEDDashBoardPCBOperationCompleted = AddressOf Me.OnLEDDashBoardPCBOperationCompleted
            End If
            Me.InvokeAsync("LEDDashBoardPCB", New Object() {PCBWarehouse}, Me.LEDDashBoardPCBOperationCompleted, userState)
        End Sub
        
        Private Sub OnLEDDashBoardPCBOperationCompleted(ByVal arg As Object)
            If (Not (Me.LEDDashBoardPCBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LEDDashBoardPCBCompleted(Me, New LEDDashBoardPCBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_SrcSubInv", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_SrcSubInv(ByVal ERPLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("Get_SrcSubInv", New Object() {ERPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_SrcSubInvAsync(ByVal ERPLoginData As ERPLogin)
            Me.Get_SrcSubInvAsync(ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_SrcSubInvAsync(ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_SrcSubInvOperationCompleted Is Nothing) Then
                Me.Get_SrcSubInvOperationCompleted = AddressOf Me.OnGet_SrcSubInvOperationCompleted
            End If
            Me.InvokeAsync("Get_SrcSubInv", New Object() {ERPLoginData}, Me.Get_SrcSubInvOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_SrcSubInvOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_SrcSubInvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_SrcSubInvCompleted(Me, New Get_SrcSubInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_AvlQty", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_AvlQty(ByVal Material As String, ByVal Rev As String, ByVal Manufacturer As String, ByVal ManufacturerPN As String, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin) As Decimal
            Dim results() As Object = Me.Invoke("Get_AvlQty", New Object() {Material, Rev, Manufacturer, ManufacturerPN, Header, ERPLoginData})
            Return CType(results(0),Decimal)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_AvlQtyAsync(ByVal Material As String, ByVal Rev As String, ByVal Manufacturer As String, ByVal ManufacturerPN As String, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin)
            Me.Get_AvlQtyAsync(Material, Rev, Manufacturer, ManufacturerPN, Header, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_AvlQtyAsync(ByVal Material As String, ByVal Rev As String, ByVal Manufacturer As String, ByVal ManufacturerPN As String, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_AvlQtyOperationCompleted Is Nothing) Then
                Me.Get_AvlQtyOperationCompleted = AddressOf Me.OnGet_AvlQtyOperationCompleted
            End If
            Me.InvokeAsync("Get_AvlQty", New Object() {Material, Rev, Manufacturer, ManufacturerPN, Header, ERPLoginData}, Me.Get_AvlQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_AvlQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_AvlQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_AvlQtyCompleted(Me, New Get_AvlQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMSBSource", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMSBSource(ByVal mydataset As System.Data.DataSet, ByVal DJItems As System.Data.DataSet, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMSBSource", New Object() {mydataset, DJItems, Header, ERPLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMSBSourceAsync(ByVal mydataset As System.Data.DataSet, ByVal DJItems As System.Data.DataSet, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin)
            Me.GetMSBSourceAsync(mydataset, DJItems, Header, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMSBSourceAsync(ByVal mydataset As System.Data.DataSet, ByVal DJItems As System.Data.DataSet, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetMSBSourceOperationCompleted Is Nothing) Then
                Me.GetMSBSourceOperationCompleted = AddressOf Me.OnGetMSBSourceOperationCompleted
            End If
            Me.InvokeAsync("GetMSBSource", New Object() {mydataset, DJItems, Header, ERPLoginData}, Me.GetMSBSourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMSBSourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMSBSourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMSBSourceCompleted(Me, New GetMSBSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Save_Template", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Save_Template(ByVal TOMydataSet As System.Data.DataSet, ByVal TemplateStr As StrTemplate, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure) As String
            Dim results() As Object = Me.Invoke("Save_Template", New Object() {TOMydataSet, TemplateStr, ERPLoginData, Header})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Save_TemplateAsync(ByVal TOMydataSet As System.Data.DataSet, ByVal TemplateStr As StrTemplate, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure)
            Me.Save_TemplateAsync(TOMydataSet, TemplateStr, ERPLoginData, Header, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Save_TemplateAsync(ByVal TOMydataSet As System.Data.DataSet, ByVal TemplateStr As StrTemplate, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure, ByVal userState As Object)
            If (Me.Save_TemplateOperationCompleted Is Nothing) Then
                Me.Save_TemplateOperationCompleted = AddressOf Me.OnSave_TemplateOperationCompleted
            End If
            Me.InvokeAsync("Save_Template", New Object() {TOMydataSet, TemplateStr, ERPLoginData, Header}, Me.Save_TemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnSave_TemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.Save_TemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Save_TemplateCompleted(Me, New Save_TemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveProdPicking", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveProdPicking(ByVal TOMydataSet As System.Data.DataSet, ByVal TemplateStr As StrTemplate, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure) As String
            Dim results() As Object = Me.Invoke("SaveProdPicking", New Object() {TOMydataSet, TemplateStr, ERPLoginData, Header})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveProdPickingAsync(ByVal TOMydataSet As System.Data.DataSet, ByVal TemplateStr As StrTemplate, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure)
            Me.SaveProdPickingAsync(TOMydataSet, TemplateStr, ERPLoginData, Header, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveProdPickingAsync(ByVal TOMydataSet As System.Data.DataSet, ByVal TemplateStr As StrTemplate, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure, ByVal userState As Object)
            If (Me.SaveProdPickingOperationCompleted Is Nothing) Then
                Me.SaveProdPickingOperationCompleted = AddressOf Me.OnSaveProdPickingOperationCompleted
            End If
            Me.InvokeAsync("SaveProdPicking", New Object() {TOMydataSet, TemplateStr, ERPLoginData, Header}, Me.SaveProdPickingOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveProdPickingOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveProdPickingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveProdPickingCompleted(Me, New SaveProdPickingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetTemplateItem", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTemplateItem(ByVal Template As String, ByVal ERPLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTemplateItem", New Object() {Template, ERPLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTemplateItemAsync(ByVal Template As String, ByVal ERPLoginData As ERPLogin)
            Me.GetTemplateItemAsync(Template, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTemplateItemAsync(ByVal Template As String, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetTemplateItemOperationCompleted Is Nothing) Then
                Me.GetTemplateItemOperationCompleted = AddressOf Me.OnGetTemplateItemOperationCompleted
            End If
            Me.InvokeAsync("GetTemplateItem", New Object() {Template, ERPLoginData}, Me.GetTemplateItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTemplateItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTemplateItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTemplateItemCompleted(Me, New GetTemplateItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDJInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDJInfo(ByVal ID As String, ByVal ERPLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDJInfo", New Object() {ID, ERPLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDJInfoAsync(ByVal ID As String, ByVal ERPLoginData As ERPLogin)
            Me.GetDJInfoAsync(ID, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDJInfoAsync(ByVal ID As String, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetDJInfoOperationCompleted Is Nothing) Then
                Me.GetDJInfoOperationCompleted = AddressOf Me.OnGetDJInfoOperationCompleted
            End If
            Me.InvokeAsync("GetDJInfo", New Object() {ID, ERPLoginData}, Me.GetDJInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDJInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDJInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDJInfoCompleted(Me, New GetDJInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCLID(ByVal ID As String, ByVal ERPLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("UpdateCLID", New Object() {ID, ERPLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCLIDAsync(ByVal ID As String, ByVal ERPLoginData As ERPLogin)
            Me.UpdateCLIDAsync(ID, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCLIDAsync(ByVal ID As String, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.UpdateCLIDOperationCompleted Is Nothing) Then
                Me.UpdateCLIDOperationCompleted = AddressOf Me.OnUpdateCLIDOperationCompleted
            End If
            Me.InvokeAsync("UpdateCLID", New Object() {ID, ERPLoginData}, Me.UpdateCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCLIDCompleted(Me, New UpdateCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Update_CLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update_CLID(ByVal ID As String, ByVal TransType As String, ByVal ERPLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("Update_CLID", New Object() {ID, TransType, ERPLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Update_CLIDAsync(ByVal ID As String, ByVal TransType As String, ByVal ERPLoginData As ERPLogin)
            Me.Update_CLIDAsync(ID, TransType, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Update_CLIDAsync(ByVal ID As String, ByVal TransType As String, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Update_CLIDOperationCompleted Is Nothing) Then
                Me.Update_CLIDOperationCompleted = AddressOf Me.OnUpdate_CLIDOperationCompleted
            End If
            Me.InvokeAsync("Update_CLID", New Object() {ID, TransType, ERPLoginData}, Me.Update_CLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdate_CLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Update_CLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Update_CLIDCompleted(Me, New Update_CLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Post_DJ_Reversal", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Post_DJ_Reversal(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal orgcode As String, ByVal return_qty As Integer, ByVal uom As String, ByVal SubInventory As String, ByVal Locator As String, ByVal CLID As String) As dj_response
            Dim results() As Object = Me.Invoke("Post_DJ_Reversal", New Object() {ERPLoginData, DJ, orgcode, return_qty, uom, SubInventory, Locator, CLID})
            Return CType(results(0),dj_response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Post_DJ_ReversalAsync(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal orgcode As String, ByVal return_qty As Integer, ByVal uom As String, ByVal SubInventory As String, ByVal Locator As String, ByVal CLID As String)
            Me.Post_DJ_ReversalAsync(ERPLoginData, DJ, orgcode, return_qty, uom, SubInventory, Locator, CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Post_DJ_ReversalAsync(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal orgcode As String, ByVal return_qty As Integer, ByVal uom As String, ByVal SubInventory As String, ByVal Locator As String, ByVal CLID As String, ByVal userState As Object)
            If (Me.Post_DJ_ReversalOperationCompleted Is Nothing) Then
                Me.Post_DJ_ReversalOperationCompleted = AddressOf Me.OnPost_DJ_ReversalOperationCompleted
            End If
            Me.InvokeAsync("Post_DJ_Reversal", New Object() {ERPLoginData, DJ, orgcode, return_qty, uom, SubInventory, Locator, CLID}, Me.Post_DJ_ReversalOperationCompleted, userState)
        End Sub
        
        Private Sub OnPost_DJ_ReversalOperationCompleted(ByVal arg As Object)
            If (Not (Me.Post_DJ_ReversalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Post_DJ_ReversalCompleted(Me, New Post_DJ_ReversalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetTOItem", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTOItem(ByVal TOID As String, ByVal ERPLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTOItem", New Object() {TOID, ERPLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTOItemAsync(ByVal TOID As String, ByVal ERPLoginData As ERPLogin)
            Me.GetTOItemAsync(TOID, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTOItemAsync(ByVal TOID As String, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetTOItemOperationCompleted Is Nothing) Then
                Me.GetTOItemOperationCompleted = AddressOf Me.OnGetTOItemOperationCompleted
            End If
            Me.InvokeAsync("GetTOItem", New Object() {TOID, ERPLoginData}, Me.GetTOItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTOItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTOItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTOItemCompleted(Me, New GetTOItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Search_Template", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Search_Template(ByVal Template As String) As String
            Dim results() As Object = Me.Invoke("Search_Template", New Object() {Template})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Search_TemplateAsync(ByVal Template As String)
            Me.Search_TemplateAsync(Template, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Search_TemplateAsync(ByVal Template As String, ByVal userState As Object)
            If (Me.Search_TemplateOperationCompleted Is Nothing) Then
                Me.Search_TemplateOperationCompleted = AddressOf Me.OnSearch_TemplateOperationCompleted
            End If
            Me.InvokeAsync("Search_Template", New Object() {Template}, Me.Search_TemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnSearch_TemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.Search_TemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Search_TemplateCompleted(Me, New Search_TemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Check_Template", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Check_Template(ByVal Template As String, ByVal ERPLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("Check_Template", New Object() {Template, ERPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Check_TemplateAsync(ByVal Template As String, ByVal ERPLoginData As ERPLogin)
            Me.Check_TemplateAsync(Template, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Check_TemplateAsync(ByVal Template As String, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Check_TemplateOperationCompleted Is Nothing) Then
                Me.Check_TemplateOperationCompleted = AddressOf Me.OnCheck_TemplateOperationCompleted
            End If
            Me.InvokeAsync("Check_Template", New Object() {Template, ERPLoginData}, Me.Check_TemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheck_TemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.Check_TemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Check_TemplateCompleted(Me, New Check_TemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Search_LockTO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Search_LockTO(ByVal TOVALUE As String) As Boolean
            Dim results() As Object = Me.Invoke("Search_LockTO", New Object() {TOVALUE})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Search_LockTOAsync(ByVal TOVALUE As String)
            Me.Search_LockTOAsync(TOVALUE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Search_LockTOAsync(ByVal TOVALUE As String, ByVal userState As Object)
            If (Me.Search_LockTOOperationCompleted Is Nothing) Then
                Me.Search_LockTOOperationCompleted = AddressOf Me.OnSearch_LockTOOperationCompleted
            End If
            Me.InvokeAsync("Search_LockTO", New Object() {TOVALUE}, Me.Search_LockTOOperationCompleted, userState)
        End Sub
        
        Private Sub OnSearch_LockTOOperationCompleted(ByVal arg As Object)
            If (Not (Me.Search_LockTOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Search_LockTOCompleted(Me, New Search_LockTOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Search_OpenTO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Search_OpenTO(ByVal TOVALUE As String) As Boolean
            Dim results() As Object = Me.Invoke("Search_OpenTO", New Object() {TOVALUE})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Search_OpenTOAsync(ByVal TOVALUE As String)
            Me.Search_OpenTOAsync(TOVALUE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Search_OpenTOAsync(ByVal TOVALUE As String, ByVal userState As Object)
            If (Me.Search_OpenTOOperationCompleted Is Nothing) Then
                Me.Search_OpenTOOperationCompleted = AddressOf Me.OnSearch_OpenTOOperationCompleted
            End If
            Me.InvokeAsync("Search_OpenTO", New Object() {TOVALUE}, Me.Search_OpenTOOperationCompleted, userState)
        End Sub
        
        Private Sub OnSearch_OpenTOOperationCompleted(ByVal arg As Object)
            If (Not (Me.Search_OpenTOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Search_OpenTOCompleted(Me, New Search_OpenTOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Unlock_PickOrder", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Unlock_PickOrder(ByVal PickOrder As String, ByVal erplogindata As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("Unlock_PickOrder", New Object() {PickOrder, erplogindata})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Unlock_PickOrderAsync(ByVal PickOrder As String, ByVal erplogindata As ERPLogin)
            Me.Unlock_PickOrderAsync(PickOrder, erplogindata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Unlock_PickOrderAsync(ByVal PickOrder As String, ByVal erplogindata As ERPLogin, ByVal userState As Object)
            If (Me.Unlock_PickOrderOperationCompleted Is Nothing) Then
                Me.Unlock_PickOrderOperationCompleted = AddressOf Me.OnUnlock_PickOrderOperationCompleted
            End If
            Me.InvokeAsync("Unlock_PickOrder", New Object() {PickOrder, erplogindata}, Me.Unlock_PickOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnlock_PickOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.Unlock_PickOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Unlock_PickOrderCompleted(Me, New Unlock_PickOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ClosePickOrder", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClosePickOrder(ByVal mydataset As System.Data.DataSet, ByVal PickOrder As String, ByVal ERPLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ClosePickOrder", New Object() {mydataset, PickOrder, ERPLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClosePickOrderAsync(ByVal mydataset As System.Data.DataSet, ByVal PickOrder As String, ByVal ERPLoginData As ERPLogin)
            Me.ClosePickOrderAsync(mydataset, PickOrder, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClosePickOrderAsync(ByVal mydataset As System.Data.DataSet, ByVal PickOrder As String, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ClosePickOrderOperationCompleted Is Nothing) Then
                Me.ClosePickOrderOperationCompleted = AddressOf Me.OnClosePickOrderOperationCompleted
            End If
            Me.InvokeAsync("ClosePickOrder", New Object() {mydataset, PickOrder, ERPLoginData}, Me.ClosePickOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnClosePickOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClosePickOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClosePickOrderCompleted(Me, New ClosePickOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_PickOrder", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_PickOrder(ByVal header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_PickOrder", New Object() {header, ERPLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_PickOrderAsync(ByVal header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin)
            Me.Get_PickOrderAsync(header, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_PickOrderAsync(ByVal header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_PickOrderOperationCompleted Is Nothing) Then
                Me.Get_PickOrderOperationCompleted = AddressOf Me.OnGet_PickOrderOperationCompleted
            End If
            Me.InvokeAsync("Get_PickOrder", New Object() {header, ERPLoginData}, Me.Get_PickOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_PickOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_PickOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_PickOrderCompleted(Me, New Get_PickOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetTemplate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTemplate(ByVal Header As ProdPickingStructure) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTemplate", New Object() {Header})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTemplateAsync(ByVal Header As ProdPickingStructure)
            Me.GetTemplateAsync(Header, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTemplateAsync(ByVal Header As ProdPickingStructure, ByVal userState As Object)
            If (Me.GetTemplateOperationCompleted Is Nothing) Then
                Me.GetTemplateOperationCompleted = AddressOf Me.OnGetTemplateOperationCompleted
            End If
            Me.InvokeAsync("GetTemplate", New Object() {Header}, Me.GetTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTemplateCompleted(Me, New GetTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Check_PickList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Check_PickList(ByVal mydataset As System.Data.DataSet, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("Check_PickList", New Object() {mydataset, Header, ERPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Check_PickListAsync(ByVal mydataset As System.Data.DataSet, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin)
            Me.Check_PickListAsync(mydataset, Header, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Check_PickListAsync(ByVal mydataset As System.Data.DataSet, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Check_PickListOperationCompleted Is Nothing) Then
                Me.Check_PickListOperationCompleted = AddressOf Me.OnCheck_PickListOperationCompleted
            End If
            Me.InvokeAsync("Check_PickList", New Object() {mydataset, Header, ERPLoginData}, Me.Check_PickListOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheck_PickListOperationCompleted(ByVal arg As Object)
            If (Not (Me.Check_PickListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Check_PickListCompleted(Me, New Check_PickListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostProdPicking", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostProdPicking(ByVal TOMydataSet As System.Data.DataSet, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure) As ProdPickingResponse
            Dim results() As Object = Me.Invoke("PostProdPicking", New Object() {TOMydataSet, ERPLoginData, Header})
            Return CType(results(0),ProdPickingResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostProdPickingAsync(ByVal TOMydataSet As System.Data.DataSet, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure)
            Me.PostProdPickingAsync(TOMydataSet, ERPLoginData, Header, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostProdPickingAsync(ByVal TOMydataSet As System.Data.DataSet, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure, ByVal userState As Object)
            If (Me.PostProdPickingOperationCompleted Is Nothing) Then
                Me.PostProdPickingOperationCompleted = AddressOf Me.OnPostProdPickingOperationCompleted
            End If
            Me.InvokeAsync("PostProdPicking", New Object() {TOMydataSet, ERPLoginData, Header}, Me.PostProdPickingOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostProdPickingOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostProdPickingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostProdPickingCompleted(Me, New PostProdPickingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DeleteTemplate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteTemplate(ByVal Template As String) As String
            Dim results() As Object = Me.Invoke("DeleteTemplate", New Object() {Template})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteTemplateAsync(ByVal Template As String)
            Me.DeleteTemplateAsync(Template, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTemplateAsync(ByVal Template As String, ByVal userState As Object)
            If (Me.DeleteTemplateOperationCompleted Is Nothing) Then
                Me.DeleteTemplateOperationCompleted = AddressOf Me.OnDeleteTemplateOperationCompleted
            End If
            Me.InvokeAsync("DeleteTemplate", New Object() {Template}, Me.DeleteTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTemplateCompleted(Me, New DeleteTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetBOMFromERP", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBOMFromERP(ByVal mydataset As System.Data.DataSet, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure, ByVal OrderNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBOMFromERP", New Object() {mydataset, ERPLoginData, Header, OrderNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBOMFromERPAsync(ByVal mydataset As System.Data.DataSet, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure, ByVal OrderNo As String)
            Me.GetBOMFromERPAsync(mydataset, ERPLoginData, Header, OrderNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBOMFromERPAsync(ByVal mydataset As System.Data.DataSet, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure, ByVal OrderNo As String, ByVal userState As Object)
            If (Me.GetBOMFromERPOperationCompleted Is Nothing) Then
                Me.GetBOMFromERPOperationCompleted = AddressOf Me.OnGetBOMFromERPOperationCompleted
            End If
            Me.InvokeAsync("GetBOMFromERP", New Object() {mydataset, ERPLoginData, Header, OrderNo}, Me.GetBOMFromERPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBOMFromERPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBOMFromERPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBOMFromERPCompleted(Me, New GetBOMFromERPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetListFromExcel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListFromExcel(ByVal mydataset As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin) As PPDataRst
            Dim results() As Object = Me.Invoke("GetListFromExcel", New Object() {mydataset, ExcelData, Header, ERPLoginData})
            Return CType(results(0),PPDataRst)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListFromExcelAsync(ByVal mydataset As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin)
            Me.GetListFromExcelAsync(mydataset, ExcelData, Header, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListFromExcelAsync(ByVal mydataset As System.Data.DataSet, ByVal ExcelData As System.Data.DataSet, ByVal Header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetListFromExcelOperationCompleted Is Nothing) Then
                Me.GetListFromExcelOperationCompleted = AddressOf Me.OnGetListFromExcelOperationCompleted
            End If
            Me.InvokeAsync("GetListFromExcel", New Object() {mydataset, ExcelData, Header, ERPLoginData}, Me.GetListFromExcelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListFromExcelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListFromExcelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListFromExcelCompleted(Me, New GetListFromExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_DestSubLoc", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_DestSubLoc(ByVal DJ As String, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure) As ProdPickingStructure
            Dim results() As Object = Me.Invoke("Get_DestSubLoc", New Object() {DJ, ERPLoginData, Header})
            Return CType(results(0),ProdPickingStructure)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_DestSubLocAsync(ByVal DJ As String, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure)
            Me.Get_DestSubLocAsync(DJ, ERPLoginData, Header, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_DestSubLocAsync(ByVal DJ As String, ByVal ERPLoginData As ERPLogin, ByVal Header As ProdPickingStructure, ByVal userState As Object)
            If (Me.Get_DestSubLocOperationCompleted Is Nothing) Then
                Me.Get_DestSubLocOperationCompleted = AddressOf Me.OnGet_DestSubLocOperationCompleted
            End If
            Me.InvokeAsync("Get_DestSubLoc", New Object() {DJ, ERPLoginData, Header}, Me.Get_DestSubLocOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_DestSubLocOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_DestSubLocCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_DestSubLocCompleted(Me, New Get_DestSubLocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_ChangeExcelFlag", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_ChangeExcelFlag(ByVal ERPLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("Get_ChangeExcelFlag", New Object() {ERPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_ChangeExcelFlagAsync(ByVal ERPLoginData As ERPLogin)
            Me.Get_ChangeExcelFlagAsync(ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_ChangeExcelFlagAsync(ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_ChangeExcelFlagOperationCompleted Is Nothing) Then
                Me.Get_ChangeExcelFlagOperationCompleted = AddressOf Me.OnGet_ChangeExcelFlagOperationCompleted
            End If
            Me.InvokeAsync("Get_ChangeExcelFlag", New Object() {ERPLoginData}, Me.Get_ChangeExcelFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_ChangeExcelFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_ChangeExcelFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_ChangeExcelFlagCompleted(Me, New Get_ChangeExcelFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetOrderInfoFromERP", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderInfoFromERP(ByVal SAPLoginData As ERPLogin, ByVal OrderNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOrderInfoFromERP", New Object() {SAPLoginData, OrderNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderInfoFromERPAsync(ByVal SAPLoginData As ERPLogin, ByVal OrderNo As String)
            Me.GetOrderInfoFromERPAsync(SAPLoginData, OrderNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderInfoFromERPAsync(ByVal SAPLoginData As ERPLogin, ByVal OrderNo As String, ByVal userState As Object)
            If (Me.GetOrderInfoFromERPOperationCompleted Is Nothing) Then
                Me.GetOrderInfoFromERPOperationCompleted = AddressOf Me.OnGetOrderInfoFromERPOperationCompleted
            End If
            Me.InvokeAsync("GetOrderInfoFromERP", New Object() {SAPLoginData, OrderNo}, Me.GetOrderInfoFromERPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderInfoFromERPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderInfoFromERPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderInfoFromERPCompleted(Me, New GetOrderInfoFromERPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDJInfoFromERP", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDJInfoFromERP(ByVal SAPLoginData As ERPLogin, ByVal OrderNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDJInfoFromERP", New Object() {SAPLoginData, OrderNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDJInfoFromERPAsync(ByVal SAPLoginData As ERPLogin, ByVal OrderNo As String)
            Me.GetDJInfoFromERPAsync(SAPLoginData, OrderNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDJInfoFromERPAsync(ByVal SAPLoginData As ERPLogin, ByVal OrderNo As String, ByVal userState As Object)
            If (Me.GetDJInfoFromERPOperationCompleted Is Nothing) Then
                Me.GetDJInfoFromERPOperationCompleted = AddressOf Me.OnGetDJInfoFromERPOperationCompleted
            End If
            Me.InvokeAsync("GetDJInfoFromERP", New Object() {SAPLoginData, OrderNo}, Me.GetDJInfoFromERPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDJInfoFromERPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDJInfoFromERPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDJInfoFromERPCompleted(Me, New GetDJInfoFromERPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetOrderInfoFromETRACE", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderInfoFromETRACE(ByVal SAPLoginData As ERPLogin, ByVal OrderNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOrderInfoFromETRACE", New Object() {SAPLoginData, OrderNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderInfoFromETRACEAsync(ByVal SAPLoginData As ERPLogin, ByVal OrderNo As String)
            Me.GetOrderInfoFromETRACEAsync(SAPLoginData, OrderNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderInfoFromETRACEAsync(ByVal SAPLoginData As ERPLogin, ByVal OrderNo As String, ByVal userState As Object)
            If (Me.GetOrderInfoFromETRACEOperationCompleted Is Nothing) Then
                Me.GetOrderInfoFromETRACEOperationCompleted = AddressOf Me.OnGetOrderInfoFromETRACEOperationCompleted
            End If
            Me.InvokeAsync("GetOrderInfoFromETRACE", New Object() {SAPLoginData, OrderNo}, Me.GetOrderInfoFromETRACEOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderInfoFromETRACEOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderInfoFromETRACECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderInfoFromETRACECompleted(Me, New GetOrderInfoFromETRACECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetIDInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIDInfo(ByVal SAPLoginData As ERPLogin, ByVal ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetIDInfo", New Object() {SAPLoginData, ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIDInfoAsync(ByVal SAPLoginData As ERPLogin, ByVal ID As String)
            Me.GetIDInfoAsync(SAPLoginData, ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIDInfoAsync(ByVal SAPLoginData As ERPLogin, ByVal ID As String, ByVal userState As Object)
            If (Me.GetIDInfoOperationCompleted Is Nothing) Then
                Me.GetIDInfoOperationCompleted = AddressOf Me.OnGetIDInfoOperationCompleted
            End If
            Me.InvokeAsync("GetIDInfo", New Object() {SAPLoginData, ID}, Me.GetIDInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIDInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIDInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIDInfoCompleted(Me, New GetIDInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDJ(ByVal SAPLoginData As ERPLogin, ByVal ID As String) As String
            Dim results() As Object = Me.Invoke("GetDJ", New Object() {SAPLoginData, ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDJAsync(ByVal SAPLoginData As ERPLogin, ByVal ID As String)
            Me.GetDJAsync(SAPLoginData, ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDJAsync(ByVal SAPLoginData As ERPLogin, ByVal ID As String, ByVal userState As Object)
            If (Me.GetDJOperationCompleted Is Nothing) Then
                Me.GetDJOperationCompleted = AddressOf Me.OnGetDJOperationCompleted
            End If
            Me.InvokeAsync("GetDJ", New Object() {SAPLoginData, ID}, Me.GetDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDJCompleted(Me, New GetDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Check_HW_Flag", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Check_HW_Flag(ByVal ERPLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("Check_HW_Flag", New Object() {ERPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Check_HW_FlagAsync(ByVal ERPLoginData As ERPLogin)
            Me.Check_HW_FlagAsync(ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Check_HW_FlagAsync(ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Check_HW_FlagOperationCompleted Is Nothing) Then
                Me.Check_HW_FlagOperationCompleted = AddressOf Me.OnCheck_HW_FlagOperationCompleted
            End If
            Me.InvokeAsync("Check_HW_Flag", New Object() {ERPLoginData}, Me.Check_HW_FlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheck_HW_FlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.Check_HW_FlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Check_HW_FlagCompleted(Me, New Check_HW_FlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Flag_AutoGetBOMRev", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Flag_AutoGetBOMRev(ByVal ERPLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("Flag_AutoGetBOMRev", New Object() {ERPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Flag_AutoGetBOMRevAsync(ByVal ERPLoginData As ERPLogin)
            Me.Flag_AutoGetBOMRevAsync(ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Flag_AutoGetBOMRevAsync(ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Flag_AutoGetBOMRevOperationCompleted Is Nothing) Then
                Me.Flag_AutoGetBOMRevOperationCompleted = AddressOf Me.OnFlag_AutoGetBOMRevOperationCompleted
            End If
            Me.InvokeAsync("Flag_AutoGetBOMRev", New Object() {ERPLoginData}, Me.Flag_AutoGetBOMRevOperationCompleted, userState)
        End Sub
        
        Private Sub OnFlag_AutoGetBOMRevOperationCompleted(ByVal arg As Object)
            If (Not (Me.Flag_AutoGetBOMRevCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Flag_AutoGetBOMRevCompleted(Me, New Flag_AutoGetBOMRevCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Post_DJ_Completion", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Post_DJ_Completion(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal com_qty As Integer, ByVal Inventory As String, ByVal Locator As String, ByVal ds As System.Data.DataSet, ByVal Productlabel As LabelData, ByVal Flag As Integer) As dj_response
            Dim results() As Object = Me.Invoke("Post_DJ_Completion", New Object() {ERPLoginData, DJ, com_qty, Inventory, Locator, ds, Productlabel, Flag})
            Return CType(results(0),dj_response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Post_DJ_CompletionAsync(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal com_qty As Integer, ByVal Inventory As String, ByVal Locator As String, ByVal ds As System.Data.DataSet, ByVal Productlabel As LabelData, ByVal Flag As Integer)
            Me.Post_DJ_CompletionAsync(ERPLoginData, DJ, com_qty, Inventory, Locator, ds, Productlabel, Flag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Post_DJ_CompletionAsync(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal com_qty As Integer, ByVal Inventory As String, ByVal Locator As String, ByVal ds As System.Data.DataSet, ByVal Productlabel As LabelData, ByVal Flag As Integer, ByVal userState As Object)
            If (Me.Post_DJ_CompletionOperationCompleted Is Nothing) Then
                Me.Post_DJ_CompletionOperationCompleted = AddressOf Me.OnPost_DJ_CompletionOperationCompleted
            End If
            Me.InvokeAsync("Post_DJ_Completion", New Object() {ERPLoginData, DJ, com_qty, Inventory, Locator, ds, Productlabel, Flag}, Me.Post_DJ_CompletionOperationCompleted, userState)
        End Sub
        
        Private Sub OnPost_DJ_CompletionOperationCompleted(ByVal arg As Object)
            If (Not (Me.Post_DJ_CompletionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Post_DJ_CompletionCompleted(Me, New Post_DJ_CompletionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/get_uploadinfor", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function get_uploadinfor(ByVal upload As System.Data.DataSet, ByVal mydataset As System.Data.DataSet, ByVal header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("get_uploadinfor", New Object() {upload, mydataset, header, ERPLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub get_uploadinforAsync(ByVal upload As System.Data.DataSet, ByVal mydataset As System.Data.DataSet, ByVal header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin)
            Me.get_uploadinforAsync(upload, mydataset, header, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub get_uploadinforAsync(ByVal upload As System.Data.DataSet, ByVal mydataset As System.Data.DataSet, ByVal header As ProdPickingStructure, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.get_uploadinforOperationCompleted Is Nothing) Then
                Me.get_uploadinforOperationCompleted = AddressOf Me.Onget_uploadinforOperationCompleted
            End If
            Me.InvokeAsync("get_uploadinfor", New Object() {upload, mydataset, header, ERPLoginData}, Me.get_uploadinforOperationCompleted, userState)
        End Sub
        
        Private Sub Onget_uploadinforOperationCompleted(ByVal arg As Object)
            If (Not (Me.get_uploadinforCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent get_uploadinforCompleted(Me, New get_uploadinforCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DJ_Completion", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DJ_Completion(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal com_qty As Integer, ByVal Inventory As String, ByVal Locator As String) As dj_response
            Dim results() As Object = Me.Invoke("DJ_Completion", New Object() {ERPLoginData, DJ, com_qty, Inventory, Locator})
            Return CType(results(0),dj_response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DJ_CompletionAsync(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal com_qty As Integer, ByVal Inventory As String, ByVal Locator As String)
            Me.DJ_CompletionAsync(ERPLoginData, DJ, com_qty, Inventory, Locator, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DJ_CompletionAsync(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal com_qty As Integer, ByVal Inventory As String, ByVal Locator As String, ByVal userState As Object)
            If (Me.DJ_CompletionOperationCompleted Is Nothing) Then
                Me.DJ_CompletionOperationCompleted = AddressOf Me.OnDJ_CompletionOperationCompleted
            End If
            Me.InvokeAsync("DJ_Completion", New Object() {ERPLoginData, DJ, com_qty, Inventory, Locator}, Me.DJ_CompletionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDJ_CompletionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DJ_CompletionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DJ_CompletionCompleted(Me, New DJ_CompletionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DJ_Completion_BoxID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DJ_Completion_BoxID(ByVal ERPLoginData As ERPLogin, ByVal BoxID As String, ByVal com_qty As Integer, ByVal Inventory As String, ByVal Locator As String) As dj_response
            Dim results() As Object = Me.Invoke("DJ_Completion_BoxID", New Object() {ERPLoginData, BoxID, com_qty, Inventory, Locator})
            Return CType(results(0),dj_response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DJ_Completion_BoxIDAsync(ByVal ERPLoginData As ERPLogin, ByVal BoxID As String, ByVal com_qty As Integer, ByVal Inventory As String, ByVal Locator As String)
            Me.DJ_Completion_BoxIDAsync(ERPLoginData, BoxID, com_qty, Inventory, Locator, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DJ_Completion_BoxIDAsync(ByVal ERPLoginData As ERPLogin, ByVal BoxID As String, ByVal com_qty As Integer, ByVal Inventory As String, ByVal Locator As String, ByVal userState As Object)
            If (Me.DJ_Completion_BoxIDOperationCompleted Is Nothing) Then
                Me.DJ_Completion_BoxIDOperationCompleted = AddressOf Me.OnDJ_Completion_BoxIDOperationCompleted
            End If
            Me.InvokeAsync("DJ_Completion_BoxID", New Object() {ERPLoginData, BoxID, com_qty, Inventory, Locator}, Me.DJ_Completion_BoxIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnDJ_Completion_BoxIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.DJ_Completion_BoxIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DJ_Completion_BoxIDCompleted(Me, New DJ_Completion_BoxIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DJCompletion_For_PMJob", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DJCompletion_For_PMJob(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal dj_rev As String, ByVal [Assembly] As String, ByVal com_qty As String, ByVal uom As String, ByVal SubInventory As String, ByVal Locator As String, ByVal ROHS As String, ByVal MSB As String, ByVal item_desc As String, ByVal LabelPrinter As String) As String
            Dim results() As Object = Me.Invoke("DJCompletion_For_PMJob", New Object() {ERPLoginData, DJ, dj_rev, [Assembly], com_qty, uom, SubInventory, Locator, ROHS, MSB, item_desc, LabelPrinter})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DJCompletion_For_PMJobAsync(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal dj_rev As String, ByVal [Assembly] As String, ByVal com_qty As String, ByVal uom As String, ByVal SubInventory As String, ByVal Locator As String, ByVal ROHS As String, ByVal MSB As String, ByVal item_desc As String, ByVal LabelPrinter As String)
            Me.DJCompletion_For_PMJobAsync(ERPLoginData, DJ, dj_rev, [Assembly], com_qty, uom, SubInventory, Locator, ROHS, MSB, item_desc, LabelPrinter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DJCompletion_For_PMJobAsync(ByVal ERPLoginData As ERPLogin, ByVal DJ As String, ByVal dj_rev As String, ByVal [Assembly] As String, ByVal com_qty As String, ByVal uom As String, ByVal SubInventory As String, ByVal Locator As String, ByVal ROHS As String, ByVal MSB As String, ByVal item_desc As String, ByVal LabelPrinter As String, ByVal userState As Object)
            If (Me.DJCompletion_For_PMJobOperationCompleted Is Nothing) Then
                Me.DJCompletion_For_PMJobOperationCompleted = AddressOf Me.OnDJCompletion_For_PMJobOperationCompleted
            End If
            Me.InvokeAsync("DJCompletion_For_PMJob", New Object() {ERPLoginData, DJ, dj_rev, [Assembly], com_qty, uom, SubInventory, Locator, ROHS, MSB, item_desc, LabelPrinter}, Me.DJCompletion_For_PMJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnDJCompletion_For_PMJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.DJCompletion_For_PMJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DJCompletion_For_PMJobCompleted(Me, New DJCompletion_For_PMJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CountOfBoxID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CountOfBoxID(ByVal SAPLoginData As ERPLogin, ByVal ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CountOfBoxID", New Object() {SAPLoginData, ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CountOfBoxIDAsync(ByVal SAPLoginData As ERPLogin, ByVal ID As String)
            Me.CountOfBoxIDAsync(SAPLoginData, ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CountOfBoxIDAsync(ByVal SAPLoginData As ERPLogin, ByVal ID As String, ByVal userState As Object)
            If (Me.CountOfBoxIDOperationCompleted Is Nothing) Then
                Me.CountOfBoxIDOperationCompleted = AddressOf Me.OnCountOfBoxIDOperationCompleted
            End If
            Me.InvokeAsync("CountOfBoxID", New Object() {SAPLoginData, ID}, Me.CountOfBoxIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCountOfBoxIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CountOfBoxIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CountOfBoxIDCompleted(Me, New CountOfBoxIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSOLine", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSOLine(ByVal LoginData As ERPLogin, ByVal SONo As String, ByVal SOLine As String) As dj_response
            Dim results() As Object = Me.Invoke("GetSOLine", New Object() {LoginData, SONo, SOLine})
            Return CType(results(0),dj_response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSOLineAsync(ByVal LoginData As ERPLogin, ByVal SONo As String, ByVal SOLine As String)
            Me.GetSOLineAsync(LoginData, SONo, SOLine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSOLineAsync(ByVal LoginData As ERPLogin, ByVal SONo As String, ByVal SOLine As String, ByVal userState As Object)
            If (Me.GetSOLineOperationCompleted Is Nothing) Then
                Me.GetSOLineOperationCompleted = AddressOf Me.OnGetSOLineOperationCompleted
            End If
            Me.InvokeAsync("GetSOLine", New Object() {LoginData, SONo, SOLine}, Me.GetSOLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSOLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSOLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSOLineCompleted(Me, New GetSOLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Getrelease_lines", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Getrelease_lines(ByVal ERPLoginData As ERPLogin, ByVal OrderNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Getrelease_lines", New Object() {ERPLoginData, OrderNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Getrelease_linesAsync(ByVal ERPLoginData As ERPLogin, ByVal OrderNo As String)
            Me.Getrelease_linesAsync(ERPLoginData, OrderNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Getrelease_linesAsync(ByVal ERPLoginData As ERPLogin, ByVal OrderNo As String, ByVal userState As Object)
            If (Me.Getrelease_linesOperationCompleted Is Nothing) Then
                Me.Getrelease_linesOperationCompleted = AddressOf Me.OnGetrelease_linesOperationCompleted
            End If
            Me.InvokeAsync("Getrelease_lines", New Object() {ERPLoginData, OrderNo}, Me.Getrelease_linesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetrelease_linesOperationCompleted(ByVal arg As Object)
            If (Not (Me.Getrelease_linesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Getrelease_linesCompleted(Me, New Getrelease_linesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/writeClidRefPo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function writeClidRefPo(ByVal listItem As System.Data.DataSet, ByVal DjNo As String, ByVal userName As String) As Boolean
            Dim results() As Object = Me.Invoke("writeClidRefPo", New Object() {listItem, DjNo, userName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub writeClidRefPoAsync(ByVal listItem As System.Data.DataSet, ByVal DjNo As String, ByVal userName As String)
            Me.writeClidRefPoAsync(listItem, DjNo, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub writeClidRefPoAsync(ByVal listItem As System.Data.DataSet, ByVal DjNo As String, ByVal userName As String, ByVal userState As Object)
            If (Me.writeClidRefPoOperationCompleted Is Nothing) Then
                Me.writeClidRefPoOperationCompleted = AddressOf Me.OnwriteClidRefPoOperationCompleted
            End If
            Me.InvokeAsync("writeClidRefPo", New Object() {listItem, DjNo, userName}, Me.writeClidRefPoOperationCompleted, userState)
        End Sub
        
        Private Sub OnwriteClidRefPoOperationCompleted(ByVal arg As Object)
            If (Not (Me.writeClidRefPoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent writeClidRefPoCompleted(Me, New writeClidRefPoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AllowEditDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllowEditDJ(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("AllowEditDJ", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllowEditDJAsync(ByVal OracleLoginData As ERPLogin)
            Me.AllowEditDJAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllowEditDJAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.AllowEditDJOperationCompleted Is Nothing) Then
                Me.AllowEditDJOperationCompleted = AddressOf Me.OnAllowEditDJOperationCompleted
            End If
            Me.InvokeAsync("AllowEditDJ", New Object() {OracleLoginData}, Me.AllowEditDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllowEditDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllowEditDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllowEditDJCompleted(Me, New AllowEditDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AllowDiffDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllowDiffDJ(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("AllowDiffDJ", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllowDiffDJAsync(ByVal OracleLoginData As ERPLogin)
            Me.AllowDiffDJAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllowDiffDJAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.AllowDiffDJOperationCompleted Is Nothing) Then
                Me.AllowDiffDJOperationCompleted = AddressOf Me.OnAllowDiffDJOperationCompleted
            End If
            Me.InvokeAsync("AllowDiffDJ", New Object() {OracleLoginData}, Me.AllowDiffDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllowDiffDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllowDiffDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllowDiffDJCompleted(Me, New AllowDiffDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DJCmp_GetBoxInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DJCmp_GetBoxInfo(ByVal ID As String, ByVal OracleLoginData As ERPLogin) As dj_response
            Dim results() As Object = Me.Invoke("DJCmp_GetBoxInfo", New Object() {ID, OracleLoginData})
            Return CType(results(0),dj_response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DJCmp_GetBoxInfoAsync(ByVal ID As String, ByVal OracleLoginData As ERPLogin)
            Me.DJCmp_GetBoxInfoAsync(ID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DJCmp_GetBoxInfoAsync(ByVal ID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.DJCmp_GetBoxInfoOperationCompleted Is Nothing) Then
                Me.DJCmp_GetBoxInfoOperationCompleted = AddressOf Me.OnDJCmp_GetBoxInfoOperationCompleted
            End If
            Me.InvokeAsync("DJCmp_GetBoxInfo", New Object() {ID, OracleLoginData}, Me.DJCmp_GetBoxInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDJCmp_GetBoxInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DJCmp_GetBoxInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DJCmp_GetBoxInfoCompleted(Me, New DJCmp_GetBoxInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckDJforCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckDJforCLID(ByVal CLID As String, ByVal DJ As String, ByVal Qty As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("CheckDJforCLID", New Object() {CLID, DJ, Qty, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckDJforCLIDAsync(ByVal CLID As String, ByVal DJ As String, ByVal Qty As String, ByVal OracleLoginData As ERPLogin)
            Me.CheckDJforCLIDAsync(CLID, DJ, Qty, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckDJforCLIDAsync(ByVal CLID As String, ByVal DJ As String, ByVal Qty As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckDJforCLIDOperationCompleted Is Nothing) Then
                Me.CheckDJforCLIDOperationCompleted = AddressOf Me.OnCheckDJforCLIDOperationCompleted
            End If
            Me.InvokeAsync("CheckDJforCLID", New Object() {CLID, DJ, Qty, OracleLoginData}, Me.CheckDJforCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckDJforCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckDJforCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckDJforCLIDCompleted(Me, New CheckDJforCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CreateCLIDforPo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateCLIDforPo(ByVal intUnit As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CreateCLIDforPo", New Object() {intUnit})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateCLIDforPoAsync(ByVal intUnit As Integer)
            Me.CreateCLIDforPoAsync(intUnit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateCLIDforPoAsync(ByVal intUnit As Integer, ByVal userState As Object)
            If (Me.CreateCLIDforPoOperationCompleted Is Nothing) Then
                Me.CreateCLIDforPoOperationCompleted = AddressOf Me.OnCreateCLIDforPoOperationCompleted
            End If
            Me.InvokeAsync("CreateCLIDforPo", New Object() {intUnit}, Me.CreateCLIDforPoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateCLIDforPoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCLIDforPoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCLIDforPoCompleted(Me, New CreateCLIDforPoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CountOfPoCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CountOfPoCLID(ByVal PO As String) As Double
            Dim results() As Object = Me.Invoke("CountOfPoCLID", New Object() {PO})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CountOfPoCLIDAsync(ByVal PO As String)
            Me.CountOfPoCLIDAsync(PO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CountOfPoCLIDAsync(ByVal PO As String, ByVal userState As Object)
            If (Me.CountOfPoCLIDOperationCompleted Is Nothing) Then
                Me.CountOfPoCLIDOperationCompleted = AddressOf Me.OnCountOfPoCLIDOperationCompleted
            End If
            Me.InvokeAsync("CountOfPoCLID", New Object() {PO}, Me.CountOfPoCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCountOfPoCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CountOfPoCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CountOfPoCLIDCompleted(Me, New CountOfPoCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveCreateCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveCreateCLID(ByVal ds As System.Data.DataSet, ByVal SAPLoginData As ERPLogin, ByVal productlabel As LabelData, ByVal Flag As Integer) As Object
            Dim results() As Object = Me.Invoke("SaveCreateCLID", New Object() {ds, SAPLoginData, productlabel, Flag})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveCreateCLIDAsync(ByVal ds As System.Data.DataSet, ByVal SAPLoginData As ERPLogin, ByVal productlabel As LabelData, ByVal Flag As Integer)
            Me.SaveCreateCLIDAsync(ds, SAPLoginData, productlabel, Flag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveCreateCLIDAsync(ByVal ds As System.Data.DataSet, ByVal SAPLoginData As ERPLogin, ByVal productlabel As LabelData, ByVal Flag As Integer, ByVal userState As Object)
            If (Me.SaveCreateCLIDOperationCompleted Is Nothing) Then
                Me.SaveCreateCLIDOperationCompleted = AddressOf Me.OnSaveCreateCLIDOperationCompleted
            End If
            Me.InvokeAsync("SaveCreateCLID", New Object() {ds, SAPLoginData, productlabel, Flag}, Me.SaveCreateCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveCreateCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCreateCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCreateCLIDCompleted(Me, New SaveCreateCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveCreatCLIDforPo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveCreatCLIDforPo(ByVal ds As System.Data.DataSet, ByVal SAPLoginData As ERPLogin, ByVal productlabel As LabelData, ByVal Flag As Integer) As Object
            Dim results() As Object = Me.Invoke("SaveCreatCLIDforPo", New Object() {ds, SAPLoginData, productlabel, Flag})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveCreatCLIDforPoAsync(ByVal ds As System.Data.DataSet, ByVal SAPLoginData As ERPLogin, ByVal productlabel As LabelData, ByVal Flag As Integer)
            Me.SaveCreatCLIDforPoAsync(ds, SAPLoginData, productlabel, Flag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveCreatCLIDforPoAsync(ByVal ds As System.Data.DataSet, ByVal SAPLoginData As ERPLogin, ByVal productlabel As LabelData, ByVal Flag As Integer, ByVal userState As Object)
            If (Me.SaveCreatCLIDforPoOperationCompleted Is Nothing) Then
                Me.SaveCreatCLIDforPoOperationCompleted = AddressOf Me.OnSaveCreatCLIDforPoOperationCompleted
            End If
            Me.InvokeAsync("SaveCreatCLIDforPo", New Object() {ds, SAPLoginData, productlabel, Flag}, Me.SaveCreatCLIDforPoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveCreatCLIDforPoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCreatCLIDforPoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCreatCLIDforPoCompleted(Me, New SaveCreatCLIDforPoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RePrintCreateCLIDforPOCLIDs", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RePrintCreateCLIDforPOCLIDs(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("RePrintCreateCLIDforPOCLIDs", New Object() {CLIDs, Printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RePrintCreateCLIDforPOCLIDsAsync(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String)
            Me.RePrintCreateCLIDforPOCLIDsAsync(CLIDs, Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RePrintCreateCLIDforPOCLIDsAsync(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String, ByVal userState As Object)
            If (Me.RePrintCreateCLIDforPOCLIDsOperationCompleted Is Nothing) Then
                Me.RePrintCreateCLIDforPOCLIDsOperationCompleted = AddressOf Me.OnRePrintCreateCLIDforPOCLIDsOperationCompleted
            End If
            Me.InvokeAsync("RePrintCreateCLIDforPOCLIDs", New Object() {CLIDs, Printer}, Me.RePrintCreateCLIDforPOCLIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnRePrintCreateCLIDforPOCLIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.RePrintCreateCLIDforPOCLIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RePrintCreateCLIDforPOCLIDsCompleted(Me, New RePrintCreateCLIDforPOCLIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckCHDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckCHDJ(ByVal DJ As String, ByVal CLID As String) As String
            Dim results() As Object = Me.Invoke("CheckCHDJ", New Object() {DJ, CLID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckCHDJAsync(ByVal DJ As String, ByVal CLID As String)
            Me.CheckCHDJAsync(DJ, CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckCHDJAsync(ByVal DJ As String, ByVal CLID As String, ByVal userState As Object)
            If (Me.CheckCHDJOperationCompleted Is Nothing) Then
                Me.CheckCHDJOperationCompleted = AddressOf Me.OnCheckCHDJOperationCompleted
            End If
            Me.InvokeAsync("CheckCHDJ", New Object() {DJ, CLID}, Me.CheckCHDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckCHDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckCHDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckCHDJCompleted(Me, New CheckCHDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadCLIDs", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadCLIDs(ByVal CLID As String, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadCLIDs", New Object() {CLID, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadCLIDsAsync(ByVal CLID As String, ByVal LoginData As ERPLogin)
            Me.ReadCLIDsAsync(CLID, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadCLIDsAsync(ByVal CLID As String, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.ReadCLIDsOperationCompleted Is Nothing) Then
                Me.ReadCLIDsOperationCompleted = AddressOf Me.OnReadCLIDsOperationCompleted
            End If
            Me.InvokeAsync("ReadCLIDs", New Object() {CLID, LoginData}, Me.ReadCLIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadCLIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadCLIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadCLIDsCompleted(Me, New ReadCLIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadCLIDData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadCLIDData(ByVal CLID As String, ByVal TransactionType As String, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadCLIDData", New Object() {CLID, TransactionType, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadCLIDDataAsync(ByVal CLID As String, ByVal TransactionType As String, ByVal LoginData As ERPLogin)
            Me.ReadCLIDDataAsync(CLID, TransactionType, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadCLIDDataAsync(ByVal CLID As String, ByVal TransactionType As String, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.ReadCLIDDataOperationCompleted Is Nothing) Then
                Me.ReadCLIDDataOperationCompleted = AddressOf Me.OnReadCLIDDataOperationCompleted
            End If
            Me.InvokeAsync("ReadCLIDData", New Object() {CLID, TransactionType, LoginData}, Me.ReadCLIDDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadCLIDDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadCLIDDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadCLIDDataCompleted(Me, New ReadCLIDDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMOFromDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMOFromDJ(ByVal DJ As String, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMOFromDJ", New Object() {DJ, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMOFromDJAsync(ByVal DJ As String, ByVal LoginData As ERPLogin)
            Me.GetMOFromDJAsync(DJ, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMOFromDJAsync(ByVal DJ As String, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetMOFromDJOperationCompleted Is Nothing) Then
                Me.GetMOFromDJOperationCompleted = AddressOf Me.OnGetMOFromDJOperationCompleted
            End If
            Me.InvokeAsync("GetMOFromDJ", New Object() {DJ, LoginData}, Me.GetMOFromDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMOFromDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMOFromDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMOFromDJCompleted(Me, New GetMOFromDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDJMOLines", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDJMOLines(ByVal DJ As String, ByVal MO As String, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDJMOLines", New Object() {DJ, MO, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDJMOLinesAsync(ByVal DJ As String, ByVal MO As String, ByVal LoginData As ERPLogin)
            Me.GetDJMOLinesAsync(DJ, MO, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDJMOLinesAsync(ByVal DJ As String, ByVal MO As String, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetDJMOLinesOperationCompleted Is Nothing) Then
                Me.GetDJMOLinesOperationCompleted = AddressOf Me.OnGetDJMOLinesOperationCompleted
            End If
            Me.InvokeAsync("GetDJMOLines", New Object() {DJ, MO, LoginData}, Me.GetDJMOLinesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDJMOLinesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDJMOLinesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDJMOLinesCompleted(Me, New GetDJMOLinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/MOrderPost", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MOrderPost(ByVal LoginData As ERPLogin, ByRef myMOData As MOData) As String
            Dim results() As Object = Me.Invoke("MOrderPost", New Object() {LoginData, myMOData})
            myMOData = CType(results(1),MOData)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MOrderPostAsync(ByVal LoginData As ERPLogin, ByVal myMOData As MOData)
            Me.MOrderPostAsync(LoginData, myMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MOrderPostAsync(ByVal LoginData As ERPLogin, ByVal myMOData As MOData, ByVal userState As Object)
            If (Me.MOrderPostOperationCompleted Is Nothing) Then
                Me.MOrderPostOperationCompleted = AddressOf Me.OnMOrderPostOperationCompleted
            End If
            Me.InvokeAsync("MOrderPost", New Object() {LoginData, myMOData}, Me.MOrderPostOperationCompleted, userState)
        End Sub
        
        Private Sub OnMOrderPostOperationCompleted(ByVal arg As Object)
            If (Not (Me.MOrderPostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MOrderPostCompleted(Me, New MOrderPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/MOEarlyLotPost", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MOEarlyLotPost(ByVal LoginData As ERPLogin, ByVal myMOData As MOData) As String
            Dim results() As Object = Me.Invoke("MOEarlyLotPost", New Object() {LoginData, myMOData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MOEarlyLotPostAsync(ByVal LoginData As ERPLogin, ByVal myMOData As MOData)
            Me.MOEarlyLotPostAsync(LoginData, myMOData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MOEarlyLotPostAsync(ByVal LoginData As ERPLogin, ByVal myMOData As MOData, ByVal userState As Object)
            If (Me.MOEarlyLotPostOperationCompleted Is Nothing) Then
                Me.MOEarlyLotPostOperationCompleted = AddressOf Me.OnMOEarlyLotPostOperationCompleted
            End If
            Me.InvokeAsync("MOEarlyLotPost", New Object() {LoginData, myMOData}, Me.MOEarlyLotPostOperationCompleted, userState)
        End Sub
        
        Private Sub OnMOEarlyLotPostOperationCompleted(ByVal arg As Object)
            If (Not (Me.MOEarlyLotPostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MOEarlyLotPostCompleted(Me, New MOEarlyLotPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LabelConversion", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LabelConversion(ByVal LoginData As ERPLogin, ByVal LabelPrinter As String, <System.Xml.Serialization.XmlElementAttribute("PrintLabels")> ByVal PrintLabels1 As Boolean, ByVal GRInfo As LabelData) As ConversionResult
            Dim results() As Object = Me.Invoke("LabelConversion", New Object() {LoginData, LabelPrinter, PrintLabels1, GRInfo})
            Return CType(results(0),ConversionResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LabelConversionAsync(ByVal LoginData As ERPLogin, ByVal LabelPrinter As String, ByVal PrintLabels1 As Boolean, ByVal GRInfo As LabelData)
            Me.LabelConversionAsync(LoginData, LabelPrinter, PrintLabels1, GRInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LabelConversionAsync(ByVal LoginData As ERPLogin, ByVal LabelPrinter As String, ByVal PrintLabels1 As Boolean, ByVal GRInfo As LabelData, ByVal userState As Object)
            If (Me.LabelConversionOperationCompleted Is Nothing) Then
                Me.LabelConversionOperationCompleted = AddressOf Me.OnLabelConversionOperationCompleted
            End If
            Me.InvokeAsync("LabelConversion", New Object() {LoginData, LabelPrinter, PrintLabels1, GRInfo}, Me.LabelConversionOperationCompleted, userState)
        End Sub
        
        Private Sub OnLabelConversionOperationCompleted(ByVal arg As Object)
            If (Not (Me.LabelConversionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LabelConversionCompleted(Me, New LabelConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetItemMaster", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemMaster(ByVal LoginData As ERPLogin, ByVal PartNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemMaster", New Object() {LoginData, PartNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemMasterAsync(ByVal LoginData As ERPLogin, ByVal PartNo As String)
            Me.GetItemMasterAsync(LoginData, PartNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemMasterAsync(ByVal LoginData As ERPLogin, ByVal PartNo As String, ByVal userState As Object)
            If (Me.GetItemMasterOperationCompleted Is Nothing) Then
                Me.GetItemMasterOperationCompleted = AddressOf Me.OnGetItemMasterOperationCompleted
            End If
            Me.InvokeAsync("GetItemMaster", New Object() {LoginData, PartNo}, Me.GetItemMasterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemMasterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemMasterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemMasterCompleted(Me, New GetItemMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetItemDescription", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemDescription(ByVal LoginData As ERPLogin, ByVal PartNo As String) As ItemData
            Dim results() As Object = Me.Invoke("GetItemDescription", New Object() {LoginData, PartNo})
            Return CType(results(0),ItemData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemDescriptionAsync(ByVal LoginData As ERPLogin, ByVal PartNo As String)
            Me.GetItemDescriptionAsync(LoginData, PartNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemDescriptionAsync(ByVal LoginData As ERPLogin, ByVal PartNo As String, ByVal userState As Object)
            If (Me.GetItemDescriptionOperationCompleted Is Nothing) Then
                Me.GetItemDescriptionOperationCompleted = AddressOf Me.OnGetItemDescriptionOperationCompleted
            End If
            Me.InvokeAsync("GetItemDescription", New Object() {LoginData, PartNo}, Me.GetItemDescriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemDescriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemDescriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemDescriptionCompleted(Me, New GetItemDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PartNoTransfer", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PartNoTransfer(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PartNoTransfer", New Object() {LoginData, Items})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PartNoTransferAsync(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet)
            Me.PartNoTransferAsync(LoginData, Items, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PartNoTransferAsync(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet, ByVal userState As Object)
            If (Me.PartNoTransferOperationCompleted Is Nothing) Then
                Me.PartNoTransferOperationCompleted = AddressOf Me.OnPartNoTransferOperationCompleted
            End If
            Me.InvokeAsync("PartNoTransfer", New Object() {LoginData, Items}, Me.PartNoTransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnPartNoTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.PartNoTransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PartNoTransferCompleted(Me, New PartNoTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/InterOrgTransfer", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterOrgTransfer(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("InterOrgTransfer", New Object() {LoginData, Items})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterOrgTransferAsync(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet)
            Me.InterOrgTransferAsync(LoginData, Items, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterOrgTransferAsync(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet, ByVal userState As Object)
            If (Me.InterOrgTransferOperationCompleted Is Nothing) Then
                Me.InterOrgTransferOperationCompleted = AddressOf Me.OnInterOrgTransferOperationCompleted
            End If
            Me.InvokeAsync("InterOrgTransfer", New Object() {LoginData, Items}, Me.InterOrgTransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterOrgTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterOrgTransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterOrgTransferCompleted(Me, New InterOrgTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetRTVLabels", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRTVLabels(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal CVMIFlag As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRTVLabels", New Object() {LoginData, CLID, CVMIFlag})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRTVLabelsAsync(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal CVMIFlag As String)
            Me.GetRTVLabelsAsync(LoginData, CLID, CVMIFlag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRTVLabelsAsync(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal CVMIFlag As String, ByVal userState As Object)
            If (Me.GetRTVLabelsOperationCompleted Is Nothing) Then
                Me.GetRTVLabelsOperationCompleted = AddressOf Me.OnGetRTVLabelsOperationCompleted
            End If
            Me.InvokeAsync("GetRTVLabels", New Object() {LoginData, CLID, CVMIFlag}, Me.GetRTVLabelsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRTVLabelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRTVLabelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRTVLabelsCompleted(Me, New GetRTVLabelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/MiscRTV", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MiscRTV(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("MiscRTV", New Object() {LoginData, Items})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MiscRTVAsync(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet)
            Me.MiscRTVAsync(LoginData, Items, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MiscRTVAsync(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet, ByVal userState As Object)
            If (Me.MiscRTVOperationCompleted Is Nothing) Then
                Me.MiscRTVOperationCompleted = AddressOf Me.OnMiscRTVOperationCompleted
            End If
            Me.InvokeAsync("MiscRTV", New Object() {LoginData, Items}, Me.MiscRTVOperationCompleted, userState)
        End Sub
        
        Private Sub OnMiscRTVOperationCompleted(ByVal arg As Object)
            If (Not (Me.MiscRTVCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MiscRTVCompleted(Me, New MiscRTVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CVMIRTV", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CVMIRTV(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("CVMIRTV", New Object() {LoginData, Items})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CVMIRTVAsync(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet)
            Me.CVMIRTVAsync(LoginData, Items, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CVMIRTVAsync(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet, ByVal userState As Object)
            If (Me.CVMIRTVOperationCompleted Is Nothing) Then
                Me.CVMIRTVOperationCompleted = AddressOf Me.OnCVMIRTVOperationCompleted
            End If
            Me.InvokeAsync("CVMIRTV", New Object() {LoginData, Items}, Me.CVMIRTVOperationCompleted, userState)
        End Sub
        
        Private Sub OnCVMIRTVOperationCompleted(ByVal arg As Object)
            If (Not (Me.CVMIRTVCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CVMIRTVCompleted(Me, New CVMIRTVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetItemRTLot", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemRTLot(ByVal LoginData As ERPLogin, ByVal PartNo As String, ByVal RTLot As String) As String
            Dim results() As Object = Me.Invoke("GetItemRTLot", New Object() {LoginData, PartNo, RTLot})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemRTLotAsync(ByVal LoginData As ERPLogin, ByVal PartNo As String, ByVal RTLot As String)
            Me.GetItemRTLotAsync(LoginData, PartNo, RTLot, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemRTLotAsync(ByVal LoginData As ERPLogin, ByVal PartNo As String, ByVal RTLot As String, ByVal userState As Object)
            If (Me.GetItemRTLotOperationCompleted Is Nothing) Then
                Me.GetItemRTLotOperationCompleted = AddressOf Me.OnGetItemRTLotOperationCompleted
            End If
            Me.InvokeAsync("GetItemRTLot", New Object() {LoginData, PartNo, RTLot}, Me.GetItemRTLotOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemRTLotOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemRTLotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemRTLotCompleted(Me, New GetItemRTLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetItemOnhand", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemOnhand(ByVal LoginData As ERPLogin, ByVal ItemNo As String, ByVal Subinv As String, ByVal LocName As String, ByVal Revision As String, ByVal LotNum As String, ByVal Qty As String) As String()
            Dim results() As Object = Me.Invoke("GetItemOnhand", New Object() {LoginData, ItemNo, Subinv, LocName, Revision, LotNum, Qty})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemOnhandAsync(ByVal LoginData As ERPLogin, ByVal ItemNo As String, ByVal Subinv As String, ByVal LocName As String, ByVal Revision As String, ByVal LotNum As String, ByVal Qty As String)
            Me.GetItemOnhandAsync(LoginData, ItemNo, Subinv, LocName, Revision, LotNum, Qty, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemOnhandAsync(ByVal LoginData As ERPLogin, ByVal ItemNo As String, ByVal Subinv As String, ByVal LocName As String, ByVal Revision As String, ByVal LotNum As String, ByVal Qty As String, ByVal userState As Object)
            If (Me.GetItemOnhandOperationCompleted Is Nothing) Then
                Me.GetItemOnhandOperationCompleted = AddressOf Me.OnGetItemOnhandOperationCompleted
            End If
            Me.InvokeAsync("GetItemOnhand", New Object() {LoginData, ItemNo, Subinv, LocName, Revision, LotNum, Qty}, Me.GetItemOnhandOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemOnhandOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemOnhandCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemOnhandCompleted(Me, New GetItemOnhandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadLabelIDInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadLabelIDInfo(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal StatusCheck As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadLabelIDInfo", New Object() {LoginData, CLID, StatusCheck})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadLabelIDInfoAsync(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal StatusCheck As Boolean)
            Me.ReadLabelIDInfoAsync(LoginData, CLID, StatusCheck, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadLabelIDInfoAsync(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal StatusCheck As Boolean, ByVal userState As Object)
            If (Me.ReadLabelIDInfoOperationCompleted Is Nothing) Then
                Me.ReadLabelIDInfoOperationCompleted = AddressOf Me.OnReadLabelIDInfoOperationCompleted
            End If
            Me.InvokeAsync("ReadLabelIDInfo", New Object() {LoginData, CLID, StatusCheck}, Me.ReadLabelIDInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadLabelIDInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadLabelIDInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadLabelIDInfoCompleted(Me, New ReadLabelIDInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LabelGeneration", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LabelGeneration(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal QtyUnits As String, ByVal Type As String) As String()
            Dim results() As Object = Me.Invoke("LabelGeneration", New Object() {LoginData, CLID, QtyUnits, Type})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LabelGenerationAsync(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal QtyUnits As String, ByVal Type As String)
            Me.LabelGenerationAsync(LoginData, CLID, QtyUnits, Type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LabelGenerationAsync(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal QtyUnits As String, ByVal Type As String, ByVal userState As Object)
            If (Me.LabelGenerationOperationCompleted Is Nothing) Then
                Me.LabelGenerationOperationCompleted = AddressOf Me.OnLabelGenerationOperationCompleted
            End If
            Me.InvokeAsync("LabelGeneration", New Object() {LoginData, CLID, QtyUnits, Type}, Me.LabelGenerationOperationCompleted, userState)
        End Sub
        
        Private Sub OnLabelGenerationOperationCompleted(ByVal arg As Object)
            If (Not (Me.LabelGenerationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LabelGenerationCompleted(Me, New LabelGenerationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetTypeID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTypeID(ByVal CLID As String) As String
            Dim results() As Object = Me.Invoke("GetTypeID", New Object() {CLID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTypeIDAsync(ByVal CLID As String)
            Me.GetTypeIDAsync(CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTypeIDAsync(ByVal CLID As String, ByVal userState As Object)
            If (Me.GetTypeIDOperationCompleted Is Nothing) Then
                Me.GetTypeIDOperationCompleted = AddressOf Me.OnGetTypeIDOperationCompleted
            End If
            Me.InvokeAsync("GetTypeID", New Object() {CLID}, Me.GetTypeIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTypeIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTypeIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTypeIDCompleted(Me, New GetTypeIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadLabelIDsForDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadLabelIDsForDJ(ByVal LoginData As ERPLogin, ByVal CLID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadLabelIDsForDJ", New Object() {LoginData, CLID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadLabelIDsForDJAsync(ByVal LoginData As ERPLogin, ByVal CLID As String)
            Me.ReadLabelIDsForDJAsync(LoginData, CLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadLabelIDsForDJAsync(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal userState As Object)
            If (Me.ReadLabelIDsForDJOperationCompleted Is Nothing) Then
                Me.ReadLabelIDsForDJOperationCompleted = AddressOf Me.OnReadLabelIDsForDJOperationCompleted
            End If
            Me.InvokeAsync("ReadLabelIDsForDJ", New Object() {LoginData, CLID}, Me.ReadLabelIDsForDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadLabelIDsForDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadLabelIDsForDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadLabelIDsForDJCompleted(Me, New ReadLabelIDsForDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_LabelInfoHasSameLot", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_LabelInfoHasSameLot(ByVal CLID As String, ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_LabelInfoHasSameLot", New Object() {CLID, LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_LabelInfoHasSameLotAsync(ByVal CLID As String, ByVal LoginData As ERPLogin)
            Me.Get_LabelInfoHasSameLotAsync(CLID, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_LabelInfoHasSameLotAsync(ByVal CLID As String, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_LabelInfoHasSameLotOperationCompleted Is Nothing) Then
                Me.Get_LabelInfoHasSameLotOperationCompleted = AddressOf Me.OnGet_LabelInfoHasSameLotOperationCompleted
            End If
            Me.InvokeAsync("Get_LabelInfoHasSameLot", New Object() {CLID, LoginData}, Me.Get_LabelInfoHasSameLotOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_LabelInfoHasSameLotOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_LabelInfoHasSameLotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_LabelInfoHasSameLotCompleted(Me, New Get_LabelInfoHasSameLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Update_LabelInfoHasSameLot", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Update_LabelInfoHasSameLot(ByVal LoginData As ERPLogin, ByVal ItemNO As String, ByVal LotNum As String, ByVal ExpDate As Date) As String
            Dim results() As Object = Me.Invoke("Update_LabelInfoHasSameLot", New Object() {LoginData, ItemNO, LotNum, ExpDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Update_LabelInfoHasSameLotAsync(ByVal LoginData As ERPLogin, ByVal ItemNO As String, ByVal LotNum As String, ByVal ExpDate As Date)
            Me.Update_LabelInfoHasSameLotAsync(LoginData, ItemNO, LotNum, ExpDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Update_LabelInfoHasSameLotAsync(ByVal LoginData As ERPLogin, ByVal ItemNO As String, ByVal LotNum As String, ByVal ExpDate As Date, ByVal userState As Object)
            If (Me.Update_LabelInfoHasSameLotOperationCompleted Is Nothing) Then
                Me.Update_LabelInfoHasSameLotOperationCompleted = AddressOf Me.OnUpdate_LabelInfoHasSameLotOperationCompleted
            End If
            Me.InvokeAsync("Update_LabelInfoHasSameLot", New Object() {LoginData, ItemNO, LotNum, ExpDate}, Me.Update_LabelInfoHasSameLotOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdate_LabelInfoHasSameLotOperationCompleted(ByVal arg As Object)
            If (Not (Me.Update_LabelInfoHasSameLotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Update_LabelInfoHasSameLotCompleted(Me, New Update_LabelInfoHasSameLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPalletList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPalletList(ByVal PalletID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPalletList", New Object() {PalletID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPalletListAsync(ByVal PalletID As String)
            Me.GetPalletListAsync(PalletID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPalletListAsync(ByVal PalletID As String, ByVal userState As Object)
            If (Me.GetPalletListOperationCompleted Is Nothing) Then
                Me.GetPalletListOperationCompleted = AddressOf Me.OnGetPalletListOperationCompleted
            End If
            Me.InvokeAsync("GetPalletList", New Object() {PalletID}, Me.GetPalletListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPalletListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPalletListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPalletListCompleted(Me, New GetPalletListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetStatusList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStatusList(ByVal TypeCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStatusList", New Object() {TypeCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStatusListAsync(ByVal TypeCode As String)
            Me.GetStatusListAsync(TypeCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStatusListAsync(ByVal TypeCode As String, ByVal userState As Object)
            If (Me.GetStatusListOperationCompleted Is Nothing) Then
                Me.GetStatusListOperationCompleted = AddressOf Me.OnGetStatusListOperationCompleted
            End If
            Me.InvokeAsync("GetStatusList", New Object() {TypeCode}, Me.GetStatusListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStatusListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStatusListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStatusListCompleted(Me, New GetStatusListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdatePalletList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePalletList(ByVal ERPLogin As ERPLogin, ByVal myDashBoard As DashBoardData) As String
            Dim results() As Object = Me.Invoke("UpdatePalletList", New Object() {ERPLogin, myDashBoard})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePalletListAsync(ByVal ERPLogin As ERPLogin, ByVal myDashBoard As DashBoardData)
            Me.UpdatePalletListAsync(ERPLogin, myDashBoard, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePalletListAsync(ByVal ERPLogin As ERPLogin, ByVal myDashBoard As DashBoardData, ByVal userState As Object)
            If (Me.UpdatePalletListOperationCompleted Is Nothing) Then
                Me.UpdatePalletListOperationCompleted = AddressOf Me.OnUpdatePalletListOperationCompleted
            End If
            Me.InvokeAsync("UpdatePalletList", New Object() {ERPLogin, myDashBoard}, Me.UpdatePalletListOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePalletListOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePalletListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePalletListCompleted(Me, New UpdatePalletListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMaterialInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaterialInfo(ByVal RTNo As String, ByVal Material As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMaterialInfo", New Object() {RTNo, Material})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaterialInfoAsync(ByVal RTNo As String, ByVal Material As String)
            Me.GetMaterialInfoAsync(RTNo, Material, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaterialInfoAsync(ByVal RTNo As String, ByVal Material As String, ByVal userState As Object)
            If (Me.GetMaterialInfoOperationCompleted Is Nothing) Then
                Me.GetMaterialInfoOperationCompleted = AddressOf Me.OnGetMaterialInfoOperationCompleted
            End If
            Me.InvokeAsync("GetMaterialInfo", New Object() {RTNo, Material}, Me.GetMaterialInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaterialInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaterialInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaterialInfoCompleted(Me, New GetMaterialInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateMaterial", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMaterial(ByVal ERPLogin As ERPLogin, ByVal myDashBoard As DashBoardData) As String
            Dim results() As Object = Me.Invoke("UpdateMaterial", New Object() {ERPLogin, myDashBoard})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMaterialAsync(ByVal ERPLogin As ERPLogin, ByVal myDashBoard As DashBoardData)
            Me.UpdateMaterialAsync(ERPLogin, myDashBoard, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMaterialAsync(ByVal ERPLogin As ERPLogin, ByVal myDashBoard As DashBoardData, ByVal userState As Object)
            If (Me.UpdateMaterialOperationCompleted Is Nothing) Then
                Me.UpdateMaterialOperationCompleted = AddressOf Me.OnUpdateMaterialOperationCompleted
            End If
            Me.InvokeAsync("UpdateMaterial", New Object() {ERPLogin, myDashBoard}, Me.UpdateMaterialOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMaterialOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMaterialCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMaterialCompleted(Me, New UpdateMaterialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckItemMPN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckItemMPN(ByVal Item As String, ByVal ManufacturerPN As String) As String
            Dim results() As Object = Me.Invoke("CheckItemMPN", New Object() {Item, ManufacturerPN})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckItemMPNAsync(ByVal Item As String, ByVal ManufacturerPN As String)
            Me.CheckItemMPNAsync(Item, ManufacturerPN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckItemMPNAsync(ByVal Item As String, ByVal ManufacturerPN As String, ByVal userState As Object)
            If (Me.CheckItemMPNOperationCompleted Is Nothing) Then
                Me.CheckItemMPNOperationCompleted = AddressOf Me.OnCheckItemMPNOperationCompleted
            End If
            Me.InvokeAsync("CheckItemMPN", New Object() {Item, ManufacturerPN}, Me.CheckItemMPNOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckItemMPNOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckItemMPNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckItemMPNCompleted(Me, New CheckItemMPNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DownloadSuppData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadSuppData(ByVal ItemNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DownloadSuppData", New Object() {ItemNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadSuppDataAsync(ByVal ItemNo As String)
            Me.DownloadSuppDataAsync(ItemNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadSuppDataAsync(ByVal ItemNo As String, ByVal userState As Object)
            If (Me.DownloadSuppDataOperationCompleted Is Nothing) Then
                Me.DownloadSuppDataOperationCompleted = AddressOf Me.OnDownloadSuppDataOperationCompleted
            End If
            Me.InvokeAsync("DownloadSuppData", New Object() {ItemNo}, Me.DownloadSuppDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadSuppDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadSuppDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadSuppDataCompleted(Me, New DownloadSuppDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveSuppData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveSuppData(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet) As CreateGRResponse
            Dim results() As Object = Me.Invoke("SaveSuppData", New Object() {LoginData, Items})
            Return CType(results(0),CreateGRResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveSuppDataAsync(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet)
            Me.SaveSuppDataAsync(LoginData, Items, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveSuppDataAsync(ByVal LoginData As ERPLogin, ByVal Items As System.Data.DataSet, ByVal userState As Object)
            If (Me.SaveSuppDataOperationCompleted Is Nothing) Then
                Me.SaveSuppDataOperationCompleted = AddressOf Me.OnSaveSuppDataOperationCompleted
            End If
            Me.InvokeAsync("SaveSuppData", New Object() {LoginData, Items}, Me.SaveSuppDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveSuppDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveSuppDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveSuppDataCompleted(Me, New SaveSuppDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetPOLineMPQ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPOLineMPQ(ByVal p_ds As System.Data.DataTable) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPOLineMPQ", New Object() {p_ds})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPOLineMPQAsync(ByVal p_ds As System.Data.DataTable)
            Me.GetPOLineMPQAsync(p_ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPOLineMPQAsync(ByVal p_ds As System.Data.DataTable, ByVal userState As Object)
            If (Me.GetPOLineMPQOperationCompleted Is Nothing) Then
                Me.GetPOLineMPQOperationCompleted = AddressOf Me.OnGetPOLineMPQOperationCompleted
            End If
            Me.InvokeAsync("GetPOLineMPQ", New Object() {p_ds}, Me.GetPOLineMPQOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPOLineMPQOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPOLineMPQCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPOLineMPQCompleted(Me, New GetPOLineMPQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetItemMPQ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemMPQ(ByVal p_org_id As Integer, ByVal p_po_line_id As Integer) As Double
            Dim results() As Object = Me.Invoke("GetItemMPQ", New Object() {p_org_id, p_po_line_id})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemMPQAsync(ByVal p_org_id As Integer, ByVal p_po_line_id As Integer)
            Me.GetItemMPQAsync(p_org_id, p_po_line_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemMPQAsync(ByVal p_org_id As Integer, ByVal p_po_line_id As Integer, ByVal userState As Object)
            If (Me.GetItemMPQOperationCompleted Is Nothing) Then
                Me.GetItemMPQOperationCompleted = AddressOf Me.OnGetItemMPQOperationCompleted
            End If
            Me.InvokeAsync("GetItemMPQ", New Object() {p_org_id, p_po_line_id}, Me.GetItemMPQOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemMPQOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemMPQCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemMPQCompleted(Me, New GetItemMPQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetRecData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRecData(ByVal eTraceModule As String, ByVal TransactionID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRecData", New Object() {eTraceModule, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRecDataAsync(ByVal eTraceModule As String, ByVal TransactionID As String)
            Me.GetRecDataAsync(eTraceModule, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRecDataAsync(ByVal eTraceModule As String, ByVal TransactionID As String, ByVal userState As Object)
            If (Me.GetRecDataOperationCompleted Is Nothing) Then
                Me.GetRecDataOperationCompleted = AddressOf Me.OnGetRecDataOperationCompleted
            End If
            Me.InvokeAsync("GetRecData", New Object() {eTraceModule, TransactionID}, Me.GetRecDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRecDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRecDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRecDataCompleted(Me, New GetRecDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetItems", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItems(ByVal LoginData As ERPLogin, ByRef GRHeader As GRHeaderStructure) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItems", New Object() {LoginData, GRHeader})
            GRHeader = CType(results(1),GRHeaderStructure)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemsAsync(ByVal LoginData As ERPLogin, ByVal GRHeader As GRHeaderStructure)
            Me.GetItemsAsync(LoginData, GRHeader, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemsAsync(ByVal LoginData As ERPLogin, ByVal GRHeader As GRHeaderStructure, ByVal userState As Object)
            If (Me.GetItemsOperationCompleted Is Nothing) Then
                Me.GetItemsOperationCompleted = AddressOf Me.OnGetItemsOperationCompleted
            End If
            Me.InvokeAsync("GetItems", New Object() {LoginData, GRHeader}, Me.GetItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemsCompleted(Me, New GetItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ProcessMatMovement", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessMatMovement(ByVal LoginData As ERPLogin, ByVal Header As GRHeaderStructure, ByVal Items As System.Data.DataSet, <System.Xml.Serialization.XmlElementAttribute("PrintLabels")> ByVal PrintLabels1 As Boolean, ByVal LabelPrinter As String) As CreateGRResponse
            Dim results() As Object = Me.Invoke("ProcessMatMovement", New Object() {LoginData, Header, Items, PrintLabels1, LabelPrinter})
            Return CType(results(0),CreateGRResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessMatMovementAsync(ByVal LoginData As ERPLogin, ByVal Header As GRHeaderStructure, ByVal Items As System.Data.DataSet, ByVal PrintLabels1 As Boolean, ByVal LabelPrinter As String)
            Me.ProcessMatMovementAsync(LoginData, Header, Items, PrintLabels1, LabelPrinter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessMatMovementAsync(ByVal LoginData As ERPLogin, ByVal Header As GRHeaderStructure, ByVal Items As System.Data.DataSet, ByVal PrintLabels1 As Boolean, ByVal LabelPrinter As String, ByVal userState As Object)
            If (Me.ProcessMatMovementOperationCompleted Is Nothing) Then
                Me.ProcessMatMovementOperationCompleted = AddressOf Me.OnProcessMatMovementOperationCompleted
            End If
            Me.InvokeAsync("ProcessMatMovement", New Object() {LoginData, Header, Items, PrintLabels1, LabelPrinter}, Me.ProcessMatMovementOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessMatMovementOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessMatMovementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessMatMovementCompleted(Me, New ProcessMatMovementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveDCodeLotNo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveDCodeLotNo(ByVal LoginData As ERPLogin, ByVal CLIDs As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SaveDCodeLotNo", New Object() {LoginData, CLIDs})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveDCodeLotNoAsync(ByVal LoginData As ERPLogin, ByVal CLIDs As System.Data.DataSet)
            Me.SaveDCodeLotNoAsync(LoginData, CLIDs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveDCodeLotNoAsync(ByVal LoginData As ERPLogin, ByVal CLIDs As System.Data.DataSet, ByVal userState As Object)
            If (Me.SaveDCodeLotNoOperationCompleted Is Nothing) Then
                Me.SaveDCodeLotNoOperationCompleted = AddressOf Me.OnSaveDCodeLotNoOperationCompleted
            End If
            Me.InvokeAsync("SaveDCodeLotNo", New Object() {LoginData, CLIDs}, Me.SaveDCodeLotNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveDCodeLotNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveDCodeLotNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveDCodeLotNoCompleted(Me, New SaveDCodeLotNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintRTSlip", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintRTSlip(ByVal LoginData As ERPLogin, ByVal RTItems As System.Data.DataSet, ByVal LabelPrinter As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintRTSlip", New Object() {LoginData, RTItems, LabelPrinter})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintRTSlipAsync(ByVal LoginData As ERPLogin, ByVal RTItems As System.Data.DataSet, ByVal LabelPrinter As String)
            Me.PrintRTSlipAsync(LoginData, RTItems, LabelPrinter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintRTSlipAsync(ByVal LoginData As ERPLogin, ByVal RTItems As System.Data.DataSet, ByVal LabelPrinter As String, ByVal userState As Object)
            If (Me.PrintRTSlipOperationCompleted Is Nothing) Then
                Me.PrintRTSlipOperationCompleted = AddressOf Me.OnPrintRTSlipOperationCompleted
            End If
            Me.InvokeAsync("PrintRTSlip", New Object() {LoginData, RTItems, LabelPrinter}, Me.PrintRTSlipOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintRTSlipOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintRTSlipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintRTSlipCompleted(Me, New PrintRTSlipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintRECLabels", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintRECLabels(ByVal CLIDs As System.Data.DataSet, ByVal LabelPrinter As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintRECLabels", New Object() {CLIDs, LabelPrinter})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintRECLabelsAsync(ByVal CLIDs As System.Data.DataSet, ByVal LabelPrinter As String)
            Me.PrintRECLabelsAsync(CLIDs, LabelPrinter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintRECLabelsAsync(ByVal CLIDs As System.Data.DataSet, ByVal LabelPrinter As String, ByVal userState As Object)
            If (Me.PrintRECLabelsOperationCompleted Is Nothing) Then
                Me.PrintRECLabelsOperationCompleted = AddressOf Me.OnPrintRECLabelsOperationCompleted
            End If
            Me.InvokeAsync("PrintRECLabels", New Object() {CLIDs, LabelPrinter}, Me.PrintRECLabelsOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintRECLabelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintRECLabelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintRECLabelsCompleted(Me, New PrintRECLabelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadShipmentData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadShipmentData(ByVal LoginData As ERPLogin, ByVal OrderNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadShipmentData", New Object() {LoginData, OrderNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadShipmentDataAsync(ByVal LoginData As ERPLogin, ByVal OrderNo As String)
            Me.ReadShipmentDataAsync(LoginData, OrderNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadShipmentDataAsync(ByVal LoginData As ERPLogin, ByVal OrderNo As String, ByVal userState As Object)
            If (Me.ReadShipmentDataOperationCompleted Is Nothing) Then
                Me.ReadShipmentDataOperationCompleted = AddressOf Me.OnReadShipmentDataOperationCompleted
            End If
            Me.InvokeAsync("ReadShipmentData", New Object() {LoginData, OrderNo}, Me.ReadShipmentDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadShipmentDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadShipmentDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadShipmentDataCompleted(Me, New ReadShipmentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadIRData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadIRData(ByVal myIRData As IRData) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadIRData", New Object() {myIRData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadIRDataAsync(ByVal myIRData As IRData)
            Me.ReadIRDataAsync(myIRData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadIRDataAsync(ByVal myIRData As IRData, ByVal userState As Object)
            If (Me.ReadIRDataOperationCompleted Is Nothing) Then
                Me.ReadIRDataOperationCompleted = AddressOf Me.OnReadIRDataOperationCompleted
            End If
            Me.InvokeAsync("ReadIRData", New Object() {myIRData}, Me.ReadIRDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadIRDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadIRDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadIRDataCompleted(Me, New ReadIRDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateIRRTNo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateIRRTNo(ByVal myIRData As IRData, ByVal Items As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("UpdateIRRTNo", New Object() {myIRData, Items})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateIRRTNoAsync(ByVal myIRData As IRData, ByVal Items As System.Data.DataSet)
            Me.UpdateIRRTNoAsync(myIRData, Items, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateIRRTNoAsync(ByVal myIRData As IRData, ByVal Items As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateIRRTNoOperationCompleted Is Nothing) Then
                Me.UpdateIRRTNoOperationCompleted = AddressOf Me.OnUpdateIRRTNoOperationCompleted
            End If
            Me.InvokeAsync("UpdateIRRTNo", New Object() {myIRData, Items}, Me.UpdateIRRTNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateIRRTNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateIRRTNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateIRRTNoCompleted(Me, New UpdateIRRTNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CleanBoxID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CleanBoxID(ByVal LoginData As ERPLogin, ByVal CLIDs As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("CleanBoxID", New Object() {LoginData, CLIDs})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CleanBoxIDAsync(ByVal LoginData As ERPLogin, ByVal CLIDs As System.Data.DataSet)
            Me.CleanBoxIDAsync(LoginData, CLIDs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CleanBoxIDAsync(ByVal LoginData As ERPLogin, ByVal CLIDs As System.Data.DataSet, ByVal userState As Object)
            If (Me.CleanBoxIDOperationCompleted Is Nothing) Then
                Me.CleanBoxIDOperationCompleted = AddressOf Me.OnCleanBoxIDOperationCompleted
            End If
            Me.InvokeAsync("CleanBoxID", New Object() {LoginData, CLIDs}, Me.CleanBoxIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCleanBoxIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CleanBoxIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CleanBoxIDCompleted(Me, New CleanBoxIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetValidSource", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetValidSource(ByVal OracleLoginData As ERPLogin, ByVal CLID As String, ByVal SubInv As String, ByVal Locator As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetValidSource", New Object() {OracleLoginData, CLID, SubInv, Locator})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetValidSourceAsync(ByVal OracleLoginData As ERPLogin, ByVal CLID As String, ByVal SubInv As String, ByVal Locator As String)
            Me.GetValidSourceAsync(OracleLoginData, CLID, SubInv, Locator, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetValidSourceAsync(ByVal OracleLoginData As ERPLogin, ByVal CLID As String, ByVal SubInv As String, ByVal Locator As String, ByVal userState As Object)
            If (Me.GetValidSourceOperationCompleted Is Nothing) Then
                Me.GetValidSourceOperationCompleted = AddressOf Me.OnGetValidSourceOperationCompleted
            End If
            Me.InvokeAsync("GetValidSource", New Object() {OracleLoginData, CLID, SubInv, Locator}, Me.GetValidSourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetValidSourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetValidSourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetValidSourceCompleted(Me, New GetValidSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PutawayPost", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PutawayPost(ByVal OracleLoginData As ERPLogin, ByVal Items As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PutawayPost", New Object() {OracleLoginData, Items})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PutawayPostAsync(ByVal OracleLoginData As ERPLogin, ByVal Items As System.Data.DataSet)
            Me.PutawayPostAsync(OracleLoginData, Items, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PutawayPostAsync(ByVal OracleLoginData As ERPLogin, ByVal Items As System.Data.DataSet, ByVal userState As Object)
            If (Me.PutawayPostOperationCompleted Is Nothing) Then
                Me.PutawayPostOperationCompleted = AddressOf Me.OnPutawayPostOperationCompleted
            End If
            Me.InvokeAsync("PutawayPost", New Object() {OracleLoginData, Items}, Me.PutawayPostOperationCompleted, userState)
        End Sub
        
        Private Sub OnPutawayPostOperationCompleted(ByVal arg As Object)
            If (Not (Me.PutawayPostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PutawayPostCompleted(Me, New PutawayPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMRBSubInv", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMRBSubInv(ByVal LoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMRBSubInv", New Object() {LoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMRBSubInvAsync(ByVal LoginData As ERPLogin)
            Me.GetMRBSubInvAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMRBSubInvAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetMRBSubInvOperationCompleted Is Nothing) Then
                Me.GetMRBSubInvOperationCompleted = AddressOf Me.OnGetMRBSubInvOperationCompleted
            End If
            Me.InvokeAsync("GetMRBSubInv", New Object() {LoginData}, Me.GetMRBSubInvOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMRBSubInvOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMRBSubInvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMRBSubInvCompleted(Me, New GetMRBSubInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadBlockDCLN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadBlockDCLN(ByVal ds As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadBlockDCLN", New Object() {ds})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadBlockDCLNAsync(ByVal ds As System.Data.DataSet)
            Me.ReadBlockDCLNAsync(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadBlockDCLNAsync(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.ReadBlockDCLNOperationCompleted Is Nothing) Then
                Me.ReadBlockDCLNOperationCompleted = AddressOf Me.OnReadBlockDCLNOperationCompleted
            End If
            Me.InvokeAsync("ReadBlockDCLN", New Object() {ds}, Me.ReadBlockDCLNOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadBlockDCLNOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadBlockDCLNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadBlockDCLNCompleted(Me, New ReadBlockDCLNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SaveBlockDCLN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveBlockDCLN(ByVal LoginData As ERPLogin, ByVal ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("SaveBlockDCLN", New Object() {LoginData, ds})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveBlockDCLNAsync(ByVal LoginData As ERPLogin, ByVal ds As System.Data.DataSet)
            Me.SaveBlockDCLNAsync(LoginData, ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveBlockDCLNAsync(ByVal LoginData As ERPLogin, ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.SaveBlockDCLNOperationCompleted Is Nothing) Then
                Me.SaveBlockDCLNOperationCompleted = AddressOf Me.OnSaveBlockDCLNOperationCompleted
            End If
            Me.InvokeAsync("SaveBlockDCLN", New Object() {LoginData, ds}, Me.SaveBlockDCLNOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveBlockDCLNOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveBlockDCLNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveBlockDCLNCompleted(Me, New SaveBlockDCLNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SourceForCompToDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SourceForCompToDJ(ByVal CLID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SourceForCompToDJ", New Object() {CLID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SourceForCompToDJAsync(ByVal CLID As String, ByVal OracleLoginData As ERPLogin)
            Me.SourceForCompToDJAsync(CLID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SourceForCompToDJAsync(ByVal CLID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.SourceForCompToDJOperationCompleted Is Nothing) Then
                Me.SourceForCompToDJOperationCompleted = AddressOf Me.OnSourceForCompToDJOperationCompleted
            End If
            Me.InvokeAsync("SourceForCompToDJ", New Object() {CLID, OracleLoginData}, Me.SourceForCompToDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnSourceForCompToDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.SourceForCompToDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SourceForCompToDJCompleted(Me, New SourceForCompToDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WS_CompToDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WS_CompToDJ(ByVal MatlList As System.Data.DataSet, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WS_CompToDJ", New Object() {MatlList, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WS_CompToDJAsync(ByVal MatlList As System.Data.DataSet, ByVal OracleLoginData As ERPLogin)
            Me.WS_CompToDJAsync(MatlList, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WS_CompToDJAsync(ByVal MatlList As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.WS_CompToDJOperationCompleted Is Nothing) Then
                Me.WS_CompToDJOperationCompleted = AddressOf Me.OnWS_CompToDJOperationCompleted
            End If
            Me.InvokeAsync("WS_CompToDJ", New Object() {MatlList, OracleLoginData}, Me.WS_CompToDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnWS_CompToDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.WS_CompToDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WS_CompToDJCompleted(Me, New WS_CompToDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckUTurnSubinv", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckUTurnSubinv(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckUTurnSubinv", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckUTurnSubinvAsync(ByVal OracleLoginData As ERPLogin)
            Me.CheckUTurnSubinvAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckUTurnSubinvAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckUTurnSubinvOperationCompleted Is Nothing) Then
                Me.CheckUTurnSubinvOperationCompleted = AddressOf Me.OnCheckUTurnSubinvOperationCompleted
            End If
            Me.InvokeAsync("CheckUTurnSubinv", New Object() {OracleLoginData}, Me.CheckUTurnSubinvOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckUTurnSubinvOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckUTurnSubinvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckUTurnSubinvCompleted(Me, New CheckUTurnSubinvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadCLID_UTurn", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadCLID_UTurn(ByVal CLID As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadCLID_UTurn", New Object() {CLID, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadCLID_UTurnAsync(ByVal CLID As String, ByVal OracleLoginData As ERPLogin)
            Me.ReadCLID_UTurnAsync(CLID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadCLID_UTurnAsync(ByVal CLID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ReadCLID_UTurnOperationCompleted Is Nothing) Then
                Me.ReadCLID_UTurnOperationCompleted = AddressOf Me.OnReadCLID_UTurnOperationCompleted
            End If
            Me.InvokeAsync("ReadCLID_UTurn", New Object() {CLID, OracleLoginData}, Me.ReadCLID_UTurnOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadCLID_UTurnOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadCLID_UTurnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadCLID_UTurnCompleted(Me, New ReadCLID_UTurnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UTurnDelivery", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UTurnDelivery(ByVal OracleLoginData As ERPLogin, ByVal CLIDS As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("UTurnDelivery", New Object() {OracleLoginData, CLIDS})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UTurnDeliveryAsync(ByVal OracleLoginData As ERPLogin, ByVal CLIDS As System.Data.DataSet)
            Me.UTurnDeliveryAsync(OracleLoginData, CLIDS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UTurnDeliveryAsync(ByVal OracleLoginData As ERPLogin, ByVal CLIDS As System.Data.DataSet, ByVal userState As Object)
            If (Me.UTurnDeliveryOperationCompleted Is Nothing) Then
                Me.UTurnDeliveryOperationCompleted = AddressOf Me.OnUTurnDeliveryOperationCompleted
            End If
            Me.InvokeAsync("UTurnDelivery", New Object() {OracleLoginData, CLIDS}, Me.UTurnDeliveryOperationCompleted, userState)
        End Sub
        
        Private Sub OnUTurnDeliveryOperationCompleted(ByVal arg As Object)
            If (Not (Me.UTurnDeliveryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UTurnDeliveryCompleted(Me, New UTurnDeliveryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckUTurnCLIDFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckUTurnCLIDFormat(ByVal ExcelData As System.Data.DataSet, ByVal SubInv As String, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckUTurnCLIDFormat", New Object() {ExcelData, SubInv, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckUTurnCLIDFormatAsync(ByVal ExcelData As System.Data.DataSet, ByVal SubInv As String, ByVal OracleERPLogin As ERPLogin)
            Me.CheckUTurnCLIDFormatAsync(ExcelData, SubInv, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckUTurnCLIDFormatAsync(ByVal ExcelData As System.Data.DataSet, ByVal SubInv As String, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.CheckUTurnCLIDFormatOperationCompleted Is Nothing) Then
                Me.CheckUTurnCLIDFormatOperationCompleted = AddressOf Me.OnCheckUTurnCLIDFormatOperationCompleted
            End If
            Me.InvokeAsync("CheckUTurnCLIDFormat", New Object() {ExcelData, SubInv, OracleERPLogin}, Me.CheckUTurnCLIDFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckUTurnCLIDFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckUTurnCLIDFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckUTurnCLIDFormatCompleted(Me, New CheckUTurnCLIDFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostUTurnStatusChange", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostUTurnStatusChange(ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As String
            Dim results() As Object = Me.Invoke("PostUTurnStatusChange", New Object() {ExcelData, OracleERPLogin})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostUTurnStatusChangeAsync(ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.PostUTurnStatusChangeAsync(ExcelData, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostUTurnStatusChangeAsync(ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.PostUTurnStatusChangeOperationCompleted Is Nothing) Then
                Me.PostUTurnStatusChangeOperationCompleted = AddressOf Me.OnPostUTurnStatusChangeOperationCompleted
            End If
            Me.InvokeAsync("PostUTurnStatusChange", New Object() {ExcelData, OracleERPLogin}, Me.PostUTurnStatusChangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostUTurnStatusChangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostUTurnStatusChangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostUTurnStatusChangeCompleted(Me, New PostUTurnStatusChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckLocRTList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckLocRTList(ByVal Item As String, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckLocRTList", New Object() {Item, Subinv, Locator, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckLocRTListAsync(ByVal Item As String, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin)
            Me.CheckLocRTListAsync(Item, Subinv, Locator, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckLocRTListAsync(ByVal Item As String, ByVal Subinv As String, ByVal Locator As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckLocRTListOperationCompleted Is Nothing) Then
                Me.CheckLocRTListOperationCompleted = AddressOf Me.OnCheckLocRTListOperationCompleted
            End If
            Me.InvokeAsync("CheckLocRTList", New Object() {Item, Subinv, Locator, OracleLoginData}, Me.CheckLocRTListOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckLocRTListOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckLocRTListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckLocRTListCompleted(Me, New CheckLocRTListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckCLIDDisableFlag", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckCLIDDisableFlag(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("CheckCLIDDisableFlag", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckCLIDDisableFlagAsync(ByVal OracleLoginData As ERPLogin)
            Me.CheckCLIDDisableFlagAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckCLIDDisableFlagAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckCLIDDisableFlagOperationCompleted Is Nothing) Then
                Me.CheckCLIDDisableFlagOperationCompleted = AddressOf Me.OnCheckCLIDDisableFlagOperationCompleted
            End If
            Me.InvokeAsync("CheckCLIDDisableFlag", New Object() {OracleLoginData}, Me.CheckCLIDDisableFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckCLIDDisableFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckCLIDDisableFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckCLIDDisableFlagCompleted(Me, New CheckCLIDDisableFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidateSubinv", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateSubinv(ByVal OracleLoginData As ERPLogin, ByVal SubInv As String) As String
            Dim results() As Object = Me.Invoke("ValidateSubinv", New Object() {OracleLoginData, SubInv})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateSubinvAsync(ByVal OracleLoginData As ERPLogin, ByVal SubInv As String)
            Me.ValidateSubinvAsync(OracleLoginData, SubInv, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateSubinvAsync(ByVal OracleLoginData As ERPLogin, ByVal SubInv As String, ByVal userState As Object)
            If (Me.ValidateSubinvOperationCompleted Is Nothing) Then
                Me.ValidateSubinvOperationCompleted = AddressOf Me.OnValidateSubinvOperationCompleted
            End If
            Me.InvokeAsync("ValidateSubinv", New Object() {OracleLoginData, SubInv}, Me.ValidateSubinvOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateSubinvOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateSubinvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateSubinvCompleted(Me, New ValidateSubinvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckBatchDisableCLIDFormat", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBatchDisableCLIDFormat(ByVal ExcelData As System.Data.DataSet, ByVal SubInv As String, ByVal OracleERPLogin As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckBatchDisableCLIDFormat", New Object() {ExcelData, SubInv, OracleERPLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBatchDisableCLIDFormatAsync(ByVal ExcelData As System.Data.DataSet, ByVal SubInv As String, ByVal OracleERPLogin As ERPLogin)
            Me.CheckBatchDisableCLIDFormatAsync(ExcelData, SubInv, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBatchDisableCLIDFormatAsync(ByVal ExcelData As System.Data.DataSet, ByVal SubInv As String, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.CheckBatchDisableCLIDFormatOperationCompleted Is Nothing) Then
                Me.CheckBatchDisableCLIDFormatOperationCompleted = AddressOf Me.OnCheckBatchDisableCLIDFormatOperationCompleted
            End If
            Me.InvokeAsync("CheckBatchDisableCLIDFormat", New Object() {ExcelData, SubInv, OracleERPLogin}, Me.CheckBatchDisableCLIDFormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBatchDisableCLIDFormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBatchDisableCLIDFormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBatchDisableCLIDFormatCompleted(Me, New CheckBatchDisableCLIDFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostBatchDisableCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostBatchDisableCLID(ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin) As String
            Dim results() As Object = Me.Invoke("PostBatchDisableCLID", New Object() {ExcelData, OracleERPLogin})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostBatchDisableCLIDAsync(ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin)
            Me.PostBatchDisableCLIDAsync(ExcelData, OracleERPLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostBatchDisableCLIDAsync(ByVal ExcelData As System.Data.DataSet, ByVal OracleERPLogin As ERPLogin, ByVal userState As Object)
            If (Me.PostBatchDisableCLIDOperationCompleted Is Nothing) Then
                Me.PostBatchDisableCLIDOperationCompleted = AddressOf Me.OnPostBatchDisableCLIDOperationCompleted
            End If
            Me.InvokeAsync("PostBatchDisableCLID", New Object() {ExcelData, OracleERPLogin}, Me.PostBatchDisableCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostBatchDisableCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostBatchDisableCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostBatchDisableCLIDCompleted(Me, New PostBatchDisableCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UpdateSlotCheckOption", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSlotCheckOption(ByVal Options As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("UpdateSlotCheckOption", New Object() {Options, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSlotCheckOptionAsync(ByVal Options As String, ByVal OracleLoginData As ERPLogin)
            Me.UpdateSlotCheckOptionAsync(Options, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSlotCheckOptionAsync(ByVal Options As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.UpdateSlotCheckOptionOperationCompleted Is Nothing) Then
                Me.UpdateSlotCheckOptionOperationCompleted = AddressOf Me.OnUpdateSlotCheckOptionOperationCompleted
            End If
            Me.InvokeAsync("UpdateSlotCheckOption", New Object() {Options, OracleLoginData}, Me.UpdateSlotCheckOptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSlotCheckOptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSlotCheckOptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSlotCheckOptionCompleted(Me, New UpdateSlotCheckOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PackingManagement", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PackingManagement(ByVal FirstScan As String, ByVal CLIDBoxID As String, ByVal PalletWeight As Decimal, ByVal ActionType As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PackingManagement", New Object() {FirstScan, CLIDBoxID, PalletWeight, ActionType, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PackingManagementAsync(ByVal FirstScan As String, ByVal CLIDBoxID As String, ByVal PalletWeight As Decimal, ByVal ActionType As String, ByVal OracleLoginData As ERPLogin)
            Me.PackingManagementAsync(FirstScan, CLIDBoxID, PalletWeight, ActionType, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PackingManagementAsync(ByVal FirstScan As String, ByVal CLIDBoxID As String, ByVal PalletWeight As Decimal, ByVal ActionType As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.PackingManagementOperationCompleted Is Nothing) Then
                Me.PackingManagementOperationCompleted = AddressOf Me.OnPackingManagementOperationCompleted
            End If
            Me.InvokeAsync("PackingManagement", New Object() {FirstScan, CLIDBoxID, PalletWeight, ActionType, OracleLoginData}, Me.PackingManagementOperationCompleted, userState)
        End Sub
        
        Private Sub OnPackingManagementOperationCompleted(ByVal arg As Object)
            If (Not (Me.PackingManagementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PackingManagementCompleted(Me, New PackingManagementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SFGetDcodeLnforIntSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SFGetDcodeLnforIntSN(ByVal IntSN As String, ByVal PCBA As String, ByVal Component As String) As String
            Dim results() As Object = Me.Invoke("SFGetDcodeLnforIntSN", New Object() {IntSN, PCBA, Component})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SFGetDcodeLnforIntSNAsync(ByVal IntSN As String, ByVal PCBA As String, ByVal Component As String)
            Me.SFGetDcodeLnforIntSNAsync(IntSN, PCBA, Component, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SFGetDcodeLnforIntSNAsync(ByVal IntSN As String, ByVal PCBA As String, ByVal Component As String, ByVal userState As Object)
            If (Me.SFGetDcodeLnforIntSNOperationCompleted Is Nothing) Then
                Me.SFGetDcodeLnforIntSNOperationCompleted = AddressOf Me.OnSFGetDcodeLnforIntSNOperationCompleted
            End If
            Me.InvokeAsync("SFGetDcodeLnforIntSN", New Object() {IntSN, PCBA, Component}, Me.SFGetDcodeLnforIntSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnSFGetDcodeLnforIntSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.SFGetDcodeLnforIntSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SFGetDcodeLnforIntSNCompleted(Me, New SFGetDcodeLnforIntSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SFGetDcodeLnforSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SFGetDcodeLnforSN(ByVal SN As String, ByVal PCBA As String, ByVal Component As String) As String
            Dim results() As Object = Me.Invoke("SFGetDcodeLnforSN", New Object() {SN, PCBA, Component})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SFGetDcodeLnforSNAsync(ByVal SN As String, ByVal PCBA As String, ByVal Component As String)
            Me.SFGetDcodeLnforSNAsync(SN, PCBA, Component, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SFGetDcodeLnforSNAsync(ByVal SN As String, ByVal PCBA As String, ByVal Component As String, ByVal userState As Object)
            If (Me.SFGetDcodeLnforSNOperationCompleted Is Nothing) Then
                Me.SFGetDcodeLnforSNOperationCompleted = AddressOf Me.OnSFGetDcodeLnforSNOperationCompleted
            End If
            Me.InvokeAsync("SFGetDcodeLnforSN", New Object() {SN, PCBA, Component}, Me.SFGetDcodeLnforSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnSFGetDcodeLnforSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.SFGetDcodeLnforSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SFGetDcodeLnforSNCompleted(Me, New SFGetDcodeLnforSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Save_SubInvTransfer", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Save_SubInvTransfer(ByVal p_ds As System.Data.DataSet, ByVal UpdateTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Save_SubInvTransfer", New Object() {p_ds, UpdateTable, OracleLoginData, MoveType, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Save_SubInvTransferAsync(ByVal p_ds As System.Data.DataSet, ByVal UpdateTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer)
            Me.Save_SubInvTransferAsync(p_ds, UpdateTable, OracleLoginData, MoveType, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Save_SubInvTransferAsync(ByVal p_ds As System.Data.DataSet, ByVal UpdateTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal userState As Object)
            If (Me.Save_SubInvTransferOperationCompleted Is Nothing) Then
                Me.Save_SubInvTransferOperationCompleted = AddressOf Me.OnSave_SubInvTransferOperationCompleted
            End If
            Me.InvokeAsync("Save_SubInvTransfer", New Object() {p_ds, UpdateTable, OracleLoginData, MoveType, TransactionID}, Me.Save_SubInvTransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnSave_SubInvTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.Save_SubInvTransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Save_SubInvTransferCompleted(Me, New Save_SubInvTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Check_CLID_Info", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Check_CLID_Info(ByVal ID As String, ByVal OracleLoginData As ERPLogin) As CLID_Info
            Dim results() As Object = Me.Invoke("Check_CLID_Info", New Object() {ID, OracleLoginData})
            Return CType(results(0),CLID_Info)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Check_CLID_InfoAsync(ByVal ID As String, ByVal OracleLoginData As ERPLogin)
            Me.Check_CLID_InfoAsync(ID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Check_CLID_InfoAsync(ByVal ID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Check_CLID_InfoOperationCompleted Is Nothing) Then
                Me.Check_CLID_InfoOperationCompleted = AddressOf Me.OnCheck_CLID_InfoOperationCompleted
            End If
            Me.InvokeAsync("Check_CLID_Info", New Object() {ID, OracleLoginData}, Me.Check_CLID_InfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheck_CLID_InfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Check_CLID_InfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Check_CLID_InfoCompleted(Me, New Check_CLID_InfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/MatSourceRead", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MatSourceRead(ByVal CLID As String, ByVal OrgCode As String, ByVal SourceSubInv As String, ByVal SourceLocator As String, ByVal DestSubInv As String, ByVal DestLocator As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("MatSourceRead", New Object() {CLID, OrgCode, SourceSubInv, SourceLocator, DestSubInv, DestLocator, MoveType, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MatSourceReadAsync(ByVal CLID As String, ByVal OrgCode As String, ByVal SourceSubInv As String, ByVal SourceLocator As String, ByVal DestSubInv As String, ByVal DestLocator As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin)
            Me.MatSourceReadAsync(CLID, OrgCode, SourceSubInv, SourceLocator, DestSubInv, DestLocator, MoveType, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MatSourceReadAsync(ByVal CLID As String, ByVal OrgCode As String, ByVal SourceSubInv As String, ByVal SourceLocator As String, ByVal DestSubInv As String, ByVal DestLocator As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.MatSourceReadOperationCompleted Is Nothing) Then
                Me.MatSourceReadOperationCompleted = AddressOf Me.OnMatSourceReadOperationCompleted
            End If
            Me.InvokeAsync("MatSourceRead", New Object() {CLID, OrgCode, SourceSubInv, SourceLocator, DestSubInv, DestLocator, MoveType, OracleLoginData}, Me.MatSourceReadOperationCompleted, userState)
        End Sub
        
        Private Sub OnMatSourceReadOperationCompleted(ByVal arg As Object)
            If (Not (Me.MatSourceReadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MatSourceReadCompleted(Me, New MatSourceReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ClearPalletID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClearPalletID(ByVal CartonID As String, ByVal OracleLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ClearPalletID", New Object() {CartonID, OracleLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClearPalletIDAsync(ByVal CartonID As String, ByVal OracleLoginData As ERPLogin)
            Me.ClearPalletIDAsync(CartonID, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearPalletIDAsync(ByVal CartonID As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ClearPalletIDOperationCompleted Is Nothing) Then
                Me.ClearPalletIDOperationCompleted = AddressOf Me.OnClearPalletIDOperationCompleted
            End If
            Me.InvokeAsync("ClearPalletID", New Object() {CartonID, OracleLoginData}, Me.ClearPalletIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearPalletIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearPalletIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearPalletIDCompleted(Me, New ClearPalletIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckCLID(ByVal CLID As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckCLID", New Object() {CLID, MoveType, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckCLIDAsync(ByVal CLID As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin)
            Me.CheckCLIDAsync(CLID, MoveType, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckCLIDAsync(ByVal CLID As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckCLIDOperationCompleted Is Nothing) Then
                Me.CheckCLIDOperationCompleted = AddressOf Me.OnCheckCLIDOperationCompleted
            End If
            Me.InvokeAsync("CheckCLID", New Object() {CLID, MoveType, OracleLoginData}, Me.CheckCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckCLIDCompleted(Me, New CheckCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RepSourceRead", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RepSourceRead(ByVal CLID As String, ByVal OrgCode As String, ByVal Item As String, ByVal Revision As String, ByVal SourceSubInv As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RepSourceRead", New Object() {CLID, OrgCode, Item, Revision, SourceSubInv, MoveType, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RepSourceReadAsync(ByVal CLID As String, ByVal OrgCode As String, ByVal Item As String, ByVal Revision As String, ByVal SourceSubInv As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin)
            Me.RepSourceReadAsync(CLID, OrgCode, Item, Revision, SourceSubInv, MoveType, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RepSourceReadAsync(ByVal CLID As String, ByVal OrgCode As String, ByVal Item As String, ByVal Revision As String, ByVal SourceSubInv As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.RepSourceReadOperationCompleted Is Nothing) Then
                Me.RepSourceReadOperationCompleted = AddressOf Me.OnRepSourceReadOperationCompleted
            End If
            Me.InvokeAsync("RepSourceRead", New Object() {CLID, OrgCode, Item, Revision, SourceSubInv, MoveType, OracleLoginData}, Me.RepSourceReadOperationCompleted, userState)
        End Sub
        
        Private Sub OnRepSourceReadOperationCompleted(ByVal arg As Object)
            If (Not (Me.RepSourceReadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RepSourceReadCompleted(Me, New RepSourceReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/CheckDest", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckDest(ByVal OrgCode As String, ByVal MaterialNo As String, ByVal RTLot As String, ByVal DestSubInv As String, ByVal DestLocator As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckDest", New Object() {OrgCode, MaterialNo, RTLot, DestSubInv, DestLocator, MoveType, OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckDestAsync(ByVal OrgCode As String, ByVal MaterialNo As String, ByVal RTLot As String, ByVal DestSubInv As String, ByVal DestLocator As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin)
            Me.CheckDestAsync(OrgCode, MaterialNo, RTLot, DestSubInv, DestLocator, MoveType, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckDestAsync(ByVal OrgCode As String, ByVal MaterialNo As String, ByVal RTLot As String, ByVal DestSubInv As String, ByVal DestLocator As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.CheckDestOperationCompleted Is Nothing) Then
                Me.CheckDestOperationCompleted = AddressOf Me.OnCheckDestOperationCompleted
            End If
            Me.InvokeAsync("CheckDest", New Object() {OrgCode, MaterialNo, RTLot, DestSubInv, DestLocator, MoveType, OracleLoginData}, Me.CheckDestOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckDestOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckDestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckDestCompleted(Me, New CheckDestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Check_Dest", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Check_Dest(ByVal OrgCode As String, ByVal MaterialNo As String, ByVal RTLot As String, ByVal DestSubInv As String, ByVal DestLocator As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("Check_Dest", New Object() {OrgCode, MaterialNo, RTLot, DestSubInv, DestLocator, MoveType, OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Check_DestAsync(ByVal OrgCode As String, ByVal MaterialNo As String, ByVal RTLot As String, ByVal DestSubInv As String, ByVal DestLocator As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin)
            Me.Check_DestAsync(OrgCode, MaterialNo, RTLot, DestSubInv, DestLocator, MoveType, OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Check_DestAsync(ByVal OrgCode As String, ByVal MaterialNo As String, ByVal RTLot As String, ByVal DestSubInv As String, ByVal DestLocator As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Check_DestOperationCompleted Is Nothing) Then
                Me.Check_DestOperationCompleted = AddressOf Me.OnCheck_DestOperationCompleted
            End If
            Me.InvokeAsync("Check_Dest", New Object() {OrgCode, MaterialNo, RTLot, DestSubInv, DestLocator, MoveType, OracleLoginData}, Me.Check_DestOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheck_DestOperationCompleted(ByVal arg As Object)
            If (Not (Me.Check_DestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Check_DestCompleted(Me, New Check_DestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Check_Return_Option", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Check_Return_Option(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("Check_Return_Option", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Check_Return_OptionAsync(ByVal OracleLoginData As ERPLogin)
            Me.Check_Return_OptionAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Check_Return_OptionAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Check_Return_OptionOperationCompleted Is Nothing) Then
                Me.Check_Return_OptionOperationCompleted = AddressOf Me.OnCheck_Return_OptionOperationCompleted
            End If
            Me.InvokeAsync("Check_Return_Option", New Object() {OracleLoginData}, Me.Check_Return_OptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheck_Return_OptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.Check_Return_OptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Check_Return_OptionCompleted(Me, New Check_Return_OptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/account_alias_batch_receipt", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function account_alias_batch_receipt(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Double, ByVal MiscType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("account_alias_batch_receipt", New Object() {p_ds, OracleLoginData, MoveType, TransactionID, MiscType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub account_alias_batch_receiptAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Double, ByVal MiscType As String)
            Me.account_alias_batch_receiptAsync(p_ds, OracleLoginData, MoveType, TransactionID, MiscType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub account_alias_batch_receiptAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Double, ByVal MiscType As String, ByVal userState As Object)
            If (Me.account_alias_batch_receiptOperationCompleted Is Nothing) Then
                Me.account_alias_batch_receiptOperationCompleted = AddressOf Me.Onaccount_alias_batch_receiptOperationCompleted
            End If
            Me.InvokeAsync("account_alias_batch_receipt", New Object() {p_ds, OracleLoginData, MoveType, TransactionID, MiscType}, Me.account_alias_batch_receiptOperationCompleted, userState)
        End Sub
        
        Private Sub Onaccount_alias_batch_receiptOperationCompleted(ByVal arg As Object)
            If (Not (Me.account_alias_batch_receiptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent account_alias_batch_receiptCompleted(Me, New account_alias_batch_receiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/account_alias_batch_issue", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function account_alias_batch_issue(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Double, ByVal MiscType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("account_alias_batch_issue", New Object() {p_ds, OracleLoginData, MoveType, TransactionID, MiscType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub account_alias_batch_issueAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Double, ByVal MiscType As String)
            Me.account_alias_batch_issueAsync(p_ds, OracleLoginData, MoveType, TransactionID, MiscType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub account_alias_batch_issueAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Double, ByVal MiscType As String, ByVal userState As Object)
            If (Me.account_alias_batch_issueOperationCompleted Is Nothing) Then
                Me.account_alias_batch_issueOperationCompleted = AddressOf Me.Onaccount_alias_batch_issueOperationCompleted
            End If
            Me.InvokeAsync("account_alias_batch_issue", New Object() {p_ds, OracleLoginData, MoveType, TransactionID, MiscType}, Me.account_alias_batch_issueOperationCompleted, userState)
        End Sub
        
        Private Sub Onaccount_alias_batch_issueOperationCompleted(ByVal arg As Object)
            If (Not (Me.account_alias_batch_issueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent account_alias_batch_issueCompleted(Me, New account_alias_batch_issueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/account_receipt", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function account_receipt(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("account_receipt", New Object() {p_ds, OracleLoginData, MoveType, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub account_receiptAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer)
            Me.account_receiptAsync(p_ds, OracleLoginData, MoveType, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub account_receiptAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal userState As Object)
            If (Me.account_receiptOperationCompleted Is Nothing) Then
                Me.account_receiptOperationCompleted = AddressOf Me.Onaccount_receiptOperationCompleted
            End If
            Me.InvokeAsync("account_receipt", New Object() {p_ds, OracleLoginData, MoveType, TransactionID}, Me.account_receiptOperationCompleted, userState)
        End Sub
        
        Private Sub Onaccount_receiptOperationCompleted(ByVal arg As Object)
            If (Not (Me.account_receiptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent account_receiptCompleted(Me, New account_receiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/save_account_receipt", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function save_account_receipt(ByVal p_ds As System.Data.DataSet, ByVal UpdateTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("save_account_receipt", New Object() {p_ds, UpdateTable, OracleLoginData, MoveType, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub save_account_receiptAsync(ByVal p_ds As System.Data.DataSet, ByVal UpdateTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer)
            Me.save_account_receiptAsync(p_ds, UpdateTable, OracleLoginData, MoveType, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub save_account_receiptAsync(ByVal p_ds As System.Data.DataSet, ByVal UpdateTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal userState As Object)
            If (Me.save_account_receiptOperationCompleted Is Nothing) Then
                Me.save_account_receiptOperationCompleted = AddressOf Me.Onsave_account_receiptOperationCompleted
            End If
            Me.InvokeAsync("save_account_receipt", New Object() {p_ds, UpdateTable, OracleLoginData, MoveType, TransactionID}, Me.save_account_receiptOperationCompleted, userState)
        End Sub
        
        Private Sub Onsave_account_receiptOperationCompleted(ByVal arg As Object)
            If (Not (Me.save_account_receiptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent save_account_receiptCompleted(Me, New save_account_receiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/account_alias_receipt", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function account_alias_receipt(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal MiscType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("account_alias_receipt", New Object() {p_ds, OracleLoginData, MoveType, TransactionID, MiscType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub account_alias_receiptAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal MiscType As String)
            Me.account_alias_receiptAsync(p_ds, OracleLoginData, MoveType, TransactionID, MiscType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub account_alias_receiptAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal MiscType As String, ByVal userState As Object)
            If (Me.account_alias_receiptOperationCompleted Is Nothing) Then
                Me.account_alias_receiptOperationCompleted = AddressOf Me.Onaccount_alias_receiptOperationCompleted
            End If
            Me.InvokeAsync("account_alias_receipt", New Object() {p_ds, OracleLoginData, MoveType, TransactionID, MiscType}, Me.account_alias_receiptOperationCompleted, userState)
        End Sub
        
        Private Sub Onaccount_alias_receiptOperationCompleted(ByVal arg As Object)
            If (Not (Me.account_alias_receiptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent account_alias_receiptCompleted(Me, New account_alias_receiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/account_issue", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function account_issue(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("account_issue", New Object() {p_ds, OracleLoginData, MoveType, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub account_issueAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer)
            Me.account_issueAsync(p_ds, OracleLoginData, MoveType, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub account_issueAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal userState As Object)
            If (Me.account_issueOperationCompleted Is Nothing) Then
                Me.account_issueOperationCompleted = AddressOf Me.Onaccount_issueOperationCompleted
            End If
            Me.InvokeAsync("account_issue", New Object() {p_ds, OracleLoginData, MoveType, TransactionID}, Me.account_issueOperationCompleted, userState)
        End Sub
        
        Private Sub Onaccount_issueOperationCompleted(ByVal arg As Object)
            If (Not (Me.account_issueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent account_issueCompleted(Me, New account_issueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/post_pull_return", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function post_pull_return(ByVal MoveOracle As System.Data.DataSet, ByVal TransactionID As Long, ByVal MiscType As String, ByVal CLID As String, ByVal Qty As Decimal, ByVal DestSub As String, ByVal DestLoc As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal SlotNo As String) As Result
            Dim results() As Object = Me.Invoke("post_pull_return", New Object() {MoveOracle, TransactionID, MiscType, CLID, Qty, DestSub, DestLoc, MoveType, OracleLoginData, SlotNo})
            Return CType(results(0),Result)
        End Function
        
        '''<remarks/>
        Public Overloads Sub post_pull_returnAsync(ByVal MoveOracle As System.Data.DataSet, ByVal TransactionID As Long, ByVal MiscType As String, ByVal CLID As String, ByVal Qty As Decimal, ByVal DestSub As String, ByVal DestLoc As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal SlotNo As String)
            Me.post_pull_returnAsync(MoveOracle, TransactionID, MiscType, CLID, Qty, DestSub, DestLoc, MoveType, OracleLoginData, SlotNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub post_pull_returnAsync(ByVal MoveOracle As System.Data.DataSet, ByVal TransactionID As Long, ByVal MiscType As String, ByVal CLID As String, ByVal Qty As Decimal, ByVal DestSub As String, ByVal DestLoc As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal SlotNo As String, ByVal userState As Object)
            If (Me.post_pull_returnOperationCompleted Is Nothing) Then
                Me.post_pull_returnOperationCompleted = AddressOf Me.Onpost_pull_returnOperationCompleted
            End If
            Me.InvokeAsync("post_pull_return", New Object() {MoveOracle, TransactionID, MiscType, CLID, Qty, DestSub, DestLoc, MoveType, OracleLoginData, SlotNo}, Me.post_pull_returnOperationCompleted, userState)
        End Sub
        
        Private Sub Onpost_pull_returnOperationCompleted(ByVal arg As Object)
            If (Not (Me.post_pull_returnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent post_pull_returnCompleted(Me, New post_pull_returnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/account_issue_rcpt", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function account_issue_rcpt(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal MiscType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("account_issue_rcpt", New Object() {p_ds, OracleLoginData, MoveType, TransactionID, MiscType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub account_issue_rcptAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal MiscType As String)
            Me.account_issue_rcptAsync(p_ds, OracleLoginData, MoveType, TransactionID, MiscType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub account_issue_rcptAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal MiscType As String, ByVal userState As Object)
            If (Me.account_issue_rcptOperationCompleted Is Nothing) Then
                Me.account_issue_rcptOperationCompleted = AddressOf Me.Onaccount_issue_rcptOperationCompleted
            End If
            Me.InvokeAsync("account_issue_rcpt", New Object() {p_ds, OracleLoginData, MoveType, TransactionID, MiscType}, Me.account_issue_rcptOperationCompleted, userState)
        End Sub
        
        Private Sub Onaccount_issue_rcptOperationCompleted(ByVal arg As Object)
            If (Not (Me.account_issue_rcptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent account_issue_rcptCompleted(Me, New account_issue_rcptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/account_alias_issue", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function account_alias_issue(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal MiscType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("account_alias_issue", New Object() {p_ds, OracleLoginData, MoveType, TransactionID, MiscType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub account_alias_issueAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal MiscType As String)
            Me.account_alias_issueAsync(p_ds, OracleLoginData, MoveType, TransactionID, MiscType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub account_alias_issueAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal MiscType As String, ByVal userState As Object)
            If (Me.account_alias_issueOperationCompleted Is Nothing) Then
                Me.account_alias_issueOperationCompleted = AddressOf Me.Onaccount_alias_issueOperationCompleted
            End If
            Me.InvokeAsync("account_alias_issue", New Object() {p_ds, OracleLoginData, MoveType, TransactionID, MiscType}, Me.account_alias_issueOperationCompleted, userState)
        End Sub
        
        Private Sub Onaccount_alias_issueOperationCompleted(ByVal arg As Object)
            If (Not (Me.account_alias_issueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent account_alias_issueCompleted(Me, New account_alias_issueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/save_account_issue", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function save_account_issue(ByVal p_ds As System.Data.DataSet, ByVal UpdateTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("save_account_issue", New Object() {p_ds, UpdateTable, OracleLoginData, MoveType, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub save_account_issueAsync(ByVal p_ds As System.Data.DataSet, ByVal UpdateTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer)
            Me.save_account_issueAsync(p_ds, UpdateTable, OracleLoginData, MoveType, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub save_account_issueAsync(ByVal p_ds As System.Data.DataSet, ByVal UpdateTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal userState As Object)
            If (Me.save_account_issueOperationCompleted Is Nothing) Then
                Me.save_account_issueOperationCompleted = AddressOf Me.Onsave_account_issueOperationCompleted
            End If
            Me.InvokeAsync("save_account_issue", New Object() {p_ds, UpdateTable, OracleLoginData, MoveType, TransactionID}, Me.save_account_issueOperationCompleted, userState)
        End Sub
        
        Private Sub Onsave_account_issueOperationCompleted(ByVal arg As Object)
            If (Not (Me.save_account_issueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent save_account_issueCompleted(Me, New save_account_issueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/post_misc_rcpt", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function post_misc_rcpt(ByVal MoveOracle As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Long, ByVal LabelInfo As LabelData, ByVal Pkg As Integer, ByVal Printer As String) As ConversionResult
            Dim results() As Object = Me.Invoke("post_misc_rcpt", New Object() {MoveOracle, OracleLoginData, MoveType, TransactionID, LabelInfo, Pkg, Printer})
            Return CType(results(0),ConversionResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub post_misc_rcptAsync(ByVal MoveOracle As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Long, ByVal LabelInfo As LabelData, ByVal Pkg As Integer, ByVal Printer As String)
            Me.post_misc_rcptAsync(MoveOracle, OracleLoginData, MoveType, TransactionID, LabelInfo, Pkg, Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub post_misc_rcptAsync(ByVal MoveOracle As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Long, ByVal LabelInfo As LabelData, ByVal Pkg As Integer, ByVal Printer As String, ByVal userState As Object)
            If (Me.post_misc_rcptOperationCompleted Is Nothing) Then
                Me.post_misc_rcptOperationCompleted = AddressOf Me.Onpost_misc_rcptOperationCompleted
            End If
            Me.InvokeAsync("post_misc_rcpt", New Object() {MoveOracle, OracleLoginData, MoveType, TransactionID, LabelInfo, Pkg, Printer}, Me.post_misc_rcptOperationCompleted, userState)
        End Sub
        
        Private Sub Onpost_misc_rcptOperationCompleted(ByVal arg As Object)
            If (Not (Me.post_misc_rcptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent post_misc_rcptCompleted(Me, New post_misc_rcptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LabelForMiscReceipt", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LabelForMiscReceipt(ByVal LoginData As ERPLogin, ByVal LabelPrinter As String, <System.Xml.Serialization.XmlElementAttribute("PrintLabels")> ByVal PrintLabels1 As Boolean, ByVal LabelInfo As LabelData) As ConversionResult
            Dim results() As Object = Me.Invoke("LabelForMiscReceipt", New Object() {LoginData, LabelPrinter, PrintLabels1, LabelInfo})
            Return CType(results(0),ConversionResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LabelForMiscReceiptAsync(ByVal LoginData As ERPLogin, ByVal LabelPrinter As String, ByVal PrintLabels1 As Boolean, ByVal LabelInfo As LabelData)
            Me.LabelForMiscReceiptAsync(LoginData, LabelPrinter, PrintLabels1, LabelInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LabelForMiscReceiptAsync(ByVal LoginData As ERPLogin, ByVal LabelPrinter As String, ByVal PrintLabels1 As Boolean, ByVal LabelInfo As LabelData, ByVal userState As Object)
            If (Me.LabelForMiscReceiptOperationCompleted Is Nothing) Then
                Me.LabelForMiscReceiptOperationCompleted = AddressOf Me.OnLabelForMiscReceiptOperationCompleted
            End If
            Me.InvokeAsync("LabelForMiscReceipt", New Object() {LoginData, LabelPrinter, PrintLabels1, LabelInfo}, Me.LabelForMiscReceiptOperationCompleted, userState)
        End Sub
        
        Private Sub OnLabelForMiscReceiptOperationCompleted(ByVal arg As Object)
            If (Not (Me.LabelForMiscReceiptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LabelForMiscReceiptCompleted(Me, New LabelForMiscReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ExportHWDataInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExportHWDataInfo(ByVal User As String, ByVal exportdata As String) As HW_ExportDataInfo
            Dim results() As Object = Me.Invoke("ExportHWDataInfo", New Object() {User, exportdata})
            Return CType(results(0),HW_ExportDataInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExportHWDataInfoAsync(ByVal User As String, ByVal exportdata As String)
            Me.ExportHWDataInfoAsync(User, exportdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExportHWDataInfoAsync(ByVal User As String, ByVal exportdata As String, ByVal userState As Object)
            If (Me.ExportHWDataInfoOperationCompleted Is Nothing) Then
                Me.ExportHWDataInfoOperationCompleted = AddressOf Me.OnExportHWDataInfoOperationCompleted
            End If
            Me.InvokeAsync("ExportHWDataInfo", New Object() {User, exportdata}, Me.ExportHWDataInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnExportHWDataInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExportHWDataInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExportHWDataInfoCompleted(Me, New ExportHWDataInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/eTrace_Update", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function eTrace_Update(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String) As Boolean
            Dim results() As Object = Me.Invoke("eTrace_Update", New Object() {UpdtTable, OracleLoginData, MoveType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub eTrace_UpdateAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String)
            Me.eTrace_UpdateAsync(UpdtTable, OracleLoginData, MoveType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub eTrace_UpdateAsync(ByVal UpdtTable As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal userState As Object)
            If (Me.eTrace_UpdateOperationCompleted Is Nothing) Then
                Me.eTrace_UpdateOperationCompleted = AddressOf Me.OneTrace_UpdateOperationCompleted
            End If
            Me.InvokeAsync("eTrace_Update", New Object() {UpdtTable, OracleLoginData, MoveType}, Me.eTrace_UpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OneTrace_UpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.eTrace_UpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent eTrace_UpdateCompleted(Me, New eTrace_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Misc_issue_rcpt", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Misc_issue_rcpt(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Misc_issue_rcpt", New Object() {p_ds, OracleLoginData, MoveType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Misc_issue_rcptAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String)
            Me.Misc_issue_rcptAsync(p_ds, OracleLoginData, MoveType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Misc_issue_rcptAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal userState As Object)
            If (Me.Misc_issue_rcptOperationCompleted Is Nothing) Then
                Me.Misc_issue_rcptOperationCompleted = AddressOf Me.OnMisc_issue_rcptOperationCompleted
            End If
            Me.InvokeAsync("Misc_issue_rcpt", New Object() {p_ds, OracleLoginData, MoveType}, Me.Misc_issue_rcptOperationCompleted, userState)
        End Sub
        
        Private Sub OnMisc_issue_rcptOperationCompleted(ByVal arg As Object)
            If (Not (Me.Misc_issue_rcptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Misc_issue_rcptCompleted(Me, New Misc_issue_rcptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/post_push_return", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function post_push_return(ByVal MoveOracle As System.Data.DataSet, ByVal CLID As String, ByVal Qty As Decimal, ByVal DestSub As String, ByVal DestLoc As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal SlotNo As String) As Result
            Dim results() As Object = Me.Invoke("post_push_return", New Object() {MoveOracle, CLID, Qty, DestSub, DestLoc, MoveType, OracleLoginData, SlotNo})
            Return CType(results(0),Result)
        End Function
        
        '''<remarks/>
        Public Overloads Sub post_push_returnAsync(ByVal MoveOracle As System.Data.DataSet, ByVal CLID As String, ByVal Qty As Decimal, ByVal DestSub As String, ByVal DestLoc As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal SlotNo As String)
            Me.post_push_returnAsync(MoveOracle, CLID, Qty, DestSub, DestLoc, MoveType, OracleLoginData, SlotNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub post_push_returnAsync(ByVal MoveOracle As System.Data.DataSet, ByVal CLID As String, ByVal Qty As Decimal, ByVal DestSub As String, ByVal DestLoc As String, ByVal MoveType As String, ByVal OracleLoginData As ERPLogin, ByVal SlotNo As String, ByVal userState As Object)
            If (Me.post_push_returnOperationCompleted Is Nothing) Then
                Me.post_push_returnOperationCompleted = AddressOf Me.Onpost_push_returnOperationCompleted
            End If
            Me.InvokeAsync("post_push_return", New Object() {MoveOracle, CLID, Qty, DestSub, DestLoc, MoveType, OracleLoginData, SlotNo}, Me.post_push_returnOperationCompleted, userState)
        End Sub
        
        Private Sub Onpost_push_returnOperationCompleted(ByVal arg As Object)
            If (Not (Me.post_push_returnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent post_push_returnCompleted(Me, New post_push_returnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/component_return", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function component_return(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("component_return", New Object() {p_ds, OracleLoginData, MoveType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub component_returnAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String)
            Me.component_returnAsync(p_ds, OracleLoginData, MoveType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub component_returnAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal userState As Object)
            If (Me.component_returnOperationCompleted Is Nothing) Then
                Me.component_returnOperationCompleted = AddressOf Me.Oncomponent_returnOperationCompleted
            End If
            Me.InvokeAsync("component_return", New Object() {p_ds, OracleLoginData, MoveType}, Me.component_returnOperationCompleted, userState)
        End Sub
        
        Private Sub Oncomponent_returnOperationCompleted(ByVal arg As Object)
            If (Not (Me.component_returnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent component_returnCompleted(Me, New component_returnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ChangeCLID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeCLID(ByVal CLID As String, ByVal Qty As Double, ByVal DestSub As String, ByVal DestLoc As String, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal SlotNo As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangeCLID", New Object() {CLID, Qty, DestSub, DestLoc, OracleLoginData, MoveType, SlotNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeCLIDAsync(ByVal CLID As String, ByVal Qty As Double, ByVal DestSub As String, ByVal DestLoc As String, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal SlotNo As String)
            Me.ChangeCLIDAsync(CLID, Qty, DestSub, DestLoc, OracleLoginData, MoveType, SlotNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeCLIDAsync(ByVal CLID As String, ByVal Qty As Double, ByVal DestSub As String, ByVal DestLoc As String, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal SlotNo As String, ByVal userState As Object)
            If (Me.ChangeCLIDOperationCompleted Is Nothing) Then
                Me.ChangeCLIDOperationCompleted = AddressOf Me.OnChangeCLIDOperationCompleted
            End If
            Me.InvokeAsync("ChangeCLID", New Object() {CLID, Qty, DestSub, DestLoc, OracleLoginData, MoveType, SlotNo}, Me.ChangeCLIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeCLIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeCLIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeCLIDCompleted(Me, New ChangeCLIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetRTNo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRTNo(ByVal OracleLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("GetRTNo", New Object() {OracleLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRTNoAsync(ByVal OracleLoginData As ERPLogin)
            Me.GetRTNoAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRTNoAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.GetRTNoOperationCompleted Is Nothing) Then
                Me.GetRTNoOperationCompleted = AddressOf Me.OnGetRTNoOperationCompleted
            End If
            Me.InvokeAsync("GetRTNo", New Object() {OracleLoginData}, Me.GetRTNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRTNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRTNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRTNoCompleted(Me, New GetRTNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadUserData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadUserData(ByVal UserID As String, ByVal User As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadUserData", New Object() {UserID, User})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadUserDataAsync(ByVal UserID As String, ByVal User As String)
            Me.ReadUserDataAsync(UserID, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadUserDataAsync(ByVal UserID As String, ByVal User As String, ByVal userState As Object)
            If (Me.ReadUserDataOperationCompleted Is Nothing) Then
                Me.ReadUserDataOperationCompleted = AddressOf Me.OnReadUserDataOperationCompleted
            End If
            Me.InvokeAsync("ReadUserData", New Object() {UserID, User}, Me.ReadUserDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadUserDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadUserDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadUserDataCompleted(Me, New ReadUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadRoleData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadRoleData(ByVal User As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadRoleData", New Object() {User})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadRoleDataAsync(ByVal User As String)
            Me.ReadRoleDataAsync(User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadRoleDataAsync(ByVal User As String, ByVal userState As Object)
            If (Me.ReadRoleDataOperationCompleted Is Nothing) Then
                Me.ReadRoleDataOperationCompleted = AddressOf Me.OnReadRoleDataOperationCompleted
            End If
            Me.InvokeAsync("ReadRoleData", New Object() {User}, Me.ReadRoleDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadRoleDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadRoleDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadRoleDataCompleted(Me, New ReadRoleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostUserData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostUserData(ByVal UserData As UserDetail, ByVal dsUser As System.Data.DataSet, ByVal LoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("PostUserData", New Object() {UserData, dsUser, LoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostUserDataAsync(ByVal UserData As UserDetail, ByVal dsUser As System.Data.DataSet, ByVal LoginData As ERPLogin)
            Me.PostUserDataAsync(UserData, dsUser, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostUserDataAsync(ByVal UserData As UserDetail, ByVal dsUser As System.Data.DataSet, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.PostUserDataOperationCompleted Is Nothing) Then
                Me.PostUserDataOperationCompleted = AddressOf Me.OnPostUserDataOperationCompleted
            End If
            Me.InvokeAsync("PostUserData", New Object() {UserData, dsUser, LoginData}, Me.PostUserDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostUserDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostUserDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostUserDataCompleted(Me, New PostUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PostRoleData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostRoleData(ByVal RoleData As RoleDetail, ByVal dsTrans As System.Data.DataSet, ByVal LoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("PostRoleData", New Object() {RoleData, dsTrans, LoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostRoleDataAsync(ByVal RoleData As RoleDetail, ByVal dsTrans As System.Data.DataSet, ByVal LoginData As ERPLogin)
            Me.PostRoleDataAsync(RoleData, dsTrans, LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostRoleDataAsync(ByVal RoleData As RoleDetail, ByVal dsTrans As System.Data.DataSet, ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.PostRoleDataOperationCompleted Is Nothing) Then
                Me.PostRoleDataOperationCompleted = AddressOf Me.OnPostRoleDataOperationCompleted
            End If
            Me.InvokeAsync("PostRoleData", New Object() {RoleData, dsTrans, LoginData}, Me.PostRoleDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostRoleDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostRoleDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostRoleDataCompleted(Me, New PostRoleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/InvMigCurrStatus", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InvMigCurrStatus() As Integer
            Dim results() As Object = Me.Invoke("InvMigCurrStatus", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InvMigCurrStatusAsync()
            Me.InvMigCurrStatusAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InvMigCurrStatusAsync(ByVal userState As Object)
            If (Me.InvMigCurrStatusOperationCompleted Is Nothing) Then
                Me.InvMigCurrStatusOperationCompleted = AddressOf Me.OnInvMigCurrStatusOperationCompleted
            End If
            Me.InvokeAsync("InvMigCurrStatus", New Object(-1) {}, Me.InvMigCurrStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnInvMigCurrStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.InvMigCurrStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InvMigCurrStatusCompleted(Me, New InvMigCurrStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/InvMigUserCheck", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InvMigUserCheck(ByVal UserName As String) As Boolean
            Dim results() As Object = Me.Invoke("InvMigUserCheck", New Object() {UserName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InvMigUserCheckAsync(ByVal UserName As String)
            Me.InvMigUserCheckAsync(UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InvMigUserCheckAsync(ByVal UserName As String, ByVal userState As Object)
            If (Me.InvMigUserCheckOperationCompleted Is Nothing) Then
                Me.InvMigUserCheckOperationCompleted = AddressOf Me.OnInvMigUserCheckOperationCompleted
            End If
            Me.InvokeAsync("InvMigUserCheck", New Object() {UserName}, Me.InvMigUserCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnInvMigUserCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.InvMigUserCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InvMigUserCheckCompleted(Me, New InvMigUserCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/InvMigrationStatus", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InvMigrationStatus(ByVal Status As String) As String
            Dim results() As Object = Me.Invoke("InvMigrationStatus", New Object() {Status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InvMigrationStatusAsync(ByVal Status As String)
            Me.InvMigrationStatusAsync(Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InvMigrationStatusAsync(ByVal Status As String, ByVal userState As Object)
            If (Me.InvMigrationStatusOperationCompleted Is Nothing) Then
                Me.InvMigrationStatusOperationCompleted = AddressOf Me.OnInvMigrationStatusOperationCompleted
            End If
            Me.InvokeAsync("InvMigrationStatus", New Object() {Status}, Me.InvMigrationStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnInvMigrationStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.InvMigrationStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InvMigrationStatusCompleted(Me, New InvMigrationStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetDaughterBoardSN", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDaughterBoardSN(ByVal intSN As String) As String()
            Dim results() As Object = Me.Invoke("GetDaughterBoardSN", New Object() {intSN})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDaughterBoardSNAsync(ByVal intSN As String)
            Me.GetDaughterBoardSNAsync(intSN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDaughterBoardSNAsync(ByVal intSN As String, ByVal userState As Object)
            If (Me.GetDaughterBoardSNOperationCompleted Is Nothing) Then
                Me.GetDaughterBoardSNOperationCompleted = AddressOf Me.OnGetDaughterBoardSNOperationCompleted
            End If
            Me.InvokeAsync("GetDaughterBoardSN", New Object() {intSN}, Me.GetDaughterBoardSNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDaughterBoardSNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDaughterBoardSNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDaughterBoardSNCompleted(Me, New GetDaughterBoardSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMailList", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMailList(ByVal eTraceModule As String) As String
            Dim results() As Object = Me.Invoke("GetMailList", New Object() {eTraceModule})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMailListAsync(ByVal eTraceModule As String)
            Me.GetMailListAsync(eTraceModule, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMailListAsync(ByVal eTraceModule As String, ByVal userState As Object)
            If (Me.GetMailListOperationCompleted Is Nothing) Then
                Me.GetMailListOperationCompleted = AddressOf Me.OnGetMailListOperationCompleted
            End If
            Me.InvokeAsync("GetMailList", New Object() {eTraceModule}, Me.GetMailListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMailListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMailListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMailListCompleted(Me, New GetMailListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AutoMail_SiplaceDataCheck", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AutoMail_SiplaceDataCheck() As Boolean
            Dim results() As Object = Me.Invoke("AutoMail_SiplaceDataCheck", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AutoMail_SiplaceDataCheckAsync()
            Me.AutoMail_SiplaceDataCheckAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AutoMail_SiplaceDataCheckAsync(ByVal userState As Object)
            If (Me.AutoMail_SiplaceDataCheckOperationCompleted Is Nothing) Then
                Me.AutoMail_SiplaceDataCheckOperationCompleted = AddressOf Me.OnAutoMail_SiplaceDataCheckOperationCompleted
            End If
            Me.InvokeAsync("AutoMail_SiplaceDataCheck", New Object(-1) {}, Me.AutoMail_SiplaceDataCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnAutoMail_SiplaceDataCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.AutoMail_SiplaceDataCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AutoMail_SiplaceDataCheckCompleted(Me, New AutoMail_SiplaceDataCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AutoSendMail_PastDueDJ", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AutoSendMail_PastDueDJ() As Boolean
            Dim results() As Object = Me.Invoke("AutoSendMail_PastDueDJ", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AutoSendMail_PastDueDJAsync()
            Me.AutoSendMail_PastDueDJAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AutoSendMail_PastDueDJAsync(ByVal userState As Object)
            If (Me.AutoSendMail_PastDueDJOperationCompleted Is Nothing) Then
                Me.AutoSendMail_PastDueDJOperationCompleted = AddressOf Me.OnAutoSendMail_PastDueDJOperationCompleted
            End If
            Me.InvokeAsync("AutoSendMail_PastDueDJ", New Object(-1) {}, Me.AutoSendMail_PastDueDJOperationCompleted, userState)
        End Sub
        
        Private Sub OnAutoSendMail_PastDueDJOperationCompleted(ByVal arg As Object)
            If (Not (Me.AutoSendMail_PastDueDJCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AutoSendMail_PastDueDJCompleted(Me, New AutoSendMail_PastDueDJCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DeleteMOAllocated", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteMOAllocated(ByVal delMOItemList As System.Data.DataSet, ByVal ERPLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DeleteMOAllocated", New Object() {delMOItemList, ERPLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteMOAllocatedAsync(ByVal delMOItemList As System.Data.DataSet, ByVal ERPLoginData As ERPLogin)
            Me.DeleteMOAllocatedAsync(delMOItemList, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMOAllocatedAsync(ByVal delMOItemList As System.Data.DataSet, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.DeleteMOAllocatedOperationCompleted Is Nothing) Then
                Me.DeleteMOAllocatedOperationCompleted = AddressOf Me.OnDeleteMOAllocatedOperationCompleted
            End If
            Me.InvokeAsync("DeleteMOAllocated", New Object() {delMOItemList, ERPLoginData}, Me.DeleteMOAllocatedOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteMOAllocatedOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteMOAllocatedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteMOAllocatedCompleted(Me, New DeleteMOAllocatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/RedoLedMOAllocated", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RedoLedMOAllocated(ByVal EventID As String, ByVal ERPLoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("RedoLedMOAllocated", New Object() {EventID, ERPLoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RedoLedMOAllocatedAsync(ByVal EventID As String, ByVal ERPLoginData As ERPLogin)
            Me.RedoLedMOAllocatedAsync(EventID, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RedoLedMOAllocatedAsync(ByVal EventID As String, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.RedoLedMOAllocatedOperationCompleted Is Nothing) Then
                Me.RedoLedMOAllocatedOperationCompleted = AddressOf Me.OnRedoLedMOAllocatedOperationCompleted
            End If
            Me.InvokeAsync("RedoLedMOAllocated", New Object() {EventID, ERPLoginData}, Me.RedoLedMOAllocatedOperationCompleted, userState)
        End Sub
        
        Private Sub OnRedoLedMOAllocatedOperationCompleted(ByVal arg As Object)
            If (Not (Me.RedoLedMOAllocatedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RedoLedMOAllocatedCompleted(Me, New RedoLedMOAllocatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidateUser", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateUser(ByVal Uname As String, ByVal UPwd As String, ByVal CheckPWD As Boolean) As String
            Dim results() As Object = Me.Invoke("ValidateUser", New Object() {Uname, UPwd, CheckPWD})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateUserAsync(ByVal Uname As String, ByVal UPwd As String, ByVal CheckPWD As Boolean)
            Me.ValidateUserAsync(Uname, UPwd, CheckPWD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateUserAsync(ByVal Uname As String, ByVal UPwd As String, ByVal CheckPWD As Boolean, ByVal userState As Object)
            If (Me.ValidateUserOperationCompleted Is Nothing) Then
                Me.ValidateUserOperationCompleted = AddressOf Me.OnValidateUserOperationCompleted
            End If
            Me.InvokeAsync("ValidateUser", New Object() {Uname, UPwd, CheckPWD}, Me.ValidateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateUserCompleted(Me, New ValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadBJData_to_Oracle", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadBJData_to_Oracle() As Boolean
            Dim results() As Object = Me.Invoke("UploadBJData_to_Oracle", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadBJData_to_OracleAsync()
            Me.UploadBJData_to_OracleAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadBJData_to_OracleAsync(ByVal userState As Object)
            If (Me.UploadBJData_to_OracleOperationCompleted Is Nothing) Then
                Me.UploadBJData_to_OracleOperationCompleted = AddressOf Me.OnUploadBJData_to_OracleOperationCompleted
            End If
            Me.InvokeAsync("UploadBJData_to_Oracle", New Object(-1) {}, Me.UploadBJData_to_OracleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadBJData_to_OracleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadBJData_to_OracleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadBJData_to_OracleCompleted(Me, New UploadBJData_to_OracleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadAutoEJIT_DJSum_to_Oracle", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadAutoEJIT_DJSum_to_Oracle() As Boolean
            Dim results() As Object = Me.Invoke("UploadAutoEJIT_DJSum_to_Oracle", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadAutoEJIT_DJSum_to_OracleAsync()
            Me.UploadAutoEJIT_DJSum_to_OracleAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadAutoEJIT_DJSum_to_OracleAsync(ByVal userState As Object)
            If (Me.UploadAutoEJIT_DJSum_to_OracleOperationCompleted Is Nothing) Then
                Me.UploadAutoEJIT_DJSum_to_OracleOperationCompleted = AddressOf Me.OnUploadAutoEJIT_DJSum_to_OracleOperationCompleted
            End If
            Me.InvokeAsync("UploadAutoEJIT_DJSum_to_Oracle", New Object(-1) {}, Me.UploadAutoEJIT_DJSum_to_OracleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadAutoEJIT_DJSum_to_OracleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadAutoEJIT_DJSum_to_OracleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadAutoEJIT_DJSum_to_OracleCompleted(Me, New UploadAutoEJIT_DJSum_to_OracleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/UploadAutoEJIT_DJList_to_Oracle", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadAutoEJIT_DJList_to_Oracle() As Boolean
            Dim results() As Object = Me.Invoke("UploadAutoEJIT_DJList_to_Oracle", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadAutoEJIT_DJList_to_OracleAsync()
            Me.UploadAutoEJIT_DJList_to_OracleAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadAutoEJIT_DJList_to_OracleAsync(ByVal userState As Object)
            If (Me.UploadAutoEJIT_DJList_to_OracleOperationCompleted Is Nothing) Then
                Me.UploadAutoEJIT_DJList_to_OracleOperationCompleted = AddressOf Me.OnUploadAutoEJIT_DJList_to_OracleOperationCompleted
            End If
            Me.InvokeAsync("UploadAutoEJIT_DJList_to_Oracle", New Object(-1) {}, Me.UploadAutoEJIT_DJList_to_OracleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadAutoEJIT_DJList_to_OracleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadAutoEJIT_DJList_to_OracleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadAutoEJIT_DJList_to_OracleCompleted(Me, New UploadAutoEJIT_DJList_to_OracleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AutoCreatedEJIT", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AutoCreatedEJIT() As Boolean
            Dim results() As Object = Me.Invoke("AutoCreatedEJIT", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AutoCreatedEJITAsync()
            Me.AutoCreatedEJITAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AutoCreatedEJITAsync(ByVal userState As Object)
            If (Me.AutoCreatedEJITOperationCompleted Is Nothing) Then
                Me.AutoCreatedEJITOperationCompleted = AddressOf Me.OnAutoCreatedEJITOperationCompleted
            End If
            Me.InvokeAsync("AutoCreatedEJIT", New Object(-1) {}, Me.AutoCreatedEJITOperationCompleted, userState)
        End Sub
        
        Private Sub OnAutoCreatedEJITOperationCompleted(ByVal arg As Object)
            If (Not (Me.AutoCreatedEJITCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AutoCreatedEJITCompleted(Me, New AutoCreatedEJITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/AutoCreatedEJIT_ByDay", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AutoCreatedEJIT_ByDay() As Boolean
            Dim results() As Object = Me.Invoke("AutoCreatedEJIT_ByDay", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AutoCreatedEJIT_ByDayAsync()
            Me.AutoCreatedEJIT_ByDayAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AutoCreatedEJIT_ByDayAsync(ByVal userState As Object)
            If (Me.AutoCreatedEJIT_ByDayOperationCompleted Is Nothing) Then
                Me.AutoCreatedEJIT_ByDayOperationCompleted = AddressOf Me.OnAutoCreatedEJIT_ByDayOperationCompleted
            End If
            Me.InvokeAsync("AutoCreatedEJIT_ByDay", New Object(-1) {}, Me.AutoCreatedEJIT_ByDayOperationCompleted, userState)
        End Sub
        
        Private Sub OnAutoCreatedEJIT_ByDayOperationCompleted(ByVal arg As Object)
            If (Not (Me.AutoCreatedEJIT_ByDayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AutoCreatedEJIT_ByDayCompleted(Me, New AutoCreatedEJIT_ByDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ErrorLogging", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ErrorLogging(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ErrorLogging", New Object() {ModuleName, User, ErrMsg})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ErrorLoggingAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String)
            Me.ErrorLoggingAsync(ModuleName, User, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ErrorLoggingAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ErrorLoggingOperationCompleted Is Nothing) Then
                Me.ErrorLoggingOperationCompleted = AddressOf Me.OnErrorLoggingOperationCompleted
            End If
            Me.InvokeAsync("ErrorLogging", New Object() {ModuleName, User, ErrMsg}, Me.ErrorLoggingOperationCompleted, userState)
        End Sub
        
        Private Sub OnErrorLoggingOperationCompleted(ByVal arg As Object)
            If (Not (Me.ErrorLoggingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ErrorLoggingCompleted(Me, New ErrorLoggingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ErrorLog", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ErrorLog(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal Category As String) As Boolean
            Dim results() As Object = Me.Invoke("ErrorLog", New Object() {ModuleName, User, ErrMsg, Category})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ErrorLogAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal Category As String)
            Me.ErrorLogAsync(ModuleName, User, ErrMsg, Category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ErrorLogAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal Category As String, ByVal userState As Object)
            If (Me.ErrorLogOperationCompleted Is Nothing) Then
                Me.ErrorLogOperationCompleted = AddressOf Me.OnErrorLogOperationCompleted
            End If
            Me.InvokeAsync("ErrorLog", New Object() {ModuleName, User, ErrMsg, Category}, Me.ErrorLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnErrorLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.ErrorLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ErrorLogCompleted(Me, New ErrorLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ErrorLogOTO", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ErrorLogOTO(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal Category As String) As Boolean
            Dim results() As Object = Me.Invoke("ErrorLogOTO", New Object() {ModuleName, User, ErrMsg, Category})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ErrorLogOTOAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal Category As String)
            Me.ErrorLogOTOAsync(ModuleName, User, ErrMsg, Category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ErrorLogOTOAsync(ByVal ModuleName As String, ByVal User As String, ByVal ErrMsg As String, ByVal Category As String, ByVal userState As Object)
            If (Me.ErrorLogOTOOperationCompleted Is Nothing) Then
                Me.ErrorLogOTOOperationCompleted = AddressOf Me.OnErrorLogOTOOperationCompleted
            End If
            Me.InvokeAsync("ErrorLogOTO", New Object() {ModuleName, User, ErrMsg, Category}, Me.ErrorLogOTOOperationCompleted, userState)
        End Sub
        
        Private Sub OnErrorLogOTOOperationCompleted(ByVal arg As Object)
            If (Not (Me.ErrorLogOTOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ErrorLogOTOCompleted(Me, New ErrorLogOTOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetServerDate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServerDate() As Date
            Dim results() As Object = Me.Invoke("GetServerDate", New Object(-1) {})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetServerDateAsync()
            Me.GetServerDateAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetServerDateAsync(ByVal userState As Object)
            If (Me.GetServerDateOperationCompleted Is Nothing) Then
                Me.GetServerDateOperationCompleted = AddressOf Me.OnGetServerDateOperationCompleted
            End If
            Me.InvokeAsync("GetServerDate", New Object(-1) {}, Me.GetServerDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetServerDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetServerDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetServerDateCompleted(Me, New GetServerDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetConfigValue", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConfigValue(ByVal ConfigID As String) As String
            Dim results() As Object = Me.Invoke("GetConfigValue", New Object() {ConfigID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConfigValueAsync(ByVal ConfigID As String)
            Me.GetConfigValueAsync(ConfigID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConfigValueAsync(ByVal ConfigID As String, ByVal userState As Object)
            If (Me.GetConfigValueOperationCompleted Is Nothing) Then
                Me.GetConfigValueOperationCompleted = AddressOf Me.OnGetConfigValueOperationCompleted
            End If
            Me.InvokeAsync("GetConfigValue", New Object() {ConfigID}, Me.GetConfigValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConfigValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConfigValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConfigValueCompleted(Me, New GetConfigValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrinterCheck", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrinterCheck(ByVal User As String, ByVal PrinterID As String, ByVal OutputType As String) As String
            Dim results() As Object = Me.Invoke("PrinterCheck", New Object() {User, PrinterID, OutputType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrinterCheckAsync(ByVal User As String, ByVal PrinterID As String, ByVal OutputType As String)
            Me.PrinterCheckAsync(User, PrinterID, OutputType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrinterCheckAsync(ByVal User As String, ByVal PrinterID As String, ByVal OutputType As String, ByVal userState As Object)
            If (Me.PrinterCheckOperationCompleted Is Nothing) Then
                Me.PrinterCheckOperationCompleted = AddressOf Me.OnPrinterCheckOperationCompleted
            End If
            Me.InvokeAsync("PrinterCheck", New Object() {User, PrinterID, OutputType}, Me.PrinterCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrinterCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrinterCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrinterCheckCompleted(Me, New PrinterCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LoginCheck", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoginCheck(ByVal ERPLoginData As ERPLogin) As UserData
            Dim results() As Object = Me.Invoke("LoginCheck", New Object() {ERPLoginData})
            Return CType(results(0),UserData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginCheckAsync(ByVal ERPLoginData As ERPLogin)
            Me.LoginCheckAsync(ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginCheckAsync(ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.LoginCheckOperationCompleted Is Nothing) Then
                Me.LoginCheckOperationCompleted = AddressOf Me.OnLoginCheckOperationCompleted
            End If
            Me.InvokeAsync("LoginCheck", New Object() {ERPLoginData}, Me.LoginCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCheckCompleted(Me, New LoginCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ChangePassword", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangePassword(ByVal LoginData As ERPLogin) As String
            Dim results() As Object = Me.Invoke("ChangePassword", New Object() {LoginData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal LoginData As ERPLogin)
            Me.ChangePasswordAsync(LoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal LoginData As ERPLogin, ByVal userState As Object)
            If (Me.ChangePasswordOperationCompleted Is Nothing) Then
                Me.ChangePasswordOperationCompleted = AddressOf Me.OnChangePasswordOperationCompleted
            End If
            Me.InvokeAsync("ChangePassword", New Object() {LoginData}, Me.ChangePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePasswordCompleted(Me, New ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidateItemRevision", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateItemRevision(ByVal OracleLoginData As ERPLogin, ByVal Item As String, ByVal Revision As String, ByVal MoveType As String) As ItemRevList
            Dim results() As Object = Me.Invoke("ValidateItemRevision", New Object() {OracleLoginData, Item, Revision, MoveType})
            Return CType(results(0),ItemRevList)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateItemRevisionAsync(ByVal OracleLoginData As ERPLogin, ByVal Item As String, ByVal Revision As String, ByVal MoveType As String)
            Me.ValidateItemRevisionAsync(OracleLoginData, Item, Revision, MoveType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateItemRevisionAsync(ByVal OracleLoginData As ERPLogin, ByVal Item As String, ByVal Revision As String, ByVal MoveType As String, ByVal userState As Object)
            If (Me.ValidateItemRevisionOperationCompleted Is Nothing) Then
                Me.ValidateItemRevisionOperationCompleted = AddressOf Me.OnValidateItemRevisionOperationCompleted
            End If
            Me.InvokeAsync("ValidateItemRevision", New Object() {OracleLoginData, Item, Revision, MoveType}, Me.ValidateItemRevisionOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateItemRevisionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateItemRevisionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateItemRevisionCompleted(Me, New ValidateItemRevisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidateItemType", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateItemType(ByVal OracleLoginData As ERPLogin, ByVal Item As String, ByVal Revision As String, ByVal MoveType As String) As ItemType
            Dim results() As Object = Me.Invoke("ValidateItemType", New Object() {OracleLoginData, Item, Revision, MoveType})
            Return CType(results(0),ItemType)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateItemTypeAsync(ByVal OracleLoginData As ERPLogin, ByVal Item As String, ByVal Revision As String, ByVal MoveType As String)
            Me.ValidateItemTypeAsync(OracleLoginData, Item, Revision, MoveType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateItemTypeAsync(ByVal OracleLoginData As ERPLogin, ByVal Item As String, ByVal Revision As String, ByVal MoveType As String, ByVal userState As Object)
            If (Me.ValidateItemTypeOperationCompleted Is Nothing) Then
                Me.ValidateItemTypeOperationCompleted = AddressOf Me.OnValidateItemTypeOperationCompleted
            End If
            Me.InvokeAsync("ValidateItemType", New Object() {OracleLoginData, Item, Revision, MoveType}, Me.ValidateItemTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateItemTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateItemTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateItemTypeCompleted(Me, New ValidateItemTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidateSubLoc", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateSubLoc(ByVal LoginData As ERPLogin, ByVal SubInv As String, ByVal Locator As String) As String
            Dim results() As Object = Me.Invoke("ValidateSubLoc", New Object() {LoginData, SubInv, Locator})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateSubLocAsync(ByVal LoginData As ERPLogin, ByVal SubInv As String, ByVal Locator As String)
            Me.ValidateSubLocAsync(LoginData, SubInv, Locator, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateSubLocAsync(ByVal LoginData As ERPLogin, ByVal SubInv As String, ByVal Locator As String, ByVal userState As Object)
            If (Me.ValidateSubLocOperationCompleted Is Nothing) Then
                Me.ValidateSubLocOperationCompleted = AddressOf Me.OnValidateSubLocOperationCompleted
            End If
            Me.InvokeAsync("ValidateSubLoc", New Object() {LoginData, SubInv, Locator}, Me.ValidateSubLocOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateSubLocOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateSubLocCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateSubLocCompleted(Me, New ValidateSubLocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_LocatorSP", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_LocatorSP(ByVal LoginData As ERPLogin, ByVal SubInv As String, ByVal Locator As String) As String
            Dim results() As Object = Me.Invoke("Get_LocatorSP", New Object() {LoginData, SubInv, Locator})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_LocatorSPAsync(ByVal LoginData As ERPLogin, ByVal SubInv As String, ByVal Locator As String)
            Me.Get_LocatorSPAsync(LoginData, SubInv, Locator, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_LocatorSPAsync(ByVal LoginData As ERPLogin, ByVal SubInv As String, ByVal Locator As String, ByVal userState As Object)
            If (Me.Get_LocatorSPOperationCompleted Is Nothing) Then
                Me.Get_LocatorSPOperationCompleted = AddressOf Me.OnGet_LocatorSPOperationCompleted
            End If
            Me.InvokeAsync("Get_LocatorSP", New Object() {LoginData, SubInv, Locator}, Me.Get_LocatorSPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_LocatorSPOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_LocatorSPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_LocatorSPCompleted(Me, New Get_LocatorSPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SlotCheck", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SlotCheck(ByVal LoginData As ERPLogin, ByRef myCLIDSlot As CLIDSlot) As String
            Dim results() As Object = Me.Invoke("SlotCheck", New Object() {LoginData, myCLIDSlot})
            myCLIDSlot = CType(results(1),CLIDSlot)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SlotCheckAsync(ByVal LoginData As ERPLogin, ByVal myCLIDSlot As CLIDSlot)
            Me.SlotCheckAsync(LoginData, myCLIDSlot, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SlotCheckAsync(ByVal LoginData As ERPLogin, ByVal myCLIDSlot As CLIDSlot, ByVal userState As Object)
            If (Me.SlotCheckOperationCompleted Is Nothing) Then
                Me.SlotCheckOperationCompleted = AddressOf Me.OnSlotCheckOperationCompleted
            End If
            Me.InvokeAsync("SlotCheck", New Object() {LoginData, myCLIDSlot}, Me.SlotCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnSlotCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.SlotCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SlotCheckCompleted(Me, New SlotCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SlotLightOn", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SlotLightOn(ByVal SlotLists As String, ByVal LightOn As Boolean, ByVal User As String) As Boolean
            Dim results() As Object = Me.Invoke("SlotLightOn", New Object() {SlotLists, LightOn, User})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SlotLightOnAsync(ByVal SlotLists As String, ByVal LightOn As Boolean, ByVal User As String)
            Me.SlotLightOnAsync(SlotLists, LightOn, User, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SlotLightOnAsync(ByVal SlotLists As String, ByVal LightOn As Boolean, ByVal User As String, ByVal userState As Object)
            If (Me.SlotLightOnOperationCompleted Is Nothing) Then
                Me.SlotLightOnOperationCompleted = AddressOf Me.OnSlotLightOnOperationCompleted
            End If
            Me.InvokeAsync("SlotLightOn", New Object() {SlotLists, LightOn, User}, Me.SlotLightOnOperationCompleted, userState)
        End Sub
        
        Private Sub OnSlotLightOnOperationCompleted(ByVal arg As Object)
            If (Not (Me.SlotLightOnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SlotLightOnCompleted(Me, New SlotLightOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/DockSlotLightOn", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DockSlotLightOn(ByVal SlotLists As String, ByVal LightOn As Boolean, ByVal User As String, ByVal Interval As Integer) As Boolean
            Dim results() As Object = Me.Invoke("DockSlotLightOn", New Object() {SlotLists, LightOn, User, Interval})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DockSlotLightOnAsync(ByVal SlotLists As String, ByVal LightOn As Boolean, ByVal User As String, ByVal Interval As Integer)
            Me.DockSlotLightOnAsync(SlotLists, LightOn, User, Interval, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DockSlotLightOnAsync(ByVal SlotLists As String, ByVal LightOn As Boolean, ByVal User As String, ByVal Interval As Integer, ByVal userState As Object)
            If (Me.DockSlotLightOnOperationCompleted Is Nothing) Then
                Me.DockSlotLightOnOperationCompleted = AddressOf Me.OnDockSlotLightOnOperationCompleted
            End If
            Me.InvokeAsync("DockSlotLightOn", New Object() {SlotLists, LightOn, User, Interval}, Me.DockSlotLightOnOperationCompleted, userState)
        End Sub
        
        Private Sub OnDockSlotLightOnOperationCompleted(ByVal arg As Object)
            If (Not (Me.DockSlotLightOnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DockSlotLightOnCompleted(Me, New DockSlotLightOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_ReasonCode", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_ReasonCode(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_ReasonCode", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_ReasonCodeAsync(ByVal OracleLoginData As ERPLogin)
            Me.Get_ReasonCodeAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_ReasonCodeAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_ReasonCodeOperationCompleted Is Nothing) Then
                Me.Get_ReasonCodeOperationCompleted = AddressOf Me.OnGet_ReasonCodeOperationCompleted
            End If
            Me.InvokeAsync("Get_ReasonCode", New Object() {OracleLoginData}, Me.Get_ReasonCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_ReasonCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_ReasonCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_ReasonCodeCompleted(Me, New Get_ReasonCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_SubinvLoc", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_SubinvLoc(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_SubinvLoc", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_SubinvLocAsync(ByVal OracleLoginData As ERPLogin)
            Me.Get_SubinvLocAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_SubinvLocAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_SubinvLocOperationCompleted Is Nothing) Then
                Me.Get_SubinvLocOperationCompleted = AddressOf Me.OnGet_SubinvLocOperationCompleted
            End If
            Me.InvokeAsync("Get_SubinvLoc", New Object() {OracleLoginData}, Me.Get_SubinvLocOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_SubinvLocOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_SubinvLocCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_SubinvLocCompleted(Me, New Get_SubinvLocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/get_iteminfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function get_iteminfo(ByVal ItemList As System.Data.DataSet, ByVal oraclelogindata As ERPLogin, ByVal movetype As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("get_iteminfo", New Object() {ItemList, oraclelogindata, movetype})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub get_iteminfoAsync(ByVal ItemList As System.Data.DataSet, ByVal oraclelogindata As ERPLogin, ByVal movetype As String)
            Me.get_iteminfoAsync(ItemList, oraclelogindata, movetype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub get_iteminfoAsync(ByVal ItemList As System.Data.DataSet, ByVal oraclelogindata As ERPLogin, ByVal movetype As String, ByVal userState As Object)
            If (Me.get_iteminfoOperationCompleted Is Nothing) Then
                Me.get_iteminfoOperationCompleted = AddressOf Me.Onget_iteminfoOperationCompleted
            End If
            Me.InvokeAsync("get_iteminfo", New Object() {ItemList, oraclelogindata, movetype}, Me.get_iteminfoOperationCompleted, userState)
        End Sub
        
        Private Sub Onget_iteminfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.get_iteminfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent get_iteminfoCompleted(Me, New get_iteminfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/get_itemonhand", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function get_itemonhand(ByVal ItemList As System.Data.DataSet, ByVal oraclelogindata As ERPLogin, ByVal movetype As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("get_itemonhand", New Object() {ItemList, oraclelogindata, movetype})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub get_itemonhandAsync(ByVal ItemList As System.Data.DataSet, ByVal oraclelogindata As ERPLogin, ByVal movetype As String)
            Me.get_itemonhandAsync(ItemList, oraclelogindata, movetype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub get_itemonhandAsync(ByVal ItemList As System.Data.DataSet, ByVal oraclelogindata As ERPLogin, ByVal movetype As String, ByVal userState As Object)
            If (Me.get_itemonhandOperationCompleted Is Nothing) Then
                Me.get_itemonhandOperationCompleted = AddressOf Me.Onget_itemonhandOperationCompleted
            End If
            Me.InvokeAsync("get_itemonhand", New Object() {ItemList, oraclelogindata, movetype}, Me.get_itemonhandOperationCompleted, userState)
        End Sub
        
        Private Sub Onget_itemonhandOperationCompleted(ByVal arg As Object)
            If (Not (Me.get_itemonhandCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent get_itemonhandCompleted(Me, New get_itemonhandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_AccountAlias", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_AccountAlias(ByVal OracleLoginData As ERPLogin, ByVal Type As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_AccountAlias", New Object() {OracleLoginData, Type})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_AccountAliasAsync(ByVal OracleLoginData As ERPLogin, ByVal Type As String)
            Me.Get_AccountAliasAsync(OracleLoginData, Type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_AccountAliasAsync(ByVal OracleLoginData As ERPLogin, ByVal Type As String, ByVal userState As Object)
            If (Me.Get_AccountAliasOperationCompleted Is Nothing) Then
                Me.Get_AccountAliasOperationCompleted = AddressOf Me.OnGet_AccountAliasOperationCompleted
            End If
            Me.InvokeAsync("Get_AccountAlias", New Object() {OracleLoginData, Type}, Me.Get_AccountAliasOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_AccountAliasOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_AccountAliasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_AccountAliasCompleted(Me, New Get_AccountAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_TransactionTypes", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_TransactionTypes(ByVal OracleLoginData As ERPLogin) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_TransactionTypes", New Object() {OracleLoginData})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_TransactionTypesAsync(ByVal OracleLoginData As ERPLogin)
            Me.Get_TransactionTypesAsync(OracleLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_TransactionTypesAsync(ByVal OracleLoginData As ERPLogin, ByVal userState As Object)
            If (Me.Get_TransactionTypesOperationCompleted Is Nothing) Then
                Me.Get_TransactionTypesOperationCompleted = AddressOf Me.OnGet_TransactionTypesOperationCompleted
            End If
            Me.InvokeAsync("Get_TransactionTypes", New Object() {OracleLoginData}, Me.Get_TransactionTypesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_TransactionTypesOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_TransactionTypesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_TransactionTypesCompleted(Me, New Get_TransactionTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetScreenElements", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetScreenElements(ByVal GroupName As String, ByVal Lang As String, ByVal MessageClass As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetScreenElements", New Object() {GroupName, Lang, MessageClass})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetScreenElementsAsync(ByVal GroupName As String, ByVal Lang As String, ByVal MessageClass As String)
            Me.GetScreenElementsAsync(GroupName, Lang, MessageClass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetScreenElementsAsync(ByVal GroupName As String, ByVal Lang As String, ByVal MessageClass As String, ByVal userState As Object)
            If (Me.GetScreenElementsOperationCompleted Is Nothing) Then
                Me.GetScreenElementsOperationCompleted = AddressOf Me.OnGetScreenElementsOperationCompleted
            End If
            Me.InvokeAsync("GetScreenElements", New Object() {GroupName, Lang, MessageClass}, Me.GetScreenElementsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetScreenElementsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetScreenElementsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetScreenElementsCompleted(Me, New GetScreenElementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintMatlLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintMatlLabel() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintMatlLabel", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintMatlLabelAsync()
            Me.OpenPrintMatlLabelAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintMatlLabelAsync(ByVal userState As Object)
            If (Me.OpenPrintMatlLabelOperationCompleted Is Nothing) Then
                Me.OpenPrintMatlLabelOperationCompleted = AddressOf Me.OnOpenPrintMatlLabelOperationCompleted
            End If
            Me.InvokeAsync("OpenPrintMatlLabel", New Object(-1) {}, Me.OpenPrintMatlLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintMatlLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintMatlLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintMatlLabelCompleted(Me, New OpenPrintMatlLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintNoMatlLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintNoMatlLabel() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintNoMatlLabel", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintNoMatlLabelAsync()
            Me.OpenPrintNoMatlLabelAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintNoMatlLabelAsync(ByVal userState As Object)
            If (Me.OpenPrintNoMatlLabelOperationCompleted Is Nothing) Then
                Me.OpenPrintNoMatlLabelOperationCompleted = AddressOf Me.OnOpenPrintNoMatlLabelOperationCompleted
            End If
            Me.InvokeAsync("OpenPrintNoMatlLabel", New Object(-1) {}, Me.OpenPrintNoMatlLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintNoMatlLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintNoMatlLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintNoMatlLabelCompleted(Me, New OpenPrintNoMatlLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/WritePrintLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WritePrintLabel(ByVal LabelSeqNo As String, ByVal LabelFile As String, ByVal LabelPrinter As String, ByVal Content As String) As Object
            Dim results() As Object = Me.Invoke("WritePrintLabel", New Object() {LabelSeqNo, LabelFile, LabelPrinter, Content})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WritePrintLabelAsync(ByVal LabelSeqNo As String, ByVal LabelFile As String, ByVal LabelPrinter As String, ByVal Content As String)
            Me.WritePrintLabelAsync(LabelSeqNo, LabelFile, LabelPrinter, Content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WritePrintLabelAsync(ByVal LabelSeqNo As String, ByVal LabelFile As String, ByVal LabelPrinter As String, ByVal Content As String, ByVal userState As Object)
            If (Me.WritePrintLabelOperationCompleted Is Nothing) Then
                Me.WritePrintLabelOperationCompleted = AddressOf Me.OnWritePrintLabelOperationCompleted
            End If
            Me.InvokeAsync("WritePrintLabel", New Object() {LabelSeqNo, LabelFile, LabelPrinter, Content}, Me.WritePrintLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnWritePrintLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.WritePrintLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WritePrintLabelCompleted(Me, New WritePrintLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabel() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabel", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelAsync()
            Me.OpenPrintLabelAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelAsync(ByVal userState As Object)
            If (Me.OpenPrintLabelOperationCompleted Is Nothing) Then
                Me.OpenPrintLabelOperationCompleted = AddressOf Me.OnOpenPrintLabelOperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabel", New Object(-1) {}, Me.OpenPrintLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabelCompleted(Me, New OpenPrintLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabel_Production", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabel_Production() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabel_Production", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabel_ProductionAsync()
            Me.OpenPrintLabel_ProductionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabel_ProductionAsync(ByVal userState As Object)
            If (Me.OpenPrintLabel_ProductionOperationCompleted Is Nothing) Then
                Me.OpenPrintLabel_ProductionOperationCompleted = AddressOf Me.OnOpenPrintLabel_ProductionOperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabel_Production", New Object(-1) {}, Me.OpenPrintLabel_ProductionOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabel_ProductionOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabel_ProductionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabel_ProductionCompleted(Me, New OpenPrintLabel_ProductionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabel_LAG", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabel_LAG() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabel_LAG", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabel_LAGAsync()
            Me.OpenPrintLabel_LAGAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabel_LAGAsync(ByVal userState As Object)
            If (Me.OpenPrintLabel_LAGOperationCompleted Is Nothing) Then
                Me.OpenPrintLabel_LAGOperationCompleted = AddressOf Me.OnOpenPrintLabel_LAGOperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabel_LAG", New Object(-1) {}, Me.OpenPrintLabel_LAGOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabel_LAGOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabel_LAGCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabel_LAGCompleted(Me, New OpenPrintLabel_LAGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabel_CVT", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabel_CVT() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabel_CVT", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabel_CVTAsync()
            Me.OpenPrintLabel_CVTAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabel_CVTAsync(ByVal userState As Object)
            If (Me.OpenPrintLabel_CVTOperationCompleted Is Nothing) Then
                Me.OpenPrintLabel_CVTOperationCompleted = AddressOf Me.OnOpenPrintLabel_CVTOperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabel_CVT", New Object(-1) {}, Me.OpenPrintLabel_CVTOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabel_CVTOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabel_CVTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabel_CVTCompleted(Me, New OpenPrintLabel_CVTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabelForApps", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabelForApps() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabelForApps", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForAppsAsync()
            Me.OpenPrintLabelForAppsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForAppsAsync(ByVal userState As Object)
            If (Me.OpenPrintLabelForAppsOperationCompleted Is Nothing) Then
                Me.OpenPrintLabelForAppsOperationCompleted = AddressOf Me.OnOpenPrintLabelForAppsOperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabelForApps", New Object(-1) {}, Me.OpenPrintLabelForAppsOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabelForAppsOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabelForAppsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabelForAppsCompleted(Me, New OpenPrintLabelForAppsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabelForEtrace2", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabelForEtrace2() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabelForEtrace2", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForEtrace2Async()
            Me.OpenPrintLabelForEtrace2Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForEtrace2Async(ByVal userState As Object)
            If (Me.OpenPrintLabelForEtrace2OperationCompleted Is Nothing) Then
                Me.OpenPrintLabelForEtrace2OperationCompleted = AddressOf Me.OnOpenPrintLabelForEtrace2OperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabelForEtrace2", New Object(-1) {}, Me.OpenPrintLabelForEtrace2OperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabelForEtrace2OperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabelForEtrace2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabelForEtrace2Completed(Me, New OpenPrintLabelForEtrace2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabelForPrtSvr", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabelForPrtSvr() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabelForPrtSvr", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForPrtSvrAsync()
            Me.OpenPrintLabelForPrtSvrAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForPrtSvrAsync(ByVal userState As Object)
            If (Me.OpenPrintLabelForPrtSvrOperationCompleted Is Nothing) Then
                Me.OpenPrintLabelForPrtSvrOperationCompleted = AddressOf Me.OnOpenPrintLabelForPrtSvrOperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabelForPrtSvr", New Object(-1) {}, Me.OpenPrintLabelForPrtSvrOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabelForPrtSvrOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabelForPrtSvrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabelForPrtSvrCompleted(Me, New OpenPrintLabelForPrtSvrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabelForTemp01", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabelForTemp01() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabelForTemp01", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForTemp01Async()
            Me.OpenPrintLabelForTemp01Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForTemp01Async(ByVal userState As Object)
            If (Me.OpenPrintLabelForTemp01OperationCompleted Is Nothing) Then
                Me.OpenPrintLabelForTemp01OperationCompleted = AddressOf Me.OnOpenPrintLabelForTemp01OperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabelForTemp01", New Object(-1) {}, Me.OpenPrintLabelForTemp01OperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabelForTemp01OperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabelForTemp01CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabelForTemp01Completed(Me, New OpenPrintLabelForTemp01CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabelForTemp02", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabelForTemp02() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabelForTemp02", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForTemp02Async()
            Me.OpenPrintLabelForTemp02Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForTemp02Async(ByVal userState As Object)
            If (Me.OpenPrintLabelForTemp02OperationCompleted Is Nothing) Then
                Me.OpenPrintLabelForTemp02OperationCompleted = AddressOf Me.OnOpenPrintLabelForTemp02OperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabelForTemp02", New Object(-1) {}, Me.OpenPrintLabelForTemp02OperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabelForTemp02OperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabelForTemp02CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabelForTemp02Completed(Me, New OpenPrintLabelForTemp02CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabelForTemp03", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabelForTemp03() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabelForTemp03", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForTemp03Async()
            Me.OpenPrintLabelForTemp03Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForTemp03Async(ByVal userState As Object)
            If (Me.OpenPrintLabelForTemp03OperationCompleted Is Nothing) Then
                Me.OpenPrintLabelForTemp03OperationCompleted = AddressOf Me.OnOpenPrintLabelForTemp03OperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabelForTemp03", New Object(-1) {}, Me.OpenPrintLabelForTemp03OperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabelForTemp03OperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabelForTemp03CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabelForTemp03Completed(Me, New OpenPrintLabelForTemp03CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabelForTemp04", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabelForTemp04() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabelForTemp04", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForTemp04Async()
            Me.OpenPrintLabelForTemp04Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForTemp04Async(ByVal userState As Object)
            If (Me.OpenPrintLabelForTemp04OperationCompleted Is Nothing) Then
                Me.OpenPrintLabelForTemp04OperationCompleted = AddressOf Me.OnOpenPrintLabelForTemp04OperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabelForTemp04", New Object(-1) {}, Me.OpenPrintLabelForTemp04OperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabelForTemp04OperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabelForTemp04CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabelForTemp04Completed(Me, New OpenPrintLabelForTemp04CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/OpenPrintLabelForTemp05", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenPrintLabelForTemp05() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("OpenPrintLabelForTemp05", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForTemp05Async()
            Me.OpenPrintLabelForTemp05Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenPrintLabelForTemp05Async(ByVal userState As Object)
            If (Me.OpenPrintLabelForTemp05OperationCompleted Is Nothing) Then
                Me.OpenPrintLabelForTemp05OperationCompleted = AddressOf Me.OnOpenPrintLabelForTemp05OperationCompleted
            End If
            Me.InvokeAsync("OpenPrintLabelForTemp05", New Object(-1) {}, Me.OpenPrintLabelForTemp05OperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenPrintLabelForTemp05OperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenPrintLabelForTemp05CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenPrintLabelForTemp05Completed(Me, New OpenPrintLabelForTemp05CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/updatePrintLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function updatePrintLabel(ByVal SeqNo As String, ByVal ErrMsg As String) As Object
            Dim results() As Object = Me.Invoke("updatePrintLabel", New Object() {SeqNo, ErrMsg})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updatePrintLabelAsync(ByVal SeqNo As String, ByVal ErrMsg As String)
            Me.updatePrintLabelAsync(SeqNo, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updatePrintLabelAsync(ByVal SeqNo As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.updatePrintLabelOperationCompleted Is Nothing) Then
                Me.updatePrintLabelOperationCompleted = AddressOf Me.OnupdatePrintLabelOperationCompleted
            End If
            Me.InvokeAsync("updatePrintLabel", New Object() {SeqNo, ErrMsg}, Me.updatePrintLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdatePrintLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.updatePrintLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updatePrintLabelCompleted(Me, New updatePrintLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintCLIDs", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintCLIDs(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintCLIDs", New Object() {CLIDs, Printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintCLIDsAsync(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String)
            Me.PrintCLIDsAsync(CLIDs, Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintCLIDsAsync(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String, ByVal userState As Object)
            If (Me.PrintCLIDsOperationCompleted Is Nothing) Then
                Me.PrintCLIDsOperationCompleted = AddressOf Me.OnPrintCLIDsOperationCompleted
            End If
            Me.InvokeAsync("PrintCLIDs", New Object() {CLIDs, Printer}, Me.PrintCLIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintCLIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintCLIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintCLIDsCompleted(Me, New PrintCLIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetProcessProperties", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProcessProperties(ByVal GroupName As String, ByVal Lang As String, ByVal TransactionID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProcessProperties", New Object() {GroupName, Lang, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProcessPropertiesAsync(ByVal GroupName As String, ByVal Lang As String, ByVal TransactionID As String)
            Me.GetProcessPropertiesAsync(GroupName, Lang, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProcessPropertiesAsync(ByVal GroupName As String, ByVal Lang As String, ByVal TransactionID As String, ByVal userState As Object)
            If (Me.GetProcessPropertiesOperationCompleted Is Nothing) Then
                Me.GetProcessPropertiesOperationCompleted = AddressOf Me.OnGetProcessPropertiesOperationCompleted
            End If
            Me.InvokeAsync("GetProcessProperties", New Object() {GroupName, Lang, TransactionID}, Me.GetProcessPropertiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProcessPropertiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProcessPropertiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProcessPropertiesCompleted(Me, New GetProcessPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetAccessCardUserInfo", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccessCardUserInfo(ByVal AccessCardID As String) As AccessCard
            Dim results() As Object = Me.Invoke("GetAccessCardUserInfo", New Object() {AccessCardID})
            Return CType(results(0),AccessCard)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccessCardUserInfoAsync(ByVal AccessCardID As String)
            Me.GetAccessCardUserInfoAsync(AccessCardID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccessCardUserInfoAsync(ByVal AccessCardID As String, ByVal userState As Object)
            If (Me.GetAccessCardUserInfoOperationCompleted Is Nothing) Then
                Me.GetAccessCardUserInfoOperationCompleted = AddressOf Me.OnGetAccessCardUserInfoOperationCompleted
            End If
            Me.InvokeAsync("GetAccessCardUserInfo", New Object() {AccessCardID}, Me.GetAccessCardUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccessCardUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccessCardUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccessCardUserInfoCompleted(Me, New GetAccessCardUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetMGTraceLevel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMGTraceLevel(ByVal MaterialNo As String) As String
            Dim results() As Object = Me.Invoke("GetMGTraceLevel", New Object() {MaterialNo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMGTraceLevelAsync(ByVal MaterialNo As String)
            Me.GetMGTraceLevelAsync(MaterialNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMGTraceLevelAsync(ByVal MaterialNo As String, ByVal userState As Object)
            If (Me.GetMGTraceLevelOperationCompleted Is Nothing) Then
                Me.GetMGTraceLevelOperationCompleted = AddressOf Me.OnGetMGTraceLevelOperationCompleted
            End If
            Me.InvokeAsync("GetMGTraceLevel", New Object() {MaterialNo}, Me.GetMGTraceLevelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMGTraceLevelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMGTraceLevelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMGTraceLevelCompleted(Me, New GetMGTraceLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetAML", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAML(ByVal ItemList() As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAML", New Object() {ItemList})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAMLAsync(ByVal ItemList() As String)
            Me.GetAMLAsync(ItemList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAMLAsync(ByVal ItemList() As String, ByVal userState As Object)
            If (Me.GetAMLOperationCompleted Is Nothing) Then
                Me.GetAMLOperationCompleted = AddressOf Me.OnGetAMLOperationCompleted
            End If
            Me.InvokeAsync("GetAML", New Object() {ItemList}, Me.GetAMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAMLCompleted(Me, New GetAMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetAMLData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAMLData(ByVal ItemList() As String, ByVal ModuleName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAMLData", New Object() {ItemList, ModuleName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAMLDataAsync(ByVal ItemList() As String, ByVal ModuleName As String)
            Me.GetAMLDataAsync(ItemList, ModuleName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAMLDataAsync(ByVal ItemList() As String, ByVal ModuleName As String, ByVal userState As Object)
            If (Me.GetAMLDataOperationCompleted Is Nothing) Then
                Me.GetAMLDataOperationCompleted = AddressOf Me.OnGetAMLDataOperationCompleted
            End If
            Me.InvokeAsync("GetAMLData", New Object() {ItemList, ModuleName}, Me.GetAMLDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAMLDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAMLDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAMLDataCompleted(Me, New GetAMLDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetOrgLists", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrgLists(ByVal eTraceModule As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOrgLists", New Object() {eTraceModule})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrgListsAsync(ByVal eTraceModule As String)
            Me.GetOrgListsAsync(eTraceModule, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrgListsAsync(ByVal eTraceModule As String, ByVal userState As Object)
            If (Me.GetOrgListsOperationCompleted Is Nothing) Then
                Me.GetOrgListsOperationCompleted = AddressOf Me.OnGetOrgListsOperationCompleted
            End If
            Me.InvokeAsync("GetOrgLists", New Object() {eTraceModule}, Me.GetOrgListsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrgListsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrgListsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrgListsCompleted(Me, New GetOrgListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetLoginData", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoginData(ByVal eTraceModule As String, ByVal TransactionID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLoginData", New Object() {eTraceModule, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoginDataAsync(ByVal eTraceModule As String, ByVal TransactionID As String)
            Me.GetLoginDataAsync(eTraceModule, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoginDataAsync(ByVal eTraceModule As String, ByVal TransactionID As String, ByVal userState As Object)
            If (Me.GetLoginDataOperationCompleted Is Nothing) Then
                Me.GetLoginDataOperationCompleted = AddressOf Me.OnGetLoginDataOperationCompleted
            End If
            Me.InvokeAsync("GetLoginData", New Object() {eTraceModule, TransactionID}, Me.GetLoginDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoginDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoginDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoginDataCompleted(Me, New GetLoginDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetHHVersion", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHHVersion(ByVal ConfigID As String) As String
            Dim results() As Object = Me.Invoke("GetHHVersion", New Object() {ConfigID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHHVersionAsync(ByVal ConfigID As String)
            Me.GetHHVersionAsync(ConfigID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHHVersionAsync(ByVal ConfigID As String, ByVal userState As Object)
            If (Me.GetHHVersionOperationCompleted Is Nothing) Then
                Me.GetHHVersionOperationCompleted = AddressOf Me.OnGetHHVersionOperationCompleted
            End If
            Me.InvokeAsync("GetHHVersion", New Object() {ConfigID}, Me.GetHHVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHHVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHHVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHHVersionCompleted(Me, New GetHHVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ClearBoxID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClearBoxID(ByVal BoxID As String, ByVal ERPLoginData As ERPLogin) As Boolean
            Dim results() As Object = Me.Invoke("ClearBoxID", New Object() {BoxID, ERPLoginData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClearBoxIDAsync(ByVal BoxID As String, ByVal ERPLoginData As ERPLogin)
            Me.ClearBoxIDAsync(BoxID, ERPLoginData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearBoxIDAsync(ByVal BoxID As String, ByVal ERPLoginData As ERPLogin, ByVal userState As Object)
            If (Me.ClearBoxIDOperationCompleted Is Nothing) Then
                Me.ClearBoxIDOperationCompleted = AddressOf Me.OnClearBoxIDOperationCompleted
            End If
            Me.InvokeAsync("ClearBoxID", New Object() {BoxID, ERPLoginData}, Me.ClearBoxIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearBoxIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearBoxIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearBoxIDCompleted(Me, New ClearBoxIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Get_Subinv_Restrict", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Subinv_Restrict(ByVal OracleLoginData As ERPLogin, ByVal TransType As String, ByVal AcctAliasName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Get_Subinv_Restrict", New Object() {OracleLoginData, TransType, AcctAliasName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Subinv_RestrictAsync(ByVal OracleLoginData As ERPLogin, ByVal TransType As String, ByVal AcctAliasName As String)
            Me.Get_Subinv_RestrictAsync(OracleLoginData, TransType, AcctAliasName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Subinv_RestrictAsync(ByVal OracleLoginData As ERPLogin, ByVal TransType As String, ByVal AcctAliasName As String, ByVal userState As Object)
            If (Me.Get_Subinv_RestrictOperationCompleted Is Nothing) Then
                Me.Get_Subinv_RestrictOperationCompleted = AddressOf Me.OnGet_Subinv_RestrictOperationCompleted
            End If
            Me.InvokeAsync("Get_Subinv_Restrict", New Object() {OracleLoginData, TransType, AcctAliasName}, Me.Get_Subinv_RestrictOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Subinv_RestrictOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Subinv_RestrictCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Subinv_RestrictCompleted(Me, New Get_Subinv_RestrictCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCOOLists", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCOOLists() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCOOLists", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCOOListsAsync()
            Me.GetCOOListsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCOOListsAsync(ByVal userState As Object)
            If (Me.GetCOOListsOperationCompleted Is Nothing) Then
                Me.GetCOOListsOperationCompleted = AddressOf Me.OnGetCOOListsOperationCompleted
            End If
            Me.InvokeAsync("GetCOOLists", New Object(-1) {}, Me.GetCOOListsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCOOListsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCOOListsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCOOListsCompleted(Me, New GetCOOListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/Post_SubInvTransfer", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Post_SubInvTransfer(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Post_SubInvTransfer", New Object() {p_ds, OracleLoginData, MoveType, TransactionID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Post_SubInvTransferAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer)
            Me.Post_SubInvTransferAsync(p_ds, OracleLoginData, MoveType, TransactionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Post_SubInvTransferAsync(ByVal p_ds As System.Data.DataSet, ByVal OracleLoginData As ERPLogin, ByVal MoveType As String, ByVal TransactionID As Integer, ByVal userState As Object)
            If (Me.Post_SubInvTransferOperationCompleted Is Nothing) Then
                Me.Post_SubInvTransferOperationCompleted = AddressOf Me.OnPost_SubInvTransferOperationCompleted
            End If
            Me.InvokeAsync("Post_SubInvTransfer", New Object() {p_ds, OracleLoginData, MoveType, TransactionID}, Me.Post_SubInvTransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnPost_SubInvTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.Post_SubInvTransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Post_SubInvTransferCompleted(Me, New Post_SubInvTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetSysMessage", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysMessage(ByVal frequecy As String, ByVal device As String, ByVal eTraceModel As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSysMessage", New Object() {frequecy, device, eTraceModel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysMessageAsync(ByVal frequecy As String, ByVal device As String, ByVal eTraceModel As String)
            Me.GetSysMessageAsync(frequecy, device, eTraceModel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysMessageAsync(ByVal frequecy As String, ByVal device As String, ByVal eTraceModel As String, ByVal userState As Object)
            If (Me.GetSysMessageOperationCompleted Is Nothing) Then
                Me.GetSysMessageOperationCompleted = AddressOf Me.OnGetSysMessageOperationCompleted
            End If
            Me.InvokeAsync("GetSysMessage", New Object() {frequecy, device, eTraceModel}, Me.GetSysMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysMessageCompleted(Me, New GetSysMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ShowMessage", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShowMessage(ByVal MessageText As String) As String
            Dim results() As Object = Me.Invoke("ShowMessage", New Object() {MessageText})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShowMessageAsync(ByVal MessageText As String)
            Me.ShowMessageAsync(MessageText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShowMessageAsync(ByVal MessageText As String, ByVal userState As Object)
            If (Me.ShowMessageOperationCompleted Is Nothing) Then
                Me.ShowMessageOperationCompleted = AddressOf Me.OnShowMessageOperationCompleted
            End If
            Me.InvokeAsync("ShowMessage", New Object() {MessageText}, Me.ShowMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnShowMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShowMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShowMessageCompleted(Me, New ShowMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidatePallet", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidatePallet(ByVal LoginData As ERPLogin, ByVal PalletID As String, ByVal MatlStatus As String) As String
            Dim results() As Object = Me.Invoke("ValidatePallet", New Object() {LoginData, PalletID, MatlStatus})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidatePalletAsync(ByVal LoginData As ERPLogin, ByVal PalletID As String, ByVal MatlStatus As String)
            Me.ValidatePalletAsync(LoginData, PalletID, MatlStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidatePalletAsync(ByVal LoginData As ERPLogin, ByVal PalletID As String, ByVal MatlStatus As String, ByVal userState As Object)
            If (Me.ValidatePalletOperationCompleted Is Nothing) Then
                Me.ValidatePalletOperationCompleted = AddressOf Me.OnValidatePalletOperationCompleted
            End If
            Me.InvokeAsync("ValidatePallet", New Object() {LoginData, PalletID, MatlStatus}, Me.ValidatePalletOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidatePalletOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidatePalletCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidatePalletCompleted(Me, New ValidatePalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ValidateBerth", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateBerth(ByVal LoginData As ERPLogin, ByVal BerthID As String) As String
            Dim results() As Object = Me.Invoke("ValidateBerth", New Object() {LoginData, BerthID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateBerthAsync(ByVal LoginData As ERPLogin, ByVal BerthID As String)
            Me.ValidateBerthAsync(LoginData, BerthID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateBerthAsync(ByVal LoginData As ERPLogin, ByVal BerthID As String, ByVal userState As Object)
            If (Me.ValidateBerthOperationCompleted Is Nothing) Then
                Me.ValidateBerthOperationCompleted = AddressOf Me.OnValidateBerthOperationCompleted
            End If
            Me.InvokeAsync("ValidateBerth", New Object() {LoginData, BerthID}, Me.ValidateBerthOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateBerthOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateBerthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateBerthCompleted(Me, New ValidateBerthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintInterOrgCLIDs", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintInterOrgCLIDs(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintInterOrgCLIDs", New Object() {CLIDs, Printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintInterOrgCLIDsAsync(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String)
            Me.PrintInterOrgCLIDsAsync(CLIDs, Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintInterOrgCLIDsAsync(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String, ByVal userState As Object)
            If (Me.PrintInterOrgCLIDsOperationCompleted Is Nothing) Then
                Me.PrintInterOrgCLIDsOperationCompleted = AddressOf Me.OnPrintInterOrgCLIDsOperationCompleted
            End If
            Me.InvokeAsync("PrintInterOrgCLIDs", New Object() {CLIDs, Printer}, Me.PrintInterOrgCLIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintInterOrgCLIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintInterOrgCLIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintInterOrgCLIDsCompleted(Me, New PrintInterOrgCLIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintCH09Label", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintCH09Label(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintCH09Label", New Object() {CLIDs, Printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintCH09LabelAsync(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String)
            Me.PrintCH09LabelAsync(CLIDs, Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintCH09LabelAsync(ByVal CLIDs As System.Data.DataSet, ByVal Printer As String, ByVal userState As Object)
            If (Me.PrintCH09LabelOperationCompleted Is Nothing) Then
                Me.PrintCH09LabelOperationCompleted = AddressOf Me.OnPrintCH09LabelOperationCompleted
            End If
            Me.InvokeAsync("PrintCH09Label", New Object() {CLIDs, Printer}, Me.PrintCH09LabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintCH09LabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintCH09LabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintCH09LabelCompleted(Me, New PrintCH09LabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ConnectionTest", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConnectionTest(ByRef myCnTest As ConnTestData) As String
            Dim results() As Object = Me.Invoke("ConnectionTest", New Object() {myCnTest})
            myCnTest = CType(results(1),ConnTestData)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConnectionTestAsync(ByVal myCnTest As ConnTestData)
            Me.ConnectionTestAsync(myCnTest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConnectionTestAsync(ByVal myCnTest As ConnTestData, ByVal userState As Object)
            If (Me.ConnectionTestOperationCompleted Is Nothing) Then
                Me.ConnectionTestOperationCompleted = AddressOf Me.OnConnectionTestOperationCompleted
            End If
            Me.InvokeAsync("ConnectionTest", New Object() {myCnTest}, Me.ConnectionTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnConnectionTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConnectionTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConnectionTestCompleted(Me, New ConnectionTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadLabelIDs", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadLabelIDs(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal TransactionType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadLabelIDs", New Object() {LoginData, CLID, TransactionType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadLabelIDsAsync(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal TransactionType As String)
            Me.ReadLabelIDsAsync(LoginData, CLID, TransactionType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadLabelIDsAsync(ByVal LoginData As ERPLogin, ByVal CLID As String, ByVal TransactionType As String, ByVal userState As Object)
            If (Me.ReadLabelIDsOperationCompleted Is Nothing) Then
                Me.ReadLabelIDsOperationCompleted = AddressOf Me.OnReadLabelIDsOperationCompleted
            End If
            Me.InvokeAsync("ReadLabelIDs", New Object() {LoginData, CLID, TransactionType}, Me.ReadLabelIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadLabelIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadLabelIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadLabelIDsCompleted(Me, New ReadLabelIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/SplitLabelIDs", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SplitLabelIDs(ByVal LoginData As ERPLogin, ByVal LabelID As String, ByVal LabelStatus As String, ByVal Items As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SplitLabelIDs", New Object() {LoginData, LabelID, LabelStatus, Items})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SplitLabelIDsAsync(ByVal LoginData As ERPLogin, ByVal LabelID As String, ByVal LabelStatus As String, ByVal Items As System.Data.DataSet)
            Me.SplitLabelIDsAsync(LoginData, LabelID, LabelStatus, Items, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SplitLabelIDsAsync(ByVal LoginData As ERPLogin, ByVal LabelID As String, ByVal LabelStatus As String, ByVal Items As System.Data.DataSet, ByVal userState As Object)
            If (Me.SplitLabelIDsOperationCompleted Is Nothing) Then
                Me.SplitLabelIDsOperationCompleted = AddressOf Me.OnSplitLabelIDsOperationCompleted
            End If
            Me.InvokeAsync("SplitLabelIDs", New Object() {LoginData, LabelID, LabelStatus, Items}, Me.SplitLabelIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSplitLabelIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SplitLabelIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SplitLabelIDsCompleted(Me, New SplitLabelIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/LabelDataUpdate", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LabelDataUpdate(ByVal LoginData As ERPLogin, ByVal myCLID As LabelData) As String
            Dim results() As Object = Me.Invoke("LabelDataUpdate", New Object() {LoginData, myCLID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LabelDataUpdateAsync(ByVal LoginData As ERPLogin, ByVal myCLID As LabelData)
            Me.LabelDataUpdateAsync(LoginData, myCLID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LabelDataUpdateAsync(ByVal LoginData As ERPLogin, ByVal myCLID As LabelData, ByVal userState As Object)
            If (Me.LabelDataUpdateOperationCompleted Is Nothing) Then
                Me.LabelDataUpdateOperationCompleted = AddressOf Me.OnLabelDataUpdateOperationCompleted
            End If
            Me.InvokeAsync("LabelDataUpdate", New Object() {LoginData, myCLID}, Me.LabelDataUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnLabelDataUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.LabelDataUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LabelDataUpdateCompleted(Me, New LabelDataUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/ReadPalletID", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadPalletID(ByVal LoginData As ERPLogin, ByVal LabelID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReadPalletID", New Object() {LoginData, LabelID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadPalletIDAsync(ByVal LoginData As ERPLogin, ByVal LabelID As String)
            Me.ReadPalletIDAsync(LoginData, LabelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadPalletIDAsync(ByVal LoginData As ERPLogin, ByVal LabelID As String, ByVal userState As Object)
            If (Me.ReadPalletIDOperationCompleted Is Nothing) Then
                Me.ReadPalletIDOperationCompleted = AddressOf Me.OnReadPalletIDOperationCompleted
            End If
            Me.InvokeAsync("ReadPalletID", New Object() {LoginData, LabelID}, Me.ReadPalletIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadPalletIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadPalletIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadPalletIDCompleted(Me, New ReadPalletIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PalletManagement", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PalletManagement(ByVal LoginData As ERPLogin, ByVal myCLIDs As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("PalletManagement", New Object() {LoginData, myCLIDs})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PalletManagementAsync(ByVal LoginData As ERPLogin, ByVal myCLIDs As System.Data.DataSet)
            Me.PalletManagementAsync(LoginData, myCLIDs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PalletManagementAsync(ByVal LoginData As ERPLogin, ByVal myCLIDs As System.Data.DataSet, ByVal userState As Object)
            If (Me.PalletManagementOperationCompleted Is Nothing) Then
                Me.PalletManagementOperationCompleted = AddressOf Me.OnPalletManagementOperationCompleted
            End If
            Me.InvokeAsync("PalletManagement", New Object() {LoginData, myCLIDs}, Me.PalletManagementOperationCompleted, userState)
        End Sub
        
        Private Sub OnPalletManagementOperationCompleted(ByVal arg As Object)
            If (Not (Me.PalletManagementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PalletManagementCompleted(Me, New PalletManagementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/GetCartonLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCartonLabel(ByVal LoginData As ERPLogin, ByVal CartonID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCartonLabel", New Object() {LoginData, CartonID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCartonLabelAsync(ByVal LoginData As ERPLogin, ByVal CartonID As String)
            Me.GetCartonLabelAsync(LoginData, CartonID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCartonLabelAsync(ByVal LoginData As ERPLogin, ByVal CartonID As String, ByVal userState As Object)
            If (Me.GetCartonLabelOperationCompleted Is Nothing) Then
                Me.GetCartonLabelOperationCompleted = AddressOf Me.OnGetCartonLabelOperationCompleted
            End If
            Me.InvokeAsync("GetCartonLabel", New Object() {LoginData, CartonID}, Me.GetCartonLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCartonLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCartonLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCartonLabelCompleted(Me, New GetCartonLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eTraceOracleERP.org/PrintCartonLabel", RequestNamespace:="http://eTraceOracleERP.org/", ResponseNamespace:="http://eTraceOracleERP.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintCartonLabel(ByVal myCLID As System.Data.DataSet, ByVal Printer As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintCartonLabel", New Object() {myCLID, Printer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintCartonLabelAsync(ByVal myCLID As System.Data.DataSet, ByVal Printer As String)
            Me.PrintCartonLabelAsync(myCLID, Printer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintCartonLabelAsync(ByVal myCLID As System.Data.DataSet, ByVal Printer As String, ByVal userState As Object)
            If (Me.PrintCartonLabelOperationCompleted Is Nothing) Then
                Me.PrintCartonLabelOperationCompleted = AddressOf Me.OnPrintCartonLabelOperationCompleted
            End If
            Me.InvokeAsync("PrintCartonLabel", New Object() {myCLID, Printer}, Me.PrintCartonLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintCartonLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintCartonLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintCartonLabelCompleted(Me, New PrintCartonLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class SMTData
        
        Private userProdLineField As String
        
        Private orgCodeField As String
        
        Private eventIDField As String
        
        Private eventTypeField As String
        
        Private mONoField As String
        
        Private userField As String
        
        Private cLIDField As String
        
        Private actionTypeField As String
        
        Private checkDockField As String
        
        Private rtnMsgField As String
        
        Private dsItemField As System.Data.DataSet
        
        Private boxIDField As String
        
        '''<remarks/>
        Public Property UserProdLine() As String
            Get
                Return Me.userProdLineField
            End Get
            Set
                Me.userProdLineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrgCode() As String
            Get
                Return Me.orgCodeField
            End Get
            Set
                Me.orgCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EventID() As String
            Get
                Return Me.eventIDField
            End Get
            Set
                Me.eventIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EventType() As String
            Get
                Return Me.eventTypeField
            End Get
            Set
                Me.eventTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MONo() As String
            Get
                Return Me.mONoField
            End Get
            Set
                Me.mONoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CLID() As String
            Get
                Return Me.cLIDField
            End Get
            Set
                Me.cLIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ActionType() As String
            Get
                Return Me.actionTypeField
            End Get
            Set
                Me.actionTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CheckDock() As String
            Get
                Return Me.checkDockField
            End Get
            Set
                Me.checkDockField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RtnMsg() As String
            Get
                Return Me.rtnMsgField
            End Get
            Set
                Me.rtnMsgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsItem() As System.Data.DataSet
            Get
                Return Me.dsItemField
            End Get
            Set
                Me.dsItemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BoxID() As String
            Get
                Return Me.boxIDField
            End Get
            Set
                Me.boxIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ConnTestData
        
        Private connTestIDField As String
        
        Private clientProgramField As String
        
        Private versionField As String
        
        Private userIDField As String
        
        Private prodLineField As String
        
        Private timeofClientField As String
        
        Private timeofWSField As String
        
        Private timeLenClientField As Integer
        
        '''<remarks/>
        Public Property ConnTestID() As String
            Get
                Return Me.connTestIDField
            End Get
            Set
                Me.connTestIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ClientProgram() As String
            Get
                Return Me.clientProgramField
            End Get
            Set
                Me.clientProgramField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Version() As String
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProdLine() As String
            Get
                Return Me.prodLineField
            End Get
            Set
                Me.prodLineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TimeofClient() As String
            Get
                Return Me.timeofClientField
            End Get
            Set
                Me.timeofClientField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TimeofWS() As String
            Get
                Return Me.timeofWSField
            End Get
            Set
                Me.timeofWSField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TimeLenClient() As Integer
            Get
                Return Me.timeLenClientField
            End Get
            Set
                Me.timeLenClientField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class AccessCard
        
        Private accessCardIDField As String
        
        Private emplogeeIDField As String
        
        Private cHNNameField As String
        
        Private nameField As String
        
        Private deptField As String
        
        '''<remarks/>
        Public Property AccessCardID() As String
            Get
                Return Me.accessCardIDField
            End Get
            Set
                Me.accessCardIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmplogeeID() As String
            Get
                Return Me.emplogeeIDField
            End Get
            Set
                Me.emplogeeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CHNName() As String
            Get
                Return Me.cHNNameField
            End Get
            Set
                Me.cHNNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Dept() As String
            Get
                Return Me.deptField
            End Get
            Set
                Me.deptField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class CLIDSlot
        
        Private slotField As String
        
        Private orgCodeField As String
        
        Private subInvField As String
        
        Private locatorField As String
        
        Private slotTypeField As String
        
        Private slotCLIDField As String
        
        Private slotMsgField As String
        
        '''<remarks/>
        Public Property Slot() As String
            Get
                Return Me.slotField
            End Get
            Set
                Me.slotField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrgCode() As String
            Get
                Return Me.orgCodeField
            End Get
            Set
                Me.orgCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubInv() As String
            Get
                Return Me.subInvField
            End Get
            Set
                Me.subInvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Locator() As String
            Get
                Return Me.locatorField
            End Get
            Set
                Me.locatorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SlotType() As String
            Get
                Return Me.slotTypeField
            End Get
            Set
                Me.slotTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SlotCLID() As String
            Get
                Return Me.slotCLIDField
            End Get
            Set
                Me.slotCLIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SlotMsg() As String
            Get
                Return Me.slotMsgField
            End Get
            Set
                Me.slotMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ItemType
        
        Private typeField As String
        
        Private flagField As String
        
        Private msgField As String
        
        '''<remarks/>
        Public Property Type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Flag() As String
            Get
                Return Me.flagField
            End Get
            Set
                Me.flagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Msg() As String
            Get
                Return Me.msgField
            End Get
            Set
                Me.msgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ItemRevList
        
        Private flagField As String
        
        Private msgField As String
        
        Private revListField As String
        
        '''<remarks/>
        Public Property Flag() As String
            Get
                Return Me.flagField
            End Get
            Set
                Me.flagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Msg() As String
            Get
                Return Me.msgField
            End Get
            Set
                Me.msgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevList() As String
            Get
                Return Me.revListField
            End Get
            Set
                Me.revListField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class UserData
        
        Private userField As String
        
        Private firstNameField As String
        
        Private lastNameField As String
        
        Private orgIDField As String
        
        Private userIDField As String
        
        Private userTypeField As String
        
        Private userDeptField As String
        
        Private resetFlagField As Boolean
        
        Private appID_POField As String
        
        Private respID_POField As String
        
        Private appID_InvField As String
        
        Private respID_InvField As String
        
        Private appID_WIPField As String
        
        Private respID_WIPField As String
        
        Private appID_KBField As String
        
        Private respID_KBField As String
        
        Private printerField As String
        
        Private serverField As String
        
        Private propVersionField As String
        
        Private minClientVersionField As String
        
        Private recClientVersionField As String
        
        Private transactionIDField As System.Data.DataSet
        
        Private errorMsgField As String
        
        Private productionLineField As String
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrgID() As String
            Get
                Return Me.orgIDField
            End Get
            Set
                Me.orgIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserDept() As String
            Get
                Return Me.userDeptField
            End Get
            Set
                Me.userDeptField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ResetFlag() As Boolean
            Get
                Return Me.resetFlagField
            End Get
            Set
                Me.resetFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_PO() As String
            Get
                Return Me.appID_POField
            End Get
            Set
                Me.appID_POField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_PO() As String
            Get
                Return Me.respID_POField
            End Get
            Set
                Me.respID_POField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_Inv() As String
            Get
                Return Me.appID_InvField
            End Get
            Set
                Me.appID_InvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_Inv() As String
            Get
                Return Me.respID_InvField
            End Get
            Set
                Me.respID_InvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_WIP() As String
            Get
                Return Me.appID_WIPField
            End Get
            Set
                Me.appID_WIPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_WIP() As String
            Get
                Return Me.respID_WIPField
            End Get
            Set
                Me.respID_WIPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_KB() As String
            Get
                Return Me.appID_KBField
            End Get
            Set
                Me.appID_KBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_KB() As String
            Get
                Return Me.respID_KBField
            End Get
            Set
                Me.respID_KBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Printer() As String
            Get
                Return Me.printerField
            End Get
            Set
                Me.printerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Server() As String
            Get
                Return Me.serverField
            End Get
            Set
                Me.serverField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PropVersion() As String
            Get
                Return Me.propVersionField
            End Get
            Set
                Me.propVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MinClientVersion() As String
            Get
                Return Me.minClientVersionField
            End Get
            Set
                Me.minClientVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RecClientVersion() As String
            Get
                Return Me.recClientVersionField
            End Get
            Set
                Me.recClientVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TransactionID() As System.Data.DataSet
            Get
                Return Me.transactionIDField
            End Get
            Set
                Me.transactionIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorMsg() As String
            Get
                Return Me.errorMsgField
            End Get
            Set
                Me.errorMsgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProductionLine() As String
            Get
                Return Me.productionLineField
            End Get
            Set
                Me.productionLineField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class RoleDetail
        
        Private roleIDField As String
        
        Private roleDescField As String
        
        Private statusField As String
        
        Private changedByField As String
        
        Private changedOnField As String
        
        Private remarksField As String
        
        '''<remarks/>
        Public Property RoleID() As String
            Get
                Return Me.roleIDField
            End Get
            Set
                Me.roleIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RoleDesc() As String
            Get
                Return Me.roleDescField
            End Get
            Set
                Me.roleDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ChangedBy() As String
            Get
                Return Me.changedByField
            End Get
            Set
                Me.changedByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ChangedOn() As String
            Get
                Return Me.changedOnField
            End Get
            Set
                Me.changedOnField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Remarks() As String
            Get
                Return Me.remarksField
            End Get
            Set
                Me.remarksField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class UserDetail
        
        Private userIDField As String
        
        Private nameField As String
        
        Private divisionField As String
        
        Private deptField As String
        
        Private empIDField As String
        
        Private locationField As String
        
        Private phoneField As String
        
        Private userTypeField As String
        
        Private statusField As String
        
        Private userField As String
        
        Private lastLogonField As String
        
        Private remarksField As String
        
        Private resetPWDField As Boolean
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Division() As String
            Get
                Return Me.divisionField
            End Get
            Set
                Me.divisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Dept() As String
            Get
                Return Me.deptField
            End Get
            Set
                Me.deptField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmpID() As String
            Get
                Return Me.empIDField
            End Get
            Set
                Me.empIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Location() As String
            Get
                Return Me.locationField
            End Get
            Set
                Me.locationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Phone() As String
            Get
                Return Me.phoneField
            End Get
            Set
                Me.phoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastLogon() As String
            Get
                Return Me.lastLogonField
            End Get
            Set
                Me.lastLogonField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Remarks() As String
            Get
                Return Me.remarksField
            End Get
            Set
                Me.remarksField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ResetPWD() As Boolean
            Get
                Return Me.resetPWDField
            End Get
            Set
                Me.resetPWDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class HW_ExportDataInfo
        
        Private transSourceIDField As String
        
        Private barCodeField As String
        
        Private snNOField As String
        
        Private commentsField As String
        
        Private createdDateField As String
        
        Private createdByField As String
        
        Private updated_byField As String
        
        Private updated_dateField As String
        
        Private segment1Field As String
        
        Private segment2Field As String
        
        Private segment3Field As String
        
        Private segment4Field As String
        
        Private segment5Field As String
        
        Private segment6Field As String
        
        Private segment7Field As String
        
        Private segment8Field As String
        
        Private segment9Field As String
        
        Private errorCodeField As String
        
        Private errorMsgField As String
        
        '''<remarks/>
        Public Property TransSourceID() As String
            Get
                Return Me.transSourceIDField
            End Get
            Set
                Me.transSourceIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BarCode() As String
            Get
                Return Me.barCodeField
            End Get
            Set
                Me.barCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SnNO() As String
            Get
                Return Me.snNOField
            End Get
            Set
                Me.snNOField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Comments() As String
            Get
                Return Me.commentsField
            End Get
            Set
                Me.commentsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedDate() As String
            Get
                Return Me.createdDateField
            End Get
            Set
                Me.createdDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedBy() As String
            Get
                Return Me.createdByField
            End Get
            Set
                Me.createdByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Updated_by() As String
            Get
                Return Me.updated_byField
            End Get
            Set
                Me.updated_byField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Updated_date() As String
            Get
                Return Me.updated_dateField
            End Get
            Set
                Me.updated_dateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Segment1() As String
            Get
                Return Me.segment1Field
            End Get
            Set
                Me.segment1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Segment2() As String
            Get
                Return Me.segment2Field
            End Get
            Set
                Me.segment2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Segment3() As String
            Get
                Return Me.segment3Field
            End Get
            Set
                Me.segment3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Segment4() As String
            Get
                Return Me.segment4Field
            End Get
            Set
                Me.segment4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Segment5() As String
            Get
                Return Me.segment5Field
            End Get
            Set
                Me.segment5Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Segment6() As String
            Get
                Return Me.segment6Field
            End Get
            Set
                Me.segment6Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Segment7() As String
            Get
                Return Me.segment7Field
            End Get
            Set
                Me.segment7Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Segment8() As String
            Get
                Return Me.segment8Field
            End Get
            Set
                Me.segment8Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Segment9() As String
            Get
                Return Me.segment9Field
            End Get
            Set
                Me.segment9Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorCode() As String
            Get
                Return Me.errorCodeField
            End Get
            Set
                Me.errorCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorMsg() As String
            Get
                Return Me.errorMsgField
            End Get
            Set
                Me.errorMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class Result
        
        Private oracleDataField As System.Data.DataSet
        
        Private result_FlagField As String
        
        Private errMsgField As String
        
        '''<remarks/>
        Public Property OracleData() As System.Data.DataSet
            Get
                Return Me.oracleDataField
            End Get
            Set
                Me.oracleDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Result_Flag() As String
            Get
                Return Me.result_FlagField
            End Get
            Set
                Me.result_FlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrMsg() As String
            Get
                Return Me.errMsgField
            End Get
            Set
                Me.errMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class CLID_Info
        
        Private dsCLIDField As System.Data.DataSet
        
        Private box_PalletField As String
        
        Private errMsgField As String
        
        '''<remarks/>
        Public Property dsCLID() As System.Data.DataSet
            Get
                Return Me.dsCLIDField
            End Get
            Set
                Me.dsCLIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Box_Pallet() As String
            Get
                Return Me.box_PalletField
            End Get
            Set
                Me.box_PalletField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrMsg() As String
            Get
                Return Me.errMsgField
            End Get
            Set
                Me.errMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class IRData
        
        Private userField As String
        
        Private sourceOrgField As String
        
        Private destOrgField As String
        
        Private shipmentNoField As String
        
        Private iRRTNoField As String
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SourceOrg() As String
            Get
                Return Me.sourceOrgField
            End Get
            Set
                Me.sourceOrgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DestOrg() As String
            Get
                Return Me.destOrgField
            End Get
            Set
                Me.destOrgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShipmentNo() As String
            Get
                Return Me.shipmentNoField
            End Get
            Set
                Me.shipmentNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IRRTNo() As String
            Get
                Return Me.iRRTNoField
            End Get
            Set
                Me.iRRTNoField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class GRHeaderStructure
        
        Private typeField As Integer
        
        Private invoiceNoField As String
        
        Private billOfLadingField As String
        
        Private deliveryNoteField As String
        
        Private postDateField As Date
        
        Private headerTextField As String
        
        Private orderNoField As String
        
        Private orderItemField As String
        
        Private createdByField As String
        
        Private createdOnField As Date
        
        Private changedByField As String
        
        Private changedOnField As Date
        
        Private gRNoField As String
        
        Private pOCurrencyField As String
        
        Private orderTypeField As Integer
        
        Private allowAMLUpdateField As String
        
        Private cLIDFlagField As Boolean
        
        Private pOListsField As System.Data.DataSet
        
        '''<remarks/>
        Public Property Type() As Integer
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InvoiceNo() As String
            Get
                Return Me.invoiceNoField
            End Get
            Set
                Me.invoiceNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BillOfLading() As String
            Get
                Return Me.billOfLadingField
            End Get
            Set
                Me.billOfLadingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DeliveryNote() As String
            Get
                Return Me.deliveryNoteField
            End Get
            Set
                Me.deliveryNoteField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PostDate() As Date
            Get
                Return Me.postDateField
            End Get
            Set
                Me.postDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HeaderText() As String
            Get
                Return Me.headerTextField
            End Get
            Set
                Me.headerTextField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrderNo() As String
            Get
                Return Me.orderNoField
            End Get
            Set
                Me.orderNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrderItem() As String
            Get
                Return Me.orderItemField
            End Get
            Set
                Me.orderItemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedBy() As String
            Get
                Return Me.createdByField
            End Get
            Set
                Me.createdByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreatedOn() As Date
            Get
                Return Me.createdOnField
            End Get
            Set
                Me.createdOnField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ChangedBy() As String
            Get
                Return Me.changedByField
            End Get
            Set
                Me.changedByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ChangedOn() As Date
            Get
                Return Me.changedOnField
            End Get
            Set
                Me.changedOnField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GRNo() As String
            Get
                Return Me.gRNoField
            End Get
            Set
                Me.gRNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property POCurrency() As String
            Get
                Return Me.pOCurrencyField
            End Get
            Set
                Me.pOCurrencyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrderType() As Integer
            Get
                Return Me.orderTypeField
            End Get
            Set
                Me.orderTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AllowAMLUpdate() As String
            Get
                Return Me.allowAMLUpdateField
            End Get
            Set
                Me.allowAMLUpdateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CLIDFlag() As Boolean
            Get
                Return Me.cLIDFlagField
            End Get
            Set
                Me.cLIDFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property POLists() As System.Data.DataSet
            Get
                Return Me.pOListsField
            End Get
            Set
                Me.pOListsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class CreateGRResponse
        
        Private gRNoField As String
        
        Private postDateField As Date
        
        Private gRMessageField As String
        
        Private gRStatusField As String
        
        Private cLIDsField As System.Data.DataSet
        
        Private gRMsgField As System.Data.DataSet
        
        '''<remarks/>
        Public Property GRNo() As String
            Get
                Return Me.gRNoField
            End Get
            Set
                Me.gRNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PostDate() As Date
            Get
                Return Me.postDateField
            End Get
            Set
                Me.postDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GRMessage() As String
            Get
                Return Me.gRMessageField
            End Get
            Set
                Me.gRMessageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GRStatus() As String
            Get
                Return Me.gRStatusField
            End Get
            Set
                Me.gRStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CLIDs() As System.Data.DataSet
            Get
                Return Me.cLIDsField
            End Get
            Set
                Me.cLIDsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GRMsg() As System.Data.DataSet
            Get
                Return Me.gRMsgField
            End Get
            Set
                Me.gRMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class DashBoardData
        
        Private rTNoField As String
        
        Private materialField As String
        
        Private palletIDField As String
        
        Private statusField As String
        
        Private statusDescField As String
        
        Private berthIDField As String
        
        '''<remarks/>
        Public Property RTNo() As String
            Get
                Return Me.rTNoField
            End Get
            Set
                Me.rTNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Material() As String
            Get
                Return Me.materialField
            End Get
            Set
                Me.materialField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PalletID() As String
            Get
                Return Me.palletIDField
            End Get
            Set
                Me.palletIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusDesc() As String
            Get
                Return Me.statusDescField
            End Get
            Set
                Me.statusDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BerthID() As String
            Get
                Return Me.berthIDField
            End Get
            Set
                Me.berthIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ItemData
        
        Private materialField As String
        
        Private matlDescField As String
        
        Private matlRevField As String
        
        '''<remarks/>
        Public Property Material() As String
            Get
                Return Me.materialField
            End Get
            Set
                Me.materialField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MatlDesc() As String
            Get
                Return Me.matlDescField
            End Get
            Set
                Me.matlDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MatlRev() As String
            Get
                Return Me.matlRevField
            End Get
            Set
                Me.matlRevField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ConversionResult
        
        Private oracleFlagField As String
        
        Private cLIDFlagField As String
        
        Private printFlagField As String
        
        Private errorMsgField As String
        
        Private sLEDFlagField As String
        
        Private expDateField As String
        
        Private traceLevelField As String
        
        Private cLIDsField As System.Data.DataSet
        
        '''<remarks/>
        Public Property OracleFlag() As String
            Get
                Return Me.oracleFlagField
            End Get
            Set
                Me.oracleFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CLIDFlag() As String
            Get
                Return Me.cLIDFlagField
            End Get
            Set
                Me.cLIDFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PrintFlag() As String
            Get
                Return Me.printFlagField
            End Get
            Set
                Me.printFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorMsg() As String
            Get
                Return Me.errorMsgField
            End Get
            Set
                Me.errorMsgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SLEDFlag() As String
            Get
                Return Me.sLEDFlagField
            End Get
            Set
                Me.sLEDFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpDate() As String
            Get
                Return Me.expDateField
            End Get
            Set
                Me.expDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TraceLevel() As String
            Get
                Return Me.traceLevelField
            End Get
            Set
                Me.traceLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CLIDs() As System.Data.DataSet
            Get
                Return Me.cLIDsField
            End Get
            Set
                Me.cLIDsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class LabelData
        
        Private rTNoField As String
        
        Private materialField As String
        
        Private descriptionField As String
        
        Private matlRevField As String
        
        Private qtyField As String
        
        Private uOMField As String
        
        Private statusCodeField As String
        
        Private subInvField As String
        
        Private locatorField As String
        
        Private rTLotField As String
        
        Private purOrdNoField As String
        
        Private mFRField As String
        
        Private mPNField As String
        
        Private stempField As String
        
        Private mSLField As String
        
        Private roHSField As String
        
        Private dCodeField As String
        
        Private lotNoField As String
        
        Private cOOField As String
        
        Private recDateField As String
        
        Private expDateField As String
        
        Private unitsField As String
        
        Private labelIDField As String
        
        Private sONoField As String
        
        Private sOLineField As String
        
        Private delFlagField As Boolean
        
        Private updateStatusField As String
        
        Private itemDataField As System.Data.DataSet
        
        Private refCLIDField As String
        
        Private storageTypeField As String
        
        Private itemTextField As String
        
        Private invoiceNoField As String
        
        Private vendorIDField As String
        
        Private addlTextField As String
        
        '''<remarks/>
        Public Property RTNo() As String
            Get
                Return Me.rTNoField
            End Get
            Set
                Me.rTNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Material() As String
            Get
                Return Me.materialField
            End Get
            Set
                Me.materialField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MatlRev() As String
            Get
                Return Me.matlRevField
            End Get
            Set
                Me.matlRevField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Qty() As String
            Get
                Return Me.qtyField
            End Get
            Set
                Me.qtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UOM() As String
            Get
                Return Me.uOMField
            End Get
            Set
                Me.uOMField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusCode() As String
            Get
                Return Me.statusCodeField
            End Get
            Set
                Me.statusCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubInv() As String
            Get
                Return Me.subInvField
            End Get
            Set
                Me.subInvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Locator() As String
            Get
                Return Me.locatorField
            End Get
            Set
                Me.locatorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RTLot() As String
            Get
                Return Me.rTLotField
            End Get
            Set
                Me.rTLotField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PurOrdNo() As String
            Get
                Return Me.purOrdNoField
            End Get
            Set
                Me.purOrdNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MFR() As String
            Get
                Return Me.mFRField
            End Get
            Set
                Me.mFRField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MPN() As String
            Get
                Return Me.mPNField
            End Get
            Set
                Me.mPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Stemp() As String
            Get
                Return Me.stempField
            End Get
            Set
                Me.stempField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MSL() As String
            Get
                Return Me.mSLField
            End Get
            Set
                Me.mSLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RoHS() As String
            Get
                Return Me.roHSField
            End Get
            Set
                Me.roHSField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DCode() As String
            Get
                Return Me.dCodeField
            End Get
            Set
                Me.dCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LotNo() As String
            Get
                Return Me.lotNoField
            End Get
            Set
                Me.lotNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property COO() As String
            Get
                Return Me.cOOField
            End Get
            Set
                Me.cOOField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RecDate() As String
            Get
                Return Me.recDateField
            End Get
            Set
                Me.recDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpDate() As String
            Get
                Return Me.expDateField
            End Get
            Set
                Me.expDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Units() As String
            Get
                Return Me.unitsField
            End Get
            Set
                Me.unitsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LabelID() As String
            Get
                Return Me.labelIDField
            End Get
            Set
                Me.labelIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SONo() As String
            Get
                Return Me.sONoField
            End Get
            Set
                Me.sONoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SOLine() As String
            Get
                Return Me.sOLineField
            End Get
            Set
                Me.sOLineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DelFlag() As Boolean
            Get
                Return Me.delFlagField
            End Get
            Set
                Me.delFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UpdateStatus() As String
            Get
                Return Me.updateStatusField
            End Get
            Set
                Me.updateStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ItemData() As System.Data.DataSet
            Get
                Return Me.itemDataField
            End Get
            Set
                Me.itemDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RefCLID() As String
            Get
                Return Me.refCLIDField
            End Get
            Set
                Me.refCLIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StorageType() As String
            Get
                Return Me.storageTypeField
            End Get
            Set
                Me.storageTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ItemText() As String
            Get
                Return Me.itemTextField
            End Get
            Set
                Me.itemTextField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InvoiceNo() As String
            Get
                Return Me.invoiceNoField
            End Get
            Set
                Me.invoiceNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VendorID() As String
            Get
                Return Me.vendorIDField
            End Get
            Set
                Me.vendorIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AddlText() As String
            Get
                Return Me.addlTextField
            End Get
            Set
                Me.addlTextField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class PPDataRst
        
        Private errMsgField As String
        
        Private dsListField As System.Data.DataSet
        
        '''<remarks/>
        Public Property ErrMsg() As String
            Get
                Return Me.errMsgField
            End Get
            Set
                Me.errMsgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsList() As System.Data.DataSet
            Get
                Return Me.dsListField
            End Get
            Set
                Me.dsListField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ProdPickingResponse
        
        Private pDTOField As String
        
        Private errMessageField As String
        
        '''<remarks/>
        Public Property PDTO() As String
            Get
                Return Me.pDTOField
            End Get
            Set
                Me.pDTOField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrMessage() As String
            Get
                Return Me.errMessageField
            End Get
            Set
                Me.errMessageField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class dj_response
        
        Private flagField As String
        
        Private errormsgField As String
        
        Private dsCLIDField As System.Data.DataSet
        
        Private pallet_flagField As String
        
        '''<remarks/>
        Public Property flag() As String
            Get
                Return Me.flagField
            End Get
            Set
                Me.flagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property errormsg() As String
            Get
                Return Me.errormsgField
            End Get
            Set
                Me.errormsgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsCLID() As System.Data.DataSet
            Get
                Return Me.dsCLIDField
            End Get
            Set
                Me.dsCLIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Pallet_flag() As String
            Get
                Return Me.pallet_flagField
            End Get
            Set
                Me.pallet_flagField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class StrTemplate
        
        Private templateField As String
        
        Private descField As String
        
        Private lastChangedByField As String
        
        Private lastChangedOnField As String
        
        Private errMesgField As String
        
        '''<remarks/>
        Public Property Template() As String
            Get
                Return Me.templateField
            End Get
            Set
                Me.templateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Desc() As String
            Get
                Return Me.descField
            End Get
            Set
                Me.descField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastChangedBy() As String
            Get
                Return Me.lastChangedByField
            End Get
            Set
                Me.lastChangedByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastChangedOn() As String
            Get
                Return Me.lastChangedOnField
            End Get
            Set
                Me.lastChangedOnField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrMesg() As String
            Get
                Return Me.errMesgField
            End Get
            Set
                Me.errMesgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ProdPickingStructure
        
        Private typeField As Integer
        
        Private poField As String
        
        Private dJQtyField As String
        
        Private dJRevField As String
        
        Private buildQtyField As String
        
        Private prodFloorField As String
        
        Private prodLineField As String
        
        Private eTAField As Date
        
        Private supplyTypeField As String
        
        Private reasonCodeField As String
        
        Private destSubInvField As String
        
        Private destLocatorField As String
        
        Private checkSubInvField As String
        
        Private checkLocatorField As String
        
        Private productField As String
        
        Private statusField As String
        
        Private makeBuyField As String
        
        Private srcSubInvField As String
        
        '''<remarks/>
        Public Property Type() As Integer
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PO() As String
            Get
                Return Me.poField
            End Get
            Set
                Me.poField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DJQty() As String
            Get
                Return Me.dJQtyField
            End Get
            Set
                Me.dJQtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DJRev() As String
            Get
                Return Me.dJRevField
            End Get
            Set
                Me.dJRevField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BuildQty() As String
            Get
                Return Me.buildQtyField
            End Get
            Set
                Me.buildQtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProdFloor() As String
            Get
                Return Me.prodFloorField
            End Get
            Set
                Me.prodFloorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProdLine() As String
            Get
                Return Me.prodLineField
            End Get
            Set
                Me.prodLineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ETA() As Date
            Get
                Return Me.eTAField
            End Get
            Set
                Me.eTAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SupplyType() As String
            Get
                Return Me.supplyTypeField
            End Get
            Set
                Me.supplyTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReasonCode() As String
            Get
                Return Me.reasonCodeField
            End Get
            Set
                Me.reasonCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DestSubInv() As String
            Get
                Return Me.destSubInvField
            End Get
            Set
                Me.destSubInvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DestLocator() As String
            Get
                Return Me.destLocatorField
            End Get
            Set
                Me.destLocatorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CheckSubInv() As String
            Get
                Return Me.checkSubInvField
            End Get
            Set
                Me.checkSubInvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CheckLocator() As String
            Get
                Return Me.checkLocatorField
            End Get
            Set
                Me.checkLocatorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Product() As String
            Get
                Return Me.productField
            End Get
            Set
                Me.productField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MakeBuy() As String
            Get
                Return Me.makeBuyField
            End Get
            Set
                Me.makeBuyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SrcSubInv() As String
            Get
                Return Me.srcSubInvField
            End Get
            Set
                Me.srcSubInvField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class BJ_Rs
        
        Private bJInfoField As System.Data.DataSet
        
        Private flagField As String
        
        Private errMsgField As String
        
        '''<remarks/>
        Public Property BJInfo() As System.Data.DataSet
            Get
                Return Me.bJInfoField
            End Get
            Set
                Me.bJInfoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Flag() As String
            Get
                Return Me.flagField
            End Get
            Set
                Me.flagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrMsg() As String
            Get
                Return Me.errMsgField
            End Get
            Set
                Me.errMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class PostBatchRslt
        
        Private batchListField As System.Data.DataSet
        
        Private printFlagField As Boolean
        
        '''<remarks/>
        Public Property BatchList() As System.Data.DataSet
            Get
                Return Me.batchListField
            End Get
            Set
                Me.batchListField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PrintFlag() As Boolean
            Get
                Return Me.printFlagField
            End Get
            Set
                Me.printFlagField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class RuleDetail
        
        Private modelField As String
        
        Private descField As String
        
        Private buField As String
        
        Private customerField As String
        
        Private cPNField As String
        
        Private sNpatternField As String
        
        Private sN2patternField As String
        
        Private sN3patternField As String
        
        Private sN4patternField As String
        
        Private voltageTypeField As String
        
        Private powerField As String
        
        Private mainboardField As String
        
        Private specialRequirementField As String
        
        Private boxsizeField As Integer
        
        Private palletsizeField As Integer
        
        Private revisionField As String
        
        Private remarksField As String
        
        Private extSNSameIntSNField As Boolean
        
        Private confirmSNField As Boolean
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Desc() As String
            Get
                Return Me.descField
            End Get
            Set
                Me.descField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BU() As String
            Get
                Return Me.buField
            End Get
            Set
                Me.buField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Customer() As String
            Get
                Return Me.customerField
            End Get
            Set
                Me.customerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CPN() As String
            Get
                Return Me.cPNField
            End Get
            Set
                Me.cPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SNpattern() As String
            Get
                Return Me.sNpatternField
            End Get
            Set
                Me.sNpatternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN2pattern() As String
            Get
                Return Me.sN2patternField
            End Get
            Set
                Me.sN2patternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN3pattern() As String
            Get
                Return Me.sN3patternField
            End Get
            Set
                Me.sN3patternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN4pattern() As String
            Get
                Return Me.sN4patternField
            End Get
            Set
                Me.sN4patternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VoltageType() As String
            Get
                Return Me.voltageTypeField
            End Get
            Set
                Me.voltageTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Power() As String
            Get
                Return Me.powerField
            End Get
            Set
                Me.powerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mainboard() As String
            Get
                Return Me.mainboardField
            End Get
            Set
                Me.mainboardField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecialRequirement() As String
            Get
                Return Me.specialRequirementField
            End Get
            Set
                Me.specialRequirementField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Boxsize() As Integer
            Get
                Return Me.boxsizeField
            End Get
            Set
                Me.boxsizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Palletsize() As Integer
            Get
                Return Me.palletsizeField
            End Get
            Set
                Me.palletsizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision() As String
            Get
                Return Me.revisionField
            End Get
            Set
                Me.revisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Remarks() As String
            Get
                Return Me.remarksField
            End Get
            Set
                Me.remarksField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExtSNSameIntSN() As Boolean
            Get
                Return Me.extSNSameIntSNField
            End Get
            Set
                Me.extSNSameIntSNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConfirmSN() As Boolean
            Get
                Return Me.confirmSNField
            End Get
            Set
                Me.confirmSNField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class InputData
        
        Private orgCodeField As String
        
        Private dmdCutDate_ShortageField As String
        
        Private pOCutDate_ShortageField As String
        
        Private dmdCutDate_ExcessField As String
        
        Private pOCutDate_ExcessField As String
        
        Private safetyStockField As Boolean
        
        Private shortageItemsField As String
        
        '''<remarks/>
        Public Property OrgCode() As String
            Get
                Return Me.orgCodeField
            End Get
            Set
                Me.orgCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DmdCutDate_Shortage() As String
            Get
                Return Me.dmdCutDate_ShortageField
            End Get
            Set
                Me.dmdCutDate_ShortageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property POCutDate_Shortage() As String
            Get
                Return Me.pOCutDate_ShortageField
            End Get
            Set
                Me.pOCutDate_ShortageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DmdCutDate_Excess() As String
            Get
                Return Me.dmdCutDate_ExcessField
            End Get
            Set
                Me.dmdCutDate_ExcessField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property POCutDate_Excess() As String
            Get
                Return Me.pOCutDate_ExcessField
            End Get
            Set
                Me.pOCutDate_ExcessField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SafetyStock() As Boolean
            Get
                Return Me.safetyStockField
            End Get
            Set
                Me.safetyStockField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShortageItems() As String
            Get
                Return Me.shortageItemsField
            End Get
            Set
                Me.shortageItemsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class PostSLEDResponse
        
        Private messField As String
        
        Private cLIDsField As System.Data.DataSet
        
        Private messageField As String
        
        '''<remarks/>
        Public Property Mess() As String
            Get
                Return Me.messField
            End Get
            Set
                Me.messField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CLIDs() As System.Data.DataSet
            Get
                Return Me.cLIDsField
            End Get
            Set
                Me.cLIDsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class SelCriteria
        
        Private sTypeField As String
        
        Private matnoField As String
        
        Private expDateField As Date
        
        Private revStatusField As String
        
        Private cLIDField As String
        
        '''<remarks/>
        Public Property SType() As String
            Get
                Return Me.sTypeField
            End Get
            Set
                Me.sTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Matno() As String
            Get
                Return Me.matnoField
            End Get
            Set
                Me.matnoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExpDate() As Date
            Get
                Return Me.expDateField
            End Get
            Set
                Me.expDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RevStatus() As String
            Get
                Return Me.revStatusField
            End Get
            Set
                Me.revStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CLID() As String
            Get
                Return Me.cLIDField
            End Get
            Set
                Me.cLIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class MOData
        
        Private moField As String
        
        Private mOTypeField As String
        
        Private orgIDField As String
        
        Private itemIDField As String
        
        Private mOHeaderIDField As String
        
        Private specialItemField As String
        
        Private specialSubInvField As String
        
        Private pickFlagField As String
        
        Private itemsField As System.Data.DataSet
        
        '''<remarks/>
        Public Property MO() As String
            Get
                Return Me.moField
            End Get
            Set
                Me.moField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MOType() As String
            Get
                Return Me.mOTypeField
            End Get
            Set
                Me.mOTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrgID() As String
            Get
                Return Me.orgIDField
            End Get
            Set
                Me.orgIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ItemID() As String
            Get
                Return Me.itemIDField
            End Get
            Set
                Me.itemIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MOHeaderID() As String
            Get
                Return Me.mOHeaderIDField
            End Get
            Set
                Me.mOHeaderIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecialItem() As String
            Get
                Return Me.specialItemField
            End Get
            Set
                Me.specialItemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecialSubInv() As String
            Get
                Return Me.specialSubInvField
            End Get
            Set
                Me.specialSubInvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PickFlag() As String
            Get
                Return Me.pickFlagField
            End Get
            Set
                Me.pickFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Items() As System.Data.DataSet
            Get
                Return Me.itemsField
            End Get
            Set
                Me.itemsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class LabelModel
        
        Private labelIDField As String
        
        Private descriptionField As String
        
        Private typeField As String
        
        Private subTypeField As String
        
        Private noUnitField As String
        
        Private noPanelField As String
        
        Private modelField As String
        
        Private customerField As String
        
        Private cpnField As String
        
        Private processField As String
        
        Private pathField As String
        
        Private sourceTableField As String
        
        Private statusField As String
        
        '''<remarks/>
        Public Property labelID() As String
            Get
                Return Me.labelIDField
            End Get
            Set
                Me.labelIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property subType() As String
            Get
                Return Me.subTypeField
            End Get
            Set
                Me.subTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property noUnit() As String
            Get
                Return Me.noUnitField
            End Get
            Set
                Me.noUnitField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property noPanel() As String
            Get
                Return Me.noPanelField
            End Get
            Set
                Me.noPanelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customer() As String
            Get
                Return Me.customerField
            End Get
            Set
                Me.customerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property cpn() As String
            Get
                Return Me.cpnField
            End Get
            Set
                Me.cpnField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property process() As String
            Get
                Return Me.processField
            End Get
            Set
                Me.processField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property path() As String
            Get
                Return Me.pathField
            End Get
            Set
                Me.pathField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property sourceTable() As String
            Get
                Return Me.sourceTableField
            End Get
            Set
                Me.sourceTableField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ComparisonSign
        
        Private moreField As Boolean
        
        Private eQualField As Boolean
        
        Private lessField As Boolean
        
        '''<remarks/>
        Public Property More() As Boolean
            Get
                Return Me.moreField
            End Get
            Set
                Me.moreField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property eQual() As Boolean
            Get
                Return Me.eQualField
            End Get
            Set
                Me.eQualField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Less() As Boolean
            Get
                Return Me.lessField
            End Get
            Set
                Me.lessField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ShipInfo
        
        Private customerPNField As String
        
        Private customerField As String
        
        Private boxIDField As String
        
        Private boxQtyField As Integer
        
        Private palletIDField As String
        
        Private boxsizeField As String
        
        Private modelField As String
        
        Private prodOrderField As String
        
        '''<remarks/>
        Public Property CustomerPN() As String
            Get
                Return Me.customerPNField
            End Get
            Set
                Me.customerPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Customer() As String
            Get
                Return Me.customerField
            End Get
            Set
                Me.customerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BoxID() As String
            Get
                Return Me.boxIDField
            End Get
            Set
                Me.boxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BoxQty() As Integer
            Get
                Return Me.boxQtyField
            End Get
            Set
                Me.boxQtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PalletID() As String
            Get
                Return Me.palletIDField
            End Get
            Set
                Me.palletIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property boxsize() As String
            Get
                Return Me.boxsizeField
            End Get
            Set
                Me.boxsizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property prodOrder() As String
            Get
                Return Me.prodOrderField
            End Get
            Set
                Me.prodOrderField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class StatusHeaderStructure
        
        Private modelField As String
        
        Private pCBAField As String
        
        Private poField As String
        
        Private processField As String
        
        Private resultField As String
        
        Private intSerialField As String
        
        Private extSerialField As String
        
        Private operatorNameField As String
        
        Private currDateField As Date
        
        Private testerField As String
        
        Private programNameField As String
        
        Private programVersionField As String
        
        Private iPSNoField As String
        
        Private iPSVersionField As String
        
        Private salesOrderField As String
        
        Private custPNField As String
        
        Private custRevField As String
        
        Private sN2Field As String
        
        Private sN3Field As String
        
        Private sN4Field As String
        
        Private boxIDField As String
        
        Private palletIDField As String
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PCBA() As String
            Get
                Return Me.pCBAField
            End Get
            Set
                Me.pCBAField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PO() As String
            Get
                Return Me.poField
            End Get
            Set
                Me.poField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Process() As String
            Get
                Return Me.processField
            End Get
            Set
                Me.processField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Result() As String
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IntSerial() As String
            Get
                Return Me.intSerialField
            End Get
            Set
                Me.intSerialField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExtSerial() As String
            Get
                Return Me.extSerialField
            End Get
            Set
                Me.extSerialField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OperatorName() As String
            Get
                Return Me.operatorNameField
            End Get
            Set
                Me.operatorNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CurrDate() As Date
            Get
                Return Me.currDateField
            End Get
            Set
                Me.currDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tester() As String
            Get
                Return Me.testerField
            End Get
            Set
                Me.testerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProgramName() As String
            Get
                Return Me.programNameField
            End Get
            Set
                Me.programNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProgramVersion() As String
            Get
                Return Me.programVersionField
            End Get
            Set
                Me.programVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IPSNo() As String
            Get
                Return Me.iPSNoField
            End Get
            Set
                Me.iPSNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IPSVersion() As String
            Get
                Return Me.iPSVersionField
            End Get
            Set
                Me.iPSVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SalesOrder() As String
            Get
                Return Me.salesOrderField
            End Get
            Set
                Me.salesOrderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustPN() As String
            Get
                Return Me.custPNField
            End Get
            Set
                Me.custPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustRev() As String
            Get
                Return Me.custRevField
            End Get
            Set
                Me.custRevField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN2() As String
            Get
                Return Me.sN2Field
            End Get
            Set
                Me.sN2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN3() As String
            Get
                Return Me.sN3Field
            End Get
            Set
                Me.sN3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SN4() As String
            Get
                Return Me.sN4Field
            End Get
            Set
                Me.sN4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BoxID() As String
            Get
                Return Me.boxIDField
            End Get
            Set
                Me.boxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PalletID() As String
            Get
                Return Me.palletIDField
            End Get
            Set
                Me.palletIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ProductModel
        
        Private modelField As String
        
        Private descriptionField As String
        
        Private businessUnitField As String
        
        Private votageTypeField As String
        
        Private powerField As String
        
        Private changeByField As String
        
        Private statusField As String
        
        Private remarksField As String
        
        Private usernameField As String
        
        Private traceabilityLevelField As String
        
        '''<remarks/>
        Public Property model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property businessUnit() As String
            Get
                Return Me.businessUnitField
            End Get
            Set
                Me.businessUnitField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property votageType() As String
            Get
                Return Me.votageTypeField
            End Get
            Set
                Me.votageTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property power() As String
            Get
                Return Me.powerField
            End Get
            Set
                Me.powerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property changeBy() As String
            Get
                Return Me.changeByField
            End Get
            Set
                Me.changeByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property remarks() As String
            Get
                Return Me.remarksField
            End Get
            Set
                Me.remarksField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property username() As String
            Get
                Return Me.usernameField
            End Get
            Set
                Me.usernameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TraceabilityLevel() As String
            Get
                Return Me.traceabilityLevelField
            End Get
            Set
                Me.traceabilityLevelField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class SAPPN_Check
        
        Private oraclePNField As String
        
        Private flagField As Boolean
        
        '''<remarks/>
        Public Property OraclePN() As String
            Get
                Return Me.oraclePNField
            End Get
            Set
                Me.oraclePNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Flag() As Boolean
            Get
                Return Me.flagField
            End Get
            Set
                Me.flagField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class GetCycleCount
        
        Private flagField As String
        
        Private messageField As String
        
        Private dsField As System.Data.DataSet
        
        '''<remarks/>
        Public Property Flag() As String
            Get
                Return Me.flagField
            End Get
            Set
                Me.flagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ds() As System.Data.DataSet
            Get
                Return Me.dsField
            End Get
            Set
                Me.dsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class SlotShortageList
        
        Private dsAvlField As System.Data.DataSet
        
        Private shortage_WithSlotField As String
        
        Private shortage_NoSlotField As String
        
        Private shortage_NoOnhandField As String
        
        Private errMsgField As String
        
        '''<remarks/>
        Public Property dsAvl() As System.Data.DataSet
            Get
                Return Me.dsAvlField
            End Get
            Set
                Me.dsAvlField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Shortage_WithSlot() As String
            Get
                Return Me.shortage_WithSlotField
            End Get
            Set
                Me.shortage_WithSlotField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Shortage_NoSlot() As String
            Get
                Return Me.shortage_NoSlotField
            End Get
            Set
                Me.shortage_NoSlotField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Shortage_NoOnhand() As String
            Get
                Return Me.shortage_NoOnhandField
            End Get
            Set
                Me.shortage_NoOnhandField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrMsg() As String
            Get
                Return Me.errMsgField
            End Get
            Set
                Me.errMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class MO_List
        
        Private mOListField As System.Data.DataSet
        
        Private djField As String
        
        Private modelField As String
        
        Private dJQtyField As Double
        
        Private prodLineField As String
        
        Private destSubInvField As String
        
        Private destLocField As String
        
        Private pickedFlagField As String
        
        Private flagField As String
        
        Private errMsgField As String
        
        '''<remarks/>
        Public Property MOList() As System.Data.DataSet
            Get
                Return Me.mOListField
            End Get
            Set
                Me.mOListField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DJ() As String
            Get
                Return Me.djField
            End Get
            Set
                Me.djField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DJQty() As Double
            Get
                Return Me.dJQtyField
            End Get
            Set
                Me.dJQtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProdLine() As String
            Get
                Return Me.prodLineField
            End Get
            Set
                Me.prodLineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property destSubInv() As String
            Get
                Return Me.destSubInvField
            End Get
            Set
                Me.destSubInvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property destLoc() As String
            Get
                Return Me.destLocField
            End Get
            Set
                Me.destLocField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PickedFlag() As String
            Get
                Return Me.pickedFlagField
            End Get
            Set
                Me.pickedFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Flag() As String
            Get
                Return Me.flagField
            End Get
            Set
                Me.flagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrMsg() As String
            Get
                Return Me.errMsgField
            End Get
            Set
                Me.errMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class MO_Information
        
        Private mOListField As System.Data.DataSet
        
        Private djField As String
        
        Private modelField As String
        
        Private dJQtyField As Double
        
        Private prodLineField As String
        
        Private destSubInvField As String
        
        Private destLocField As String
        
        Private pickedFlagField As String
        
        Private flagField As String
        
        Private uTurnSubInvField As String
        
        Private dsJobField As System.Data.DataSet
        
        Private dsCheck_PickField As System.Data.DataSet
        
        Private dsAvlField As System.Data.DataSet
        
        Private dsMPQField As System.Data.DataSet
        
        Private shortage_WithSlotField As String
        
        Private shortage_NoSlotField As String
        
        Private shortage_NoOnhandField As String
        
        Private refQtyField As Decimal
        
        Private dsAllCLIDInfoField As System.Data.DataSet
        
        Private dsProdLineField As System.Data.DataSet
        
        Private dsLineSlotField As System.Data.DataSet
        
        Private errMsgField As String
        
        '''<remarks/>
        Public Property MOList() As System.Data.DataSet
            Get
                Return Me.mOListField
            End Get
            Set
                Me.mOListField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DJ() As String
            Get
                Return Me.djField
            End Get
            Set
                Me.djField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As String
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DJQty() As Double
            Get
                Return Me.dJQtyField
            End Get
            Set
                Me.dJQtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProdLine() As String
            Get
                Return Me.prodLineField
            End Get
            Set
                Me.prodLineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property destSubInv() As String
            Get
                Return Me.destSubInvField
            End Get
            Set
                Me.destSubInvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property destLoc() As String
            Get
                Return Me.destLocField
            End Get
            Set
                Me.destLocField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PickedFlag() As String
            Get
                Return Me.pickedFlagField
            End Get
            Set
                Me.pickedFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Flag() As String
            Get
                Return Me.flagField
            End Get
            Set
                Me.flagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UTurnSubInv() As String
            Get
                Return Me.uTurnSubInvField
            End Get
            Set
                Me.uTurnSubInvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsJob() As System.Data.DataSet
            Get
                Return Me.dsJobField
            End Get
            Set
                Me.dsJobField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsCheck_Pick() As System.Data.DataSet
            Get
                Return Me.dsCheck_PickField
            End Get
            Set
                Me.dsCheck_PickField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsAvl() As System.Data.DataSet
            Get
                Return Me.dsAvlField
            End Get
            Set
                Me.dsAvlField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsMPQ() As System.Data.DataSet
            Get
                Return Me.dsMPQField
            End Get
            Set
                Me.dsMPQField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Shortage_WithSlot() As String
            Get
                Return Me.shortage_WithSlotField
            End Get
            Set
                Me.shortage_WithSlotField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Shortage_NoSlot() As String
            Get
                Return Me.shortage_NoSlotField
            End Get
            Set
                Me.shortage_NoSlotField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Shortage_NoOnhand() As String
            Get
                Return Me.shortage_NoOnhandField
            End Get
            Set
                Me.shortage_NoOnhandField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RefQty() As Decimal
            Get
                Return Me.refQtyField
            End Get
            Set
                Me.refQtyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsAllCLIDInfo() As System.Data.DataSet
            Get
                Return Me.dsAllCLIDInfoField
            End Get
            Set
                Me.dsAllCLIDInfoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsProdLine() As System.Data.DataSet
            Get
                Return Me.dsProdLineField
            End Get
            Set
                Me.dsProdLineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dsLineSlot() As System.Data.DataSet
            Get
                Return Me.dsLineSlotField
            End Get
            Set
                Me.dsLineSlotField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrMsg() As String
            Get
                Return Me.errMsgField
            End Get
            Set
                Me.errMsgField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://eTraceOracleERP.org/")>  _
    Partial Public Class ERPLogin
        
        Private serverField As String
        
        Private userField As String
        
        Private cHNNameField As String
        
        Private pWDField As String
        
        Private orgCodeField As String
        
        Private orgIDField As String
        
        Private applicationField As String
        
        Private userIDField As String
        
        Private userTypeField As String
        
        Private userDeptField As String
        
        Private resetFlagField As Boolean
        
        Private printerField As String
        
        Private errorMsgField As String
        
        Private appID_POField As String
        
        Private respID_POField As String
        
        Private appID_InvField As String
        
        Private respID_InvField As String
        
        Private appID_WIPField As String
        
        Private respID_WIPField As String
        
        Private appID_KBField As String
        
        Private respID_KBField As String
        
        Private clientVersionField As String
        
        Private productionLineField As String
        
        '''<remarks/>
        Public Property Server() As String
            Get
                Return Me.serverField
            End Get
            Set
                Me.serverField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CHNName() As String
            Get
                Return Me.cHNNameField
            End Get
            Set
                Me.cHNNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PWD() As String
            Get
                Return Me.pWDField
            End Get
            Set
                Me.pWDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrgCode() As String
            Get
                Return Me.orgCodeField
            End Get
            Set
                Me.orgCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrgID() As String
            Get
                Return Me.orgIDField
            End Get
            Set
                Me.orgIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Application() As String
            Get
                Return Me.applicationField
            End Get
            Set
                Me.applicationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserDept() As String
            Get
                Return Me.userDeptField
            End Get
            Set
                Me.userDeptField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ResetFlag() As Boolean
            Get
                Return Me.resetFlagField
            End Get
            Set
                Me.resetFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Printer() As String
            Get
                Return Me.printerField
            End Get
            Set
                Me.printerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorMsg() As String
            Get
                Return Me.errorMsgField
            End Get
            Set
                Me.errorMsgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_PO() As String
            Get
                Return Me.appID_POField
            End Get
            Set
                Me.appID_POField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_PO() As String
            Get
                Return Me.respID_POField
            End Get
            Set
                Me.respID_POField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_Inv() As String
            Get
                Return Me.appID_InvField
            End Get
            Set
                Me.appID_InvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_Inv() As String
            Get
                Return Me.respID_InvField
            End Get
            Set
                Me.respID_InvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_WIP() As String
            Get
                Return Me.appID_WIPField
            End Get
            Set
                Me.appID_WIPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_WIP() As String
            Get
                Return Me.respID_WIPField
            End Get
            Set
                Me.respID_WIPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AppID_KB() As String
            Get
                Return Me.appID_KBField
            End Get
            Set
                Me.appID_KBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespID_KB() As String
            Get
                Return Me.respID_KBField
            End Get
            Set
                Me.respID_KBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ClientVersion() As String
            Get
                Return Me.clientVersionField
            End Get
            Set
                Me.clientVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProductionLine() As String
            Get
                Return Me.productionLineField
            End Get
            Set
                Me.productionLineField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonInputCompletedEventHandler(ByVal sender As Object, ByVal e As AndonInputCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonInputCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ExistsModelCompletedEventHandler(ByVal sender As Object, ByVal e As ExistsModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExistsModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonActualQtyCompletedEventHandler(ByVal sender As Object, ByVal e As AndonActualQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonActualQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonActualQtyofProcessCompletedEventHandler(ByVal sender As Object, ByVal e As AndonActualQtyofProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonActualQtyofProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonFailedPercentCompletedEventHandler(ByVal sender As Object, ByVal e As AndonFailedPercentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonFailedPercentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonFailedQtyCompletedEventHandler(ByVal sender As Object, ByVal e As AndonFailedQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonFailedQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonLineStopTimeCompletedEventHandler(ByVal sender As Object, ByVal e As AndonLineStopTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonLineStopTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonLineStopFreqCompletedEventHandler(ByVal sender As Object, ByVal e As AndonLineStopFreqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonLineStopFreqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAndonProdScheCompletedEventHandler(ByVal sender As Object, ByVal e As GetAndonProdScheCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAndonProdScheCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateAndonProdScheCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAndonProdScheCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAndonProdScheCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AndonProjectedQtyCompletedEventHandler(ByVal sender As Object, ByVal e As AndonProjectedQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AndonProjectedQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LEDControlByRackCompletedEventHandler(ByVal sender As Object, ByVal e As LEDControlByRackCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LEDControlByRackCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LEDControlBySlotCompletedEventHandler(ByVal sender As Object, ByVal e As LEDControlBySlotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LEDControlBySlotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckBoxIDCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBoxIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBoxIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckProdLineCompletedEventHandler(ByVal sender As Object, ByVal e As CheckProdLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckProdLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ConfirmCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As ConfirmCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConfirmCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ConfirmMOCompletedEventHandler(ByVal sender As Object, ByVal e As ConfirmMOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConfirmMOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadEventIDCompletedEventHandler(ByVal sender As Object, ByVal e As ReadEventIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadEventIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintSMTDJLabelCompletedEventHandler(ByVal sender As Object, ByVal e As PrintSMTDJLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintSMTDJLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CancelMOCompletedEventHandler(ByVal sender As Object, ByVal e As CancelMOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelMOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ProcessDockingCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessDockingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessDockingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckProdLine_LDCompletedEventHandler(ByVal sender As Object, ByVal e As CheckProdLine_LDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckProdLine_LDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ConfirmCLID_LDCompletedEventHandler(ByVal sender As Object, ByVal e As ConfirmCLID_LDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConfirmCLID_LDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadEventID_LDCompletedEventHandler(ByVal sender As Object, ByVal e As ReadEventID_LDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadEventID_LDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintSMTDJLabel_LDCompletedEventHandler(ByVal sender As Object, ByVal e As PrintSMTDJLabel_LDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintSMTDJLabel_LDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ProcessDocking_LDCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessDocking_LDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessDocking_LDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property mySMOData() As SMTData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SMTData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDJInfoSMTCompletedEventHandler(ByVal sender As Object, ByVal e As GetDJInfoSMTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDJInfoSMTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProductStructureCompletedEventHandler(ByVal sender As Object, ByVal e As GetProductStructureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductStructureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub NewSeqNOCompletedEventHandler(ByVal sender As Object, ByVal e As NewSeqNOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NewSeqNOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobHeader2CompletedEventHandler(ByVal sender As Object, ByVal e As GetJobHeader2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobHeader2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub InsertJobCompletedEventHandler(ByVal sender As Object, ByVal e As InsertJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateJobCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateJobStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateJobStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateJobStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProdLineByLineTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetProdLineByLineTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProdLineByLineTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSMTMachinesCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMTMachinesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMTMachinesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProdLineCompletedEventHandler(ByVal sender As Object, ByVal e As GetProdLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProdLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMSLMachineCompletedEventHandler(ByVal sender As Object, ByVal e As GetMSLMachineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMSLMachineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMSLModelCompletedEventHandler(ByVal sender As Object, ByVal e As GetMSLModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMSLModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DeleteMslCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteMslCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteMslCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub InsertMslCompletedEventHandler(ByVal sender As Object, ByVal e As InsertMslCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertMslCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetJobMslCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobMslCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobMslCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ExecSPCompletedEventHandler(ByVal sender As Object, ByVal e As ExecSPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecSPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub StockTake_BkpBFAdjustCompletedEventHandler(ByVal sender As Object, ByVal e As StockTake_BkpBFAdjustCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StockTake_BkpBFAdjustCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ForLossCompletedEventHandler(ByVal sender As Object, ByVal e As ForLossCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ForLossCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ForGainCompletedEventHandler(ByVal sender As Object, ByVal e As ForGainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ForGainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ForNotFoundCompletedEventHandler(ByVal sender As Object, ByVal e As ForNotFoundCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ForNotFoundCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ForNewFindCompletedEventHandler(ByVal sender As Object, ByVal e As ForNewFindCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ForNewFindCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ForDiffLocatorCompletedEventHandler(ByVal sender As Object, ByVal e As ForDiffLocatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ForDiffLocatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ForLossDiffCompletedEventHandler(ByVal sender As Object, ByVal e As ForLossDiffCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ForLossDiffCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ForGainDiffCompletedEventHandler(ByVal sender As Object, ByVal e As ForGainDiffCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ForGainDiffCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub StockTake_BkpAfterAdjustCompletedEventHandler(ByVal sender As Object, ByVal e As StockTake_BkpAfterAdjustCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StockTake_BkpAfterAdjustCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BFC_GetWeekCodeCompletedEventHandler(ByVal sender As Object, ByVal e As BFC_GetWeekCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BFC_GetWeekCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BFC_GetBFSubinvCompletedEventHandler(ByVal sender As Object, ByVal e As BFC_GetBFSubinvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BFC_GetBFSubinvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BFC_DelOldBFCountCompletedEventHandler(ByVal sender As Object, ByVal e As BFC_DelOldBFCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BFC_DelOldBFCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BFC_GetCLIDInfoCompletedEventHandler(ByVal sender As Object, ByVal e As BFC_GetCLIDInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BFC_GetCLIDInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Save_BFCountCompletedEventHandler(ByVal sender As Object, ByVal e As Save_BFCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Save_BFCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_Secondary_InventoryCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Secondary_InventoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Secondary_InventoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_Sub_LocatorCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Sub_LocatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Sub_LocatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_List_Sub_LocatorCompletedEventHandler(ByVal sender As Object, ByVal e As Get_List_Sub_LocatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_List_Sub_LocatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Find_List_Sub_LocatorCompletedEventHandler(ByVal sender As Object, ByVal e As Find_List_Sub_LocatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Find_List_Sub_LocatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Add_Sub_LocatorCompletedEventHandler(ByVal sender As Object, ByVal e As Add_Sub_LocatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Add_Sub_LocatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Delete_Sub_LocatorCompletedEventHandler(ByVal sender As Object, ByVal e As Delete_Sub_LocatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Delete_Sub_LocatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Validate_item_numberCompletedEventHandler(ByVal sender As Object, ByVal e As Validate_item_numberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Validate_item_numberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub add_floor_stock_materialCompletedEventHandler(ByVal sender As Object, ByVal e As add_floor_stock_materialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class add_floor_stock_materialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_List_Floor_StockCompletedEventHandler(ByVal sender As Object, ByVal e As Get_List_Floor_StockCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_List_Floor_StockCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Find_List_Floor_StockCompletedEventHandler(ByVal sender As Object, ByVal e As Find_List_Floor_StockCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Find_List_Floor_StockCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Delete_Floor_StockCompletedEventHandler(ByVal sender As Object, ByVal e As Delete_Floor_StockCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Delete_Floor_StockCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Update_Floor_StockCompletedEventHandler(ByVal sender As Object, ByVal e As Update_Floor_StockCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Update_Floor_StockCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_Generic_DispositionCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Generic_DispositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Generic_DispositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_List_Generic_DispositionCompletedEventHandler(ByVal sender As Object, ByVal e As Get_List_Generic_DispositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_List_Generic_DispositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub add_generic_dispositionsCompletedEventHandler(ByVal sender As Object, ByVal e As add_generic_dispositionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class add_generic_dispositionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Delete_Generic_DispositionsCompletedEventHandler(ByVal sender As Object, ByVal e As Delete_Generic_DispositionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Delete_Generic_DispositionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_List_Item_MappingCompletedEventHandler(ByVal sender As Object, ByVal e As Get_List_Item_MappingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_List_Item_MappingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub add_List_Item_MappingCompletedEventHandler(ByVal sender As Object, ByVal e As add_List_Item_MappingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class add_List_Item_MappingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Delete_List_Item_MappingCompletedEventHandler(ByVal sender As Object, ByVal e As Delete_List_Item_MappingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Delete_List_Item_MappingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LoadCustomReportDataCompletedEventHandler(ByVal sender As Object, ByVal e As LoadCustomReportDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadCustomReportDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_item_wastageCompletedEventHandler(ByVal sender As Object, ByVal e As Get_item_wastageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_item_wastageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Insert_item_wastageCompletedEventHandler(ByVal sender As Object, ByVal e As Insert_item_wastageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Insert_item_wastageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub delete_xxetr_item_wastageCompletedEventHandler(ByVal sender As Object, ByVal e As delete_xxetr_item_wastageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class delete_xxetr_item_wastageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Update_xxetr_item_wastageCompletedEventHandler(ByVal sender As Object, ByVal e As Update_xxetr_item_wastageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Update_xxetr_item_wastageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveTDCRepairCodeCompletedEventHandler(ByVal sender As Object, ByVal e As SaveTDCRepairCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveTDCRepairCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRepairCodeForQCcodeCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRepairCodeForQCcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRepairCodeForQCcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IsProductProcessCompletedEventHandler(ByVal sender As Object, ByVal e As IsProductProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsProductProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetActiveEventCompletedEventHandler(ByVal sender As Object, ByVal e As GetActiveEventCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActiveEventCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetActiveJobCompletedEventHandler(ByVal sender As Object, ByVal e As GetActiveJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActiveJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetActiveEvent_ActiveJobCompletedEventHandler(ByVal sender As Object, ByVal e As GetActiveEvent_ActiveJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActiveEvent_ActiveJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetActiveEvent_ActiveJob_LDCompletedEventHandler(ByVal sender As Object, ByVal e As GetActiveEvent_ActiveJob_LDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActiveEvent_ActiveJob_LDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub EventLightOffCompletedEventHandler(ByVal sender As Object, ByVal e As EventLightOffCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EventLightOffCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetLocConfigCompletedEventHandler(ByVal sender As Object, ByVal e As GetLocConfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLocConfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetWMSConfigCompletedEventHandler(ByVal sender As Object, ByVal e As GetWMSConfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWMSConfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetItemUsageCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemUsageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemUsageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetItemUsage_LDCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemUsage_LDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemUsage_LDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WMS_Check_PickedFlagCompletedEventHandler(ByVal sender As Object, ByVal e As WMS_Check_PickedFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMS_Check_PickedFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_MO_InformationCompletedEventHandler(ByVal sender As Object, ByVal e As Get_MO_InformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_MO_InformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MO_Information
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MO_Information)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_MO_Information_SQLCompletedEventHandler(ByVal sender As Object, ByVal e As Get_MO_Information_SQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_MO_Information_SQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MO_Information
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MO_Information)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_MO_Information_LDCompletedEventHandler(ByVal sender As Object, ByVal e As Get_MO_Information_LDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_MO_Information_LDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MO_Information
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MO_Information)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_SubinvLoc_for_CSCompletedEventHandler(ByVal sender As Object, ByVal e As Get_SubinvLoc_for_CSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_SubinvLoc_for_CSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_MO_Information_CS_SQLCompletedEventHandler(ByVal sender As Object, ByVal e As Get_MO_Information_CS_SQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_MO_Information_CS_SQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MO_Information
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MO_Information)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_MO_For_LEDCompletedEventHandler(ByVal sender As Object, ByVal e As Get_MO_For_LEDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_MO_For_LEDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MO_List
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MO_List)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_RefQtyCompletedEventHandler(ByVal sender As Object, ByVal e As Get_RefQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_RefQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_JobInform_MOCompletedEventHandler(ByVal sender As Object, ByVal e As Get_JobInform_MOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_JobInform_MOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WMS_CheckSlotShortageCompletedEventHandler(ByVal sender As Object, ByVal e As WMS_CheckSlotShortageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMS_CheckSlotShortageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SlotShortageList
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SlotShortageList)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WMS_CheckSlotAvlCompletedEventHandler(ByVal sender As Object, ByVal e As WMS_CheckSlotAvlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMS_CheckSlotAvlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SlotShortageList
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SlotShortageList)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAllCLIDInfo_LEDCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllCLIDInfo_LEDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllCLIDInfo_LEDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMatMPQCompletedEventHandler(ByVal sender As Object, ByVal e As GetMatMPQCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMatMPQCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCLIDInfo_LEDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCLIDInfo_LEDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCLIDInfo_LEDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCLIDInfo_LED_ByIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCLIDInfo_LED_ByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCLIDInfo_LED_ByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCLIDInfo_RTLotCompletedEventHandler(ByVal sender As Object, ByVal e As GetCLIDInfo_RTLotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCLIDInfo_RTLotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCLIDCombinationCompletedEventHandler(ByVal sender As Object, ByVal e As GetCLIDCombinationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCLIDCombinationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WMS_Save_TableCompletedEventHandler(ByVal sender As Object, ByVal e As WMS_Save_TableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMS_Save_TableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WMS_Save_Table2CompletedEventHandler(ByVal sender As Object, ByVal e As WMS_Save_Table2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMS_Save_Table2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WMS_Save_Table3CompletedEventHandler(ByVal sender As Object, ByVal e As WMS_Save_Table3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMS_Save_Table3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WMS_Post_MO_AllocationCompletedEventHandler(ByVal sender As Object, ByVal e As WMS_Post_MO_AllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMS_Post_MO_AllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WMS_Save_AllocationCompletedEventHandler(ByVal sender As Object, ByVal e As WMS_Save_AllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMS_Save_AllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCycleCountDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetCycleCountDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCycleCountDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GetCycleCount
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GetCycleCount)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCycleCountListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCycleCountListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCycleCountListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GetCycleCount
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GetCycleCount)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostCycleCountAllocationCompletedEventHandler(ByVal sender As Object, ByVal e As PostCycleCountAllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostCycleCountAllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostOccupiedAllocationCompletedEventHandler(ByVal sender As Object, ByVal e As PostOccupiedAllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostOccupiedAllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostEmptyAllocationCompletedEventHandler(ByVal sender As Object, ByVal e As PostEmptyAllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostEmptyAllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostConditionalAllocationCompletedEventHandler(ByVal sender As Object, ByVal e As PostConditionalAllocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostConditionalAllocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateCLIDMissingCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCLIDMissingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCLIDMissingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WMS_Check_EventIDCompletedEventHandler(ByVal sender As Object, ByVal e As WMS_Check_EventIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMS_Check_EventIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WMS_Check_RackCompletedEventHandler(ByVal sender As Object, ByVal e As WMS_Check_RackCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMS_Check_RackCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IsAuthorizedPCBCompletedEventHandler(ByVal sender As Object, ByVal e As IsAuthorizedPCBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsAuthorizedPCBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateKanbanLabelCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateKanbanLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateKanbanLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ErrorLoggingOTOCompletedEventHandler(ByVal sender As Object, ByVal e As ErrorLoggingOTOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ErrorLoggingOTOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub EmployeeIDLoginOTOCompletedEventHandler(ByVal sender As Object, ByVal e As EmployeeIDLoginOTOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EmployeeIDLoginOTOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRepairCodeCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRepairCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRepairCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRepCodesByCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRepCodesByCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRepCodesByCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRepDefectCodeByCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRepDefectCodeByCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRepDefectCodeByCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRepCodeGropByDefectCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRepCodeGropByDefectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRepCodeGropByDefectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRepDefectCodeByCauseCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRepDefectCodeByCauseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRepDefectCodeByCauseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRepairDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRepairDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRepairDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadFailDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReadFailDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadFailDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCLIDDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetCLIDDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCLIDDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckOTOCompletedEventHandler(ByVal sender As Object, ByVal e As CheckOTOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckOTOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveRepairDetailDataCompletedEventHandler(ByVal sender As Object, ByVal e As SaveRepairDetailDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveRepairDetailDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadStructureCompletedEventHandler(ByVal sender As Object, ByVal e As ReadStructureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadStructureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadConfigCompletedEventHandler(ByVal sender As Object, ByVal e As ReadConfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadConfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub StandardTimeCompletedEventHandler(ByVal sender As Object, ByVal e As StandardTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StandardTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ServerTimeCompletedEventHandler(ByVal sender As Object, ByVal e As ServerTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ServerTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadWIPFlowCompletedEventHandler(ByVal sender As Object, ByVal e As ReadWIPFlowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadWIPFlowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RepScrapCompletedEventHandler(ByVal sender As Object, ByVal e As RepScrapCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RepScrapCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RDCScrapCompletedEventHandler(ByVal sender As Object, ByVal e As RDCScrapCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RDCScrapCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RDCSaveIICompletedEventHandler(ByVal sender As Object, ByVal e As RDCSaveIICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RDCSaveIICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub FailRecordIICompletedEventHandler(ByVal sender As Object, ByVal e As FailRecordIICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FailRecordIICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RDCScrapIICompletedEventHandler(ByVal sender As Object, ByVal e As RDCScrapIICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RDCScrapIICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RDC121MatlInfoCompletedEventHandler(ByVal sender As Object, ByVal e As RDC121MatlInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RDC121MatlInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RDCMatInfoCompletedEventHandler(ByVal sender As Object, ByVal e As RDCMatInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RDCMatInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RepRaiseTimesCompletedEventHandler(ByVal sender As Object, ByVal e As RepRaiseTimesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RepRaiseTimesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveRepairRecordDataCompletedEventHandler(ByVal sender As Object, ByVal e As SaveRepairRecordDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveRepairRecordDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SkipBICompletedEventHandler(ByVal sender As Object, ByVal e As SkipBICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SkipBICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadFailItemCompletedEventHandler(ByVal sender As Object, ByVal e As ReadFailItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadFailItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadNDFDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReadNDFDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadNDFDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub FailRecordCompletedEventHandler(ByVal sender As Object, ByVal e As FailRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FailRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub NewFailDataCompletedEventHandler(ByVal sender As Object, ByVal e As NewFailDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NewFailDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RDCWIPFLowCompletedEventHandler(ByVal sender As Object, ByVal e As RDCWIPFLowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RDCWIPFLowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RDCSaveCompletedEventHandler(ByVal sender As Object, ByVal e As RDCSaveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RDCSaveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSpecifySeatItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetSpecifySeatItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSpecifySeatItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSpecifySeatItemByOrgCompletedEventHandler(ByVal sender As Object, ByVal e As GetSpecifySeatItemByOrgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSpecifySeatItemByOrgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPdControlByDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetPdControlByDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPdControlByDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdatePOQtyCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePOQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePOQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATELockingRDCWIPINCompletedEventHandler(ByVal sender As Object, ByVal e As ATELockingRDCWIPINCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATELockingRDCWIPINCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateOraItemCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOraItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOraItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ArchiveCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As ArchiveCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ArchiveCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateSTypeBinCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSTypeBinCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSTypeBinCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DisableManualItemsCompletedEventHandler(ByVal sender As Object, ByVal e As DisableManualItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DisableManualItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckNoMappingCompletedEventHandler(ByVal sender As Object, ByVal e As CheckNoMappingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckNoMappingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CountNoMappingCompletedEventHandler(ByVal sender As Object, ByVal e As CountNoMappingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CountNoMappingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckMigrateStatusCompletedEventHandler(ByVal sender As Object, ByVal e As CheckMigrateStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckMigrateStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateCLMasterCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCLMasterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCLMasterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SumSAPIMCompletedEventHandler(ByVal sender As Object, ByVal e As SumSAPIMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SumSAPIMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckQtyMatchCompletedEventHandler(ByVal sender As Object, ByVal e As CheckQtyMatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckQtyMatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AssignClientIDCompletedEventHandler(ByVal sender As Object, ByVal e As AssignClientIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssignClientIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadToOracleCompletedEventHandler(ByVal sender As Object, ByVal e As UploadToOracleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadToOracleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IssueFmOracleCompletedEventHandler(ByVal sender As Object, ByVal e As IssueFmOracleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IssueFmOracleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckSAPPNCompletedEventHandler(ByVal sender As Object, ByVal e As CheckSAPPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckSAPPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Check_SAPPNCompletedEventHandler(ByVal sender As Object, ByVal e As Check_SAPPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Check_SAPPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SAPPN_Check
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SAPPN_Check)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RollbackCLIDInfoCompletedEventHandler(ByVal sender As Object, ByVal e As RollbackCLIDInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RollbackCLIDInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_STCtrlListCompletedEventHandler(ByVal sender As Object, ByVal e As Get_STCtrlListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_STCtrlListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ST_CheckActionCompletedEventHandler(ByVal sender As Object, ByVal e As ST_CheckActionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ST_CheckActionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ST_CompActionCompletedEventHandler(ByVal sender As Object, ByVal e As ST_CompActionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ST_CompActionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateActionStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateActionStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateActionStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Lock_eTraceCompletedEventHandler(ByVal sender As Object, ByVal e As Lock_eTraceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Lock_eTraceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UnLock_eTraceCompletedEventHandler(ByVal sender As Object, ByVal e As UnLock_eTraceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnLock_eTraceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ClearPINameCompletedEventHandler(ByVal sender As Object, ByVal e As ClearPINameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClearPINameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetOrgList_StockTakeCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrgList_StockTakeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrgList_StockTakeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AddPINameCompletedEventHandler(ByVal sender As Object, ByVal e As AddPINameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPINameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub StockTake_CpySubLocCompletedEventHandler(ByVal sender As Object, ByVal e As StockTake_CpySubLocCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StockTake_CpySubLocCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CopyPICompletedEventHandler(ByVal sender As Object, ByVal e As CopyPICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyPICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CopyCLMasterCompletedEventHandler(ByVal sender As Object, ByVal e As CopyCLMasterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyCLMasterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ExtCnt2CompletedEventHandler(ByVal sender As Object, ByVal e As ExtCnt2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExtCnt2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SetCount1CompletedEventHandler(ByVal sender As Object, ByVal e As SetCount1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCount1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SetCount2CompletedEventHandler(ByVal sender As Object, ByVal e As SetCount2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCount2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckCountOptionCompletedEventHandler(ByVal sender As Object, ByVal e As CheckCountOptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckCountOptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub StockTake_ValidateSubLocCompletedEventHandler(ByVal sender As Object, ByVal e As StockTake_ValidateSubLocCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StockTake_ValidateSubLocCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckInSubLocListCompletedEventHandler(ByVal sender As Object, ByVal e As CheckInSubLocListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckInSubLocListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckBFSubinvCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBFSubinvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBFSubinvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCLIDInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCLIDInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCLIDInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckStopFlagCompletedEventHandler(ByVal sender As Object, ByVal e As CheckStopFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckStopFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Save_STChangeCompletedEventHandler(ByVal sender As Object, ByVal e As Save_STChangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Save_STChangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckNotFoundCompletedEventHandler(ByVal sender As Object, ByVal e As CheckNotFoundCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckNotFoundCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GenVarRptCompletedEventHandler(ByVal sender As Object, ByVal e As GenVarRptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GenVarRptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub EnableScanCompletedEventHandler(ByVal sender As Object, ByVal e As EnableScanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnableScanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub StopScanCompletedEventHandler(ByVal sender As Object, ByVal e As StopScanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StopScanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub NoValidateCompletedEventHandler(ByVal sender As Object, ByVal e As NoValidateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NoValidateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WithValidateCompletedEventHandler(ByVal sender As Object, ByVal e As WithValidateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WithValidateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BkpRmvCompletedEventHandler(ByVal sender As Object, ByVal e As BkpRmvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BkpRmvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SumQtyForPICompletedEventHandler(ByVal sender As Object, ByVal e As SumQtyForPICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SumQtyForPICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub StockTake_AssignExpDateCompletedEventHandler(ByVal sender As Object, ByVal e As StockTake_AssignExpDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StockTake_AssignExpDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateDiffLocatorCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDiffLocatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDiffLocatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPIResultCompletedEventHandler(ByVal sender As Object, ByVal e As GetPIResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPIResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPropertiesNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetPropertiesNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropertiesNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMaxTestRoundCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaxTestRoundCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaxTestRoundCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMaxFailureCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaxFailureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaxFailureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CleanTestResultCompletedEventHandler(ByVal sender As Object, ByVal e As CleanTestResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CleanTestResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPInOQACompletedEventHandler(ByVal sender As Object, ByVal e As WIPInOQACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPInOQACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckExtSNSameIntSNByModelCompletedEventHandler(ByVal sender As Object, ByVal e As CheckExtSNSameIntSNByModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckExtSNSameIntSNByModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Employee_LoginCompletedEventHandler(ByVal sender As Object, ByVal e As Employee_LoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Employee_LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Employee_CertifyCompletedEventHandler(ByVal sender As Object, ByVal e As Employee_CertifyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Employee_CertifyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Loading_CheckModelCompletedEventHandler(ByVal sender As Object, ByVal e As Loading_CheckModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Loading_CheckModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AutoStopLineCompletedEventHandler(ByVal sender As Object, ByVal e As AutoStopLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AutoStopLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Laser_VerifyUnitCompletedEventHandler(ByVal sender As Object, ByVal e As Laser_VerifyUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Laser_VerifyUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Laser_VerifyUnitTestCompletedEventHandler(ByVal sender As Object, ByVal e As Laser_VerifyUnitTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Laser_VerifyUnitTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_RegisterCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_RegisterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_RegisterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_TypeCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_TypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_TypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_MaintainCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_MaintainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_MaintainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_RepairCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_RepairCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_RepairCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_InActiveCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_InActiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_InActiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_RegisterViewCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_RegisterViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_RegisterViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_InActiveLogCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_InActiveLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_InActiveLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_InActiveLogByFixtureCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_InActiveLogByFixtureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_InActiveLogByFixtureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_MaintainLogCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_MaintainLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_MaintainLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_RepairLogCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_RepairLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_RepairLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_TypeViewCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_TypeViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_TypeViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Fixture_UpdateCompletedEventHandler(ByVal sender As Object, ByVal e As Fixture_UpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Fixture_UpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATE_FixtureVerifyCompletedEventHandler(ByVal sender As Object, ByVal e As ATE_FixtureVerifyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATE_FixtureVerifyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATE_CreateRelationCompletedEventHandler(ByVal sender As Object, ByVal e As ATE_CreateRelationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATE_CreateRelationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATE_FixtureSignCompletedEventHandler(ByVal sender As Object, ByVal e As ATE_FixtureSignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATE_FixtureSignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATE_ReturnSNbySlotCompletedEventHandler(ByVal sender As Object, ByVal e As ATE_ReturnSNbySlotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATE_ReturnSNbySlotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATE_ReturnSNbyFixtureCompletedEventHandler(ByVal sender As Object, ByVal e As ATE_ReturnSNbyFixtureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATE_ReturnSNbyFixtureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATE_ReleaseRelationbySlotCompletedEventHandler(ByVal sender As Object, ByVal e As ATE_ReleaseRelationbySlotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATE_ReleaseRelationbySlotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATE_ReleaseRelationbyFixtureCompletedEventHandler(ByVal sender As Object, ByVal e As ATE_ReleaseRelationbyFixtureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATE_ReleaseRelationbyFixtureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATE_IntSlotReviewCompletedEventHandler(ByVal sender As Object, ByVal e As ATE_IntSlotReviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATE_IntSlotReviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Function_ProcessVerifyCompletedEventHandler(ByVal sender As Object, ByVal e As Function_ProcessVerifyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Function_ProcessVerifyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Depanel_VerifyMatching1CompletedEventHandler(ByVal sender As Object, ByVal e As Depanel_VerifyMatching1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Depanel_VerifyMatching1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Test_ReflowCompletedEventHandler(ByVal sender As Object, ByVal e As Test_ReflowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Test_ReflowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Test_ItemDataCompletedEventHandler(ByVal sender As Object, ByVal e As Test_ItemDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Test_ItemDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSystemGMTDateTimeCompletedEventHandler(ByVal sender As Object, ByVal e As GetSystemGMTDateTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSystemGMTDateTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIP_UpdateStatusCompletedEventHandler(ByVal sender As Object, ByVal e As WIP_UpdateStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIP_UpdateStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Test_ReflowProcessCompletedEventHandler(ByVal sender As Object, ByVal e As Test_ReflowProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Test_ReflowProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Depanel_VerifyLastTestCompletedEventHandler(ByVal sender As Object, ByVal e As Depanel_VerifyLastTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Depanel_VerifyLastTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_WIPFGSNCompletedEventHandler(ByVal sender As Object, ByVal e As Get_WIPFGSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_WIPFGSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_WIPTestDataCompletedEventHandler(ByVal sender As Object, ByVal e As Get_WIPTestDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_WIPTestDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_MaintainExpireLogCompletedEventHandler(ByVal sender As Object, ByVal e As Get_MaintainExpireLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_MaintainExpireLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_RepairExpireLogCompletedEventHandler(ByVal sender As Object, ByVal e As Get_RepairExpireLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_RepairExpireLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIP_UpdateParameterCompletedEventHandler(ByVal sender As Object, ByVal e As WIP_UpdateParameterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIP_UpdateParameterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Temp_InquiryProcessCompletedEventHandler(ByVal sender As Object, ByVal e As Temp_InquiryProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Temp_InquiryProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Temp_UpdateProcessCompletedEventHandler(ByVal sender As Object, ByVal e As Temp_UpdateProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Temp_UpdateProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveDJCompletedEventHandler(ByVal sender As Object, ByVal e As SaveDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadOrgCompletedEventHandler(ByVal sender As Object, ByVal e As ReadOrgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadOrgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getFlatFilePropertiesCompletedEventHandler(ByVal sender As Object, ByVal e As getFlatFilePropertiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getFlatFilePropertiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub setFlatFilePropertiesCompletedEventHandler(ByVal sender As Object, ByVal e As setFlatFilePropertiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setFlatFilePropertiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveFlatFileMessageCompletedEventHandler(ByVal sender As Object, ByVal e As SaveFlatFileMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveFlatFileMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub saveFlatFileSNCompletedEventHandler(ByVal sender As Object, ByVal e As saveFlatFileSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveFlatFileSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetFlatfileCompletedEventHandler(ByVal sender As Object, ByVal e As GetFlatfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFlatfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckFlatFileSNCompletedEventHandler(ByVal sender As Object, ByVal e As CheckFlatFileSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckFlatFileSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMacAddressCompletedEventHandler(ByVal sender As Object, ByVal e As GetMacAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMacAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetResultAndPCBAListCompletedEventHandler(ByVal sender As Object, ByVal e As GetResultAndPCBAListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetResultAndPCBAListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IDUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As IDUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IDUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPMatchingNCompletedEventHandler(ByVal sender As Object, ByVal e As WIPMatchingNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPMatchingNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DetachMotherBoardValidCompletedEventHandler(ByVal sender As Object, ByVal e As DetachMotherBoardValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DetachMotherBoardValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DetachCompletedEventHandler(ByVal sender As Object, ByVal e As DetachCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DetachCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SNListChangeBoxCompletedEventHandler(ByVal sender As Object, ByVal e As SNListChangeBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SNListChangeBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ChangeRevisionCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeRevisionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeRevisionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getCartonInfoCompletedEventHandler(ByVal sender As Object, ByVal e As getCartonInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCartonInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetShipInfoByBoxIDSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipInfoByBoxIDSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipInfoByBoxIDSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub StructureReadByPCBACompletedEventHandler(ByVal sender As Object, ByVal e As StructureReadByPCBACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StructureReadByPCBACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BackToEepromCompletedEventHandler(ByVal sender As Object, ByVal e As BackToEepromCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BackToEepromCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProductCPNbyModelCompletedEventHandler(ByVal sender As Object, ByVal e As GetProductCPNbyModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductCPNbyModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetModelByExtSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetModelByExtSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetModelByExtSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getShipmentByBoxidCompletedEventHandler(ByVal sender As Object, ByVal e As getShipmentByBoxidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getShipmentByBoxidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SFCDBoardIsValidCompletedEventHandler(ByVal sender As Object, ByVal e As SFCDBoardIsValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SFCDBoardIsValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_CusTableListsCompletedEventHandler(ByVal sender As Object, ByVal e As Get_CusTableListsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_CusTableListsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetEmplogeeIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmplogeeIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmplogeeIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDeptCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CopyCardInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CopyCardInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyCardInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CopyCardInfoZSCompletedEventHandler(ByVal sender As Object, ByVal e As CopyCardInfoZSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyCardInfoZSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetHRTrainingInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetHRTrainingInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHRTrainingInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetLocksCompletedEventHandler(ByVal sender As Object, ByVal e As GetLocksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLocksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateLockByIDCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLockByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLockByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UnlockdByIDCompletedEventHandler(ByVal sender As Object, ByVal e As UnlockdByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnlockdByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveAndUnlockdByIDCompletedEventHandler(ByVal sender As Object, ByVal e As SaveAndUnlockdByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveAndUnlockdByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveSmartCardHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As SaveSmartCardHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveSmartCardHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSmartCardHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetSmartCardHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSmartCardHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadFlowCompletedEventHandler(ByVal sender As Object, ByVal e As ReadFlowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadFlowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetEquipmentDetailInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetEquipmentDetailInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEquipmentDetailInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdatePMdataCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePMdataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePMdataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ModelDefinedCompletedEventHandler(ByVal sender As Object, ByVal e As ModelDefinedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModelDefinedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ModelStructureCompletedEventHandler(ByVal sender As Object, ByVal e As ModelStructureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModelStructureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ProdQtyCompletedEventHandler(ByVal sender As Object, ByVal e As ProdQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProdQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDJMatchedQtyCompletedEventHandler(ByVal sender As Object, ByVal e As GetDJMatchedQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDJMatchedQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub InsertPoQtyCompletedEventHandler(ByVal sender As Object, ByVal e As InsertPoQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertPoQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CountPoQtyCompletedEventHandler(ByVal sender As Object, ByVal e As CountPoQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CountPoQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CountPoQtyIICompletedEventHandler(ByVal sender As Object, ByVal e As CountPoQtyIICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CountPoQtyIICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IntSNIsValidCompletedEventHandler(ByVal sender As Object, ByVal e As IntSNIsValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IntSNIsValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadPOQtyByPOAndPCBACompletedEventHandler(ByVal sender As Object, ByVal e As ReadPOQtyByPOAndPCBACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadPOQtyByPOAndPCBACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PCBARoutingCompletedEventHandler(ByVal sender As Object, ByVal e As PCBARoutingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PCBARoutingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PCBListOfReworkCompletedEventHandler(ByVal sender As Object, ByVal e As PCBListOfReworkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PCBListOfReworkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPMatching1CompletedEventHandler(ByVal sender As Object, ByVal e As WIPMatching1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPMatching1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPVisualInspectionCompletedEventHandler(ByVal sender As Object, ByVal e As WIPVisualInspectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPVisualInspectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPBurnInCompletedEventHandler(ByVal sender As Object, ByVal e As WIPBurnInCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPBurnInCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPIDSwopCompletedEventHandler(ByVal sender As Object, ByVal e As WIPIDSwopCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPIDSwopCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPIDSwopSimplifyCompletedEventHandler(ByVal sender As Object, ByVal e As WIPIDSwopSimplifyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPIDSwopSimplifyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPModelSwopCompletedEventHandler(ByVal sender As Object, ByVal e As WIPModelSwopCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPModelSwopCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getPCBAinWIPHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As getPCBAinWIPHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPCBAinWIPHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MI_getPCBAinWIPHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As MI_getPCBAinWIPHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MI_getPCBAinWIPHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DBoardIsValidCompletedEventHandler(ByVal sender As Object, ByVal e As DBoardIsValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DBoardIsValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ModelConfiguratorSNValidCompletedEventHandler(ByVal sender As Object, ByVal e As ModelConfiguratorSNValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModelConfiguratorSNValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IntSNPatternCompletedEventHandler(ByVal sender As Object, ByVal e As IntSNPatternCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IntSNPatternCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetOrderInfoFromOracleCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderInfoFromOracleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderInfoFromOracleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ComponentReplacementCompletedEventHandler(ByVal sender As Object, ByVal e As ComponentReplacementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ComponentReplacementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckCompIssueToDJCompletedEventHandler(ByVal sender As Object, ByVal e As CheckCompIssueToDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckCompIssueToDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MatchingAccountCompletedEventHandler(ByVal sender As Object, ByVal e As MatchingAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MatchingAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetResultCompletedEventHandler(ByVal sender As Object, ByVal e As GetResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DJinBoxCompletedEventHandler(ByVal sender As Object, ByVal e As DJinBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DJinBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckPrevResultCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPrevResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPrevResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LargeThanMaxTestCompletedEventHandler(ByVal sender As Object, ByVal e As LargeThanMaxTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LargeThanMaxTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPInCompletedEventHandler(ByVal sender As Object, ByVal e As WIPInCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPInCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPOutCompletedEventHandler(ByVal sender As Object, ByVal e As WIPOutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPOutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub checkSamplingTestCompletedEventHandler(ByVal sender As Object, ByVal e As checkSamplingTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkSamplingTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadDBoardsCompletedEventHandler(ByVal sender As Object, ByVal e As ReadDBoardsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadDBoardsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPOutMatchingNCompletedEventHandler(ByVal sender As Object, ByVal e As WIPOutMatchingNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPOutMatchingNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDataByIntSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataByIntSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataByIntSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RDCBoardSNValidCompletedEventHandler(ByVal sender As Object, ByVal e As RDCBoardSNValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RDCBoardSNValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MatListOnPCBACompletedEventHandler(ByVal sender As Object, ByVal e As MatListOnPCBACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MatListOnPCBACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IDSwopCompletedEventHandler(ByVal sender As Object, ByVal e As IDSwopCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IDSwopCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IntSNRecycleCompletedEventHandler(ByVal sender As Object, ByVal e As IntSNRecycleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IntSNRecycleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IntSNRecycleIICompletedEventHandler(ByVal sender As Object, ByVal e As IntSNRecycleIICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IntSNRecycleIICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProductCPNCompletedEventHandler(ByVal sender As Object, ByVal e As GetProductCPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductCPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetResultListCompletedEventHandler(ByVal sender As Object, ByVal e As GetResultListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetResultListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetNextProcessCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetResultAndAttributesListCompletedEventHandler(ByVal sender As Object, ByVal e As GetResultAndAttributesListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetResultAndAttributesListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetBoxInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetBoxInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBoxInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetLabel1CompletedEventHandler(ByVal sender As Object, ByVal e As GetLabel1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLabel1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPackingListLabelCompletedEventHandler(ByVal sender As Object, ByVal e As GetPackingListLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPackingListLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetBoxQtyInPalletCompletedEventHandler(ByVal sender As Object, ByVal e As GetBoxQtyInPalletCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBoxQtyInPalletCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATEWIPInCompletedEventHandler(ByVal sender As Object, ByVal e As ATEWIPInCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATEWIPInCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATEWIPoutCompletedEventHandler(ByVal sender As Object, ByVal e As ATEWIPoutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATEWIPoutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ATEWIPOutDirectCompletedEventHandler(ByVal sender As Object, ByVal e As ATEWIPOutDirectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ATEWIPOutDirectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IsWipInCompletedEventHandler(ByVal sender As Object, ByVal e As IsWipInCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsWipInCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BurnInWipOutCompletedEventHandler(ByVal sender As Object, ByVal e As BurnInWipOutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BurnInWipOutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPPackingCompletedEventHandler(ByVal sender As Object, ByVal e As WIPPackingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPPackingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintSNLabelCompletedEventHandler(ByVal sender As Object, ByVal e As PrintSNLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintSNLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintPakingCompletedEventHandler(ByVal sender As Object, ByVal e As PrintPakingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintPakingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetBurnInTimeCompletedEventHandler(ByVal sender As Object, ByVal e As GetBurnInTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBurnInTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetShipInfoBySNCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipInfoBySNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipInfoBySNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ShipInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ShipInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ChangeBoxCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetShipInfoByBoxIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipInfoByBoxIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipInfoByBoxIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ShipInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ShipInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetShipInfoByPalletIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipInfoByPalletIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipInfoByPalletIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ShipInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ShipInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ChangePalletCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePalletCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePalletCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OQAWipInCompletedEventHandler(ByVal sender As Object, ByVal e As OQAWipInCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OQAWipInCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ExistsFunctionalTestCompletedEventHandler(ByVal sender As Object, ByVal e As ExistsFunctionalTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExistsFunctionalTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub TLAFlowCompletedEventHandler(ByVal sender As Object, ByVal e As TLAFlowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TLAFlowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OQACosmeticCompletedEventHandler(ByVal sender As Object, ByVal e As OQACosmeticCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OQACosmeticCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getLabelsCompletedEventHandler(ByVal sender As Object, ByVal e As getLabelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLabelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReworkCompletedEventHandler(ByVal sender As Object, ByVal e As ReworkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReworkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Rework_NewCompletedEventHandler(ByVal sender As Object, ByVal e As Rework_NewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Rework_NewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub TraceLevelCompletedEventHandler(ByVal sender As Object, ByVal e As TraceLevelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TraceLevelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPanelSizeCompletedEventHandler(ByVal sender As Object, ByVal e As GetPanelSizeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPanelSizeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IntSNIsValidByPanelCompletedEventHandler(ByVal sender As Object, ByVal e As IntSNIsValidByPanelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IntSNIsValidByPanelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPMatchingByPanelCompletedEventHandler(ByVal sender As Object, ByVal e As WIPMatchingByPanelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPMatchingByPanelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckPanelIDCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPanelIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPanelIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WIPReworkCompletedEventHandler(ByVal sender As Object, ByVal e As WIPReworkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WIPReworkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadMIDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReadMIDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadMIDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getMIFileDataCompletedEventHandler(ByVal sender As Object, ByVal e As getMIFileDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMIFileDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveMIRecordCompletedEventHandler(ByVal sender As Object, ByVal e As SaveMIRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveMIRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetConfigCompletedEventHandler(ByVal sender As Object, ByVal e As GetConfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetModelByIntSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetModelByIntSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetModelByIntSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPCBAByIntSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetPCBAByIntSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPCBAByIntSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetLastTestResultCompletedEventHandler(ByVal sender As Object, ByVal e As GetLastTestResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLastTestResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getNowCompletedEventHandler(ByVal sender As Object, ByVal e As getNowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getNowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getPONumberCompletedEventHandler(ByVal sender As Object, ByVal e As getPONumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPONumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub checkPermissionCompletedEventHandler(ByVal sender As Object, ByVal e As checkPermissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkPermissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub checkTMFormatCompletedEventHandler(ByVal sender As Object, ByVal e As checkTMFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkTMFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub checkQSFormatCompletedEventHandler(ByVal sender As Object, ByVal e As checkQSFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkQSFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getExceptionReportCompletedEventHandler(ByVal sender As Object, ByVal e As getExceptionReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getExceptionReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveBuildPlanDataCompletedEventHandler(ByVal sender As Object, ByVal e As SaveBuildPlanDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveBuildPlanDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SkipLotCompletedEventHandler(ByVal sender As Object, ByVal e As SkipLotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SkipLotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub checkIPPFormatCompletedEventHandler(ByVal sender As Object, ByVal e As checkIPPFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkIPPFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Upload_EJITIPPCompletedEventHandler(ByVal sender As Object, ByVal e As Upload_EJITIPPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Upload_EJITIPPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getProdFloorCompletedEventHandler(ByVal sender As Object, ByVal e As getProdFloorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProdFloorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getEjitIPPListCompletedEventHandler(ByVal sender As Object, ByVal e As getEjitIPPListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEjitIPPListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getIPPDetailCompletedEventHandler(ByVal sender As Object, ByVal e As getIPPDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIPPDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_TCLIDDataCompletedEventHandler(ByVal sender As Object, ByVal e As Report_TCLIDDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_TCLIDDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_TItemDataCompletedEventHandler(ByVal sender As Object, ByVal e As Report_TItemDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_TItemDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_TAgingCompletedEventHandler(ByVal sender As Object, ByVal e As Report_TAgingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_TAgingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_TDJDataCompletedEventHandler(ByVal sender As Object, ByVal e As Report_TDJDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_TDJDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_TCLIDIssueDataCompletedEventHandler(ByVal sender As Object, ByVal e As Report_TCLIDIssueDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_TCLIDIssueDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_TCLIDInfoCompletedEventHandler(ByVal sender As Object, ByVal e As Report_TCLIDInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_TCLIDInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_AMLIProVSeTraceCompletedEventHandler(ByVal sender As Object, ByVal e As Report_AMLIProVSeTraceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_AMLIProVSeTraceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_AMLIProVSeTrace2CompletedEventHandler(ByVal sender As Object, ByVal e As Report_AMLIProVSeTrace2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_AMLIProVSeTrace2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_TCLIDMSLDataCompletedEventHandler(ByVal sender As Object, ByVal e As Report_TCLIDMSLDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_TCLIDMSLDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_MPNOnHandCompletedEventHandler(ByVal sender As Object, ByVal e As Report_MPNOnHandCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_MPNOnHandCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_OnHandMFGMPNCompletedEventHandler(ByVal sender As Object, ByVal e As Report_OnHandMFGMPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_OnHandMFGMPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_TIssueCompareCompletedEventHandler(ByVal sender As Object, ByVal e As Report_TIssueCompareCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_TIssueCompareCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_TMaterialTransferCompletedEventHandler(ByVal sender As Object, ByVal e As Report_TMaterialTransferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_TMaterialTransferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_GeteTraceOHCompletedEventHandler(ByVal sender As Object, ByVal e As Report_GeteTraceOHCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_GeteTraceOHCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_StandardTimeCompletedEventHandler(ByVal sender As Object, ByVal e As Report_StandardTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_StandardTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_GetOHQTYWithMPNListCompletedEventHandler(ByVal sender As Object, ByVal e As Report_GetOHQTYWithMPNListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_GetOHQTYWithMPNListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_GeteTraceItemOHMPQCompletedEventHandler(ByVal sender As Object, ByVal e As Report_GeteTraceItemOHMPQCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_GeteTraceItemOHMPQCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Report_GetConnectStringCompletedEventHandler(ByVal sender As Object, ByVal e As Report_GetConnectStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Report_GetConnectStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMaterialInfoByCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaterialInfoByCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaterialInfoByCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMaterialToXMLByCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaterialToXMLByCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaterialToXMLByCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMaterialToXMLByCLID2CompletedEventHandler(ByVal sender As Object, ByVal e As GetMaterialToXMLByCLID2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaterialToXMLByCLID2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDJToXMLCompletedEventHandler(ByVal sender As Object, ByVal e As GetDJToXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDJToXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMaterialByCLIDToDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaterialByCLIDToDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaterialByCLIDToDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetReturnCLIDByDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetReturnCLIDByDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReturnCLIDByDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidReqlineStatusCompletedEventHandler(ByVal sender As Object, ByVal e As ValidReqlineStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidReqlineStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getMatlByDJModelCompletedEventHandler(ByVal sender As Object, ByVal e As getMatlByDJModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMatlByDJModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMatlByCLIDDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetMatlByCLIDDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMatlByCLIDDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getMatlCLIDbyDJCompletedEventHandler(ByVal sender As Object, ByVal e As getMatlCLIDbyDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMatlCLIDbyDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintLabelsCompletedEventHandler(ByVal sender As Object, ByVal e As PrintLabelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintLabelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveEMCResultCompletedEventHandler(ByVal sender As Object, ByVal e As SaveEMCResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveEMCResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintMacAddressCompletedEventHandler(ByVal sender As Object, ByVal e As PrintMacAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintMacAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReprintMacAddressCompletedEventHandler(ByVal sender As Object, ByVal e As ReprintMacAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReprintMacAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPreMacAddressCompletedEventHandler(ByVal sender As Object, ByVal e As GetPreMacAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPreMacAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetLengthMacAddressCompletedEventHandler(ByVal sender As Object, ByVal e As GetLengthMacAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLengthMacAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetTravellerCompletedEventHandler(ByVal sender As Object, ByVal e As GetTravellerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTravellerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAllTravellerDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllTravellerDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllTravellerDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateTravellerInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTravellerInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTravellerInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAllModelsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllModelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllModelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DeleteModelCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPrinterServerCompletedEventHandler(ByVal sender As Object, ByVal e As GetPrinterServerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPrinterServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDaughterBdByDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetDaughterBdByDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDaughterBdByDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSMTQCByDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMTQCByDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMTQCByDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSMTQCModelsCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMTQCModelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMTQCModelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveSMTQCDataCompletedEventHandler(ByVal sender As Object, ByVal e As SaveSMTQCDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveSMTQCDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAllSMTQCDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllSMTQCDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllSMTQCDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DeleteSMTQCDataCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSMTQCDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSMTQCDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LookUpProductInfoCompletedEventHandler(ByVal sender As Object, ByVal e As LookUpProductInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LookUpProductInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RevinBoxCompletedEventHandler(ByVal sender As Object, ByVal e As RevinBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RevinBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CloneProductInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CloneProductInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloneProductInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadProductInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadProductInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadProductInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LookUpMSLInfoCompletedEventHandler(ByVal sender As Object, ByVal e As LookUpMSLInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LookUpMSLInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadProductCPNCompletedEventHandler(ByVal sender As Object, ByVal e As UploadProductCPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadProductCPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LookUpLabelParaCompletedEventHandler(ByVal sender As Object, ByVal e As LookUpLabelParaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LookUpLabelParaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LookUpTransParaCompletedEventHandler(ByVal sender As Object, ByVal e As LookUpTransParaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LookUpTransParaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LookUpSFCInfoByModelCompletedEventHandler(ByVal sender As Object, ByVal e As LookUpSFCInfoByModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LookUpSFCInfoByModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadProductStructureCompletedEventHandler(ByVal sender As Object, ByVal e As UploadProductStructureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadProductStructureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadProductRoutingCompletedEventHandler(ByVal sender As Object, ByVal e As UploadProductRoutingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadProductRoutingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadProductPropertiesCompletedEventHandler(ByVal sender As Object, ByVal e As UploadProductPropertiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadProductPropertiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadLabelInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadLabelInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadLabelInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadProcessInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadProcessInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadProcessInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadTransInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTransInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTransInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IsAuthenticateUserCompletedEventHandler(ByVal sender As Object, ByVal e As IsAuthenticateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsAuthenticateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LookUpRoutingInfoByCompletedEventHandler(ByVal sender As Object, ByVal e As LookUpRoutingInfoByCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LookUpRoutingInfoByCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateRoutingInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRoutingInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRoutingInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProductLineInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProductLineInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductLineInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IsReworkUnitCompletedEventHandler(ByVal sender As Object, ByVal e As IsReworkUnitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsReworkUnitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IsLastProcessCompletedEventHandler(ByVal sender As Object, ByVal e As IsLastProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsLastProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub IsBottomPCBACompletedEventHandler(ByVal sender As Object, ByVal e As IsBottomPCBACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsBottomPCBACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProdLineByCompletedEventHandler(ByVal sender As Object, ByVal e As GetProdLineByCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProdLineByCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateProductLineCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProductLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProductLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetEquipmentInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetEquipmentInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEquipmentInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateEquipmentInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateEquipmentInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateEquipmentInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MOSpecialPickCompletedEventHandler(ByVal sender As Object, ByVal e As MOSpecialPickCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MOSpecialPickCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property myMOData() As MOData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),MOData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MOSpecialPostCompletedEventHandler(ByVal sender As Object, ByVal e As MOSpecialPostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MOSpecialPostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadPOrderListCompletedEventHandler(ByVal sender As Object, ByVal e As ReadPOrderListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadPOrderListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadPOrderItemsCompletedEventHandler(ByVal sender As Object, ByVal e As ReadPOrderItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadPOrderItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdatePOrderHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePOrderHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePOrderHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PickOrderPostCompletedEventHandler(ByVal sender As Object, ByVal e As PickOrderPostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PickOrderPostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMOFromDNCompletedEventHandler(ByVal sender As Object, ByVal e As GetMOFromDNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMOFromDNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDNMOLinesCompletedEventHandler(ByVal sender As Object, ByVal e As GetDNMOLinesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDNMOLinesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ShipmentPostCompletedEventHandler(ByVal sender As Object, ByVal e As ShipmentPostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShipmentPostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDNPickedListsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDNPickedListsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDNPickedListsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDNPickedCLIDsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDNPickedCLIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDNPickedCLIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SOReversalPostCompletedEventHandler(ByVal sender As Object, ByVal e As SOReversalPostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SOReversalPostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintProcessLabelCompletedEventHandler(ByVal sender As Object, ByVal e As PrintProcessLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintProcessLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadProcessLabelCompletedEventHandler(ByVal sender As Object, ByVal e As ReadProcessLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadProcessLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PCBSlotLightOnCompletedEventHandler(ByVal sender As Object, ByVal e As PCBSlotLightOnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PCBSlotLightOnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property myMOData() As MOData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),MOData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMatListCompletedEventHandler(ByVal sender As Object, ByVal e As GetMatListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMatListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SLEDSaveChangesCompletedEventHandler(ByVal sender As Object, ByVal e As SLEDSaveChangesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SLEDSaveChangesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As PostSLEDResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),PostSLEDResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SLED_ReviewUpdCompletedEventHandler(ByVal sender As Object, ByVal e As SLED_ReviewUpdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SLED_ReviewUpdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SLED_FailUpdCompletedEventHandler(ByVal sender As Object, ByVal e As SLED_FailUpdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SLED_FailUpdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub eTrace_UpdCompletedEventHandler(ByVal sender As Object, ByVal e As eTrace_UpdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class eTrace_UpdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As PostSLEDResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),PostSLEDResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SLEDSaveTraceCompletedEventHandler(ByVal sender As Object, ByVal e As SLEDSaveTraceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SLEDSaveTraceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As PostSLEDResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),PostSLEDResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub eTraceUpd_ReviewCompletedEventHandler(ByVal sender As Object, ByVal e As eTraceUpd_ReviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class eTraceUpd_ReviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub eTraceUpd_FailCompletedEventHandler(ByVal sender As Object, ByVal e As eTraceUpd_FailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class eTraceUpd_FailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub eTraceUpd_PassCompletedEventHandler(ByVal sender As Object, ByVal e As eTraceUpd_PassCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class eTraceUpd_PassCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetModelRevisionCompletedEventHandler(ByVal sender As Object, ByVal e As GetModelRevisionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetModelRevisionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetModelRevDJ_WithTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetModelRevDJ_WithTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetModelRevDJ_WithTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetModelRevDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetModelRevDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetModelRevDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSNListCompletedEventHandler(ByVal sender As Object, ByVal e As GetSNListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSNListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ChangeModelCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Change_ModelCompletedEventHandler(ByVal sender As Object, ByVal e As Change_ModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Change_ModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSMTCCNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMTCCNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMTCCNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SMTCycleCountHHCompletedEventHandler(ByVal sender As Object, ByVal e As SMTCycleCountHHCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SMTCycleCountHHCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SMTCycleCountCLIDValidCompletedEventHandler(ByVal sender As Object, ByVal e As SMTCycleCountCLIDValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SMTCycleCountCLIDValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SMTCCSaveCompletedEventHandler(ByVal sender As Object, ByVal e As SMTCCSaveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SMTCCSaveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SMTCLIDStatusChangedCompletedEventHandler(ByVal sender As Object, ByVal e As SMTCLIDStatusChangedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SMTCLIDStatusChangedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property EventID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CLID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Action() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ResultFlag() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SMTCLIDStatusChangedByPCCompletedEventHandler(ByVal sender As Object, ByVal e As SMTCLIDStatusChangedByPCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SMTCLIDStatusChangedByPCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property EventID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CLID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Action() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ResultFlag() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSMTCCListCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMTCCListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMTCCListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSMTScanedCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMTScanedCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMTScanedCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCyDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetCyDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCyDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GetCycleCount
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GetCycleCount)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateCycleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCycleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCycleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCLIDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetCLIDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCLIDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub TBoxDataCompletedEventHandler(ByVal sender As Object, ByVal e As TBoxDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TBoxDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub TestupdataCompletedEventHandler(ByVal sender As Object, ByVal e As TestupdataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestupdataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateReasonCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMRPDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetMRPDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMRPDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SIT_MassPrintCLIDsCompletedEventHandler(ByVal sender As Object, ByVal e As SIT_MassPrintCLIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SIT_MassPrintCLIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SIT_DeleteCLIDsCompletedEventHandler(ByVal sender As Object, ByVal e As SIT_DeleteCLIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SIT_DeleteCLIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SIT_Print_OnHandCompletedEventHandler(ByVal sender As Object, ByVal e As SIT_Print_OnHandCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SIT_Print_OnHandCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadProductRoutingLogCompletedEventHandler(ByVal sender As Object, ByVal e As UploadProductRoutingLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadProductRoutingLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadProductChangeLogCompletedEventHandler(ByVal sender As Object, ByVal e As UploadProductChangeLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadProductChangeLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CopyDJInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CopyDJInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyDJInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CopyDJinfoUseServerNameCompletedEventHandler(ByVal sender As Object, ByVal e As CopyDJinfoUseServerNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyDJinfoUseServerNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub isValidDJCompletedEventHandler(ByVal sender As Object, ByVal e As isValidDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isValidDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub insertTDHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As insertTDHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class insertTDHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRuleFromDBCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRuleFromDBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRuleFromDBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub postProdMasterCompletedEventHandler(ByVal sender As Object, ByVal e As postProdMasterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class postProdMasterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DelProdMasterCompletedEventHandler(ByVal sender As Object, ByVal e As DelProdMasterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelProdMasterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetwipflowdataCompletedEventHandler(ByVal sender As Object, ByVal e As GetwipflowdataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetwipflowdataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetModelRevForTECompletedEventHandler(ByVal sender As Object, ByVal e As GetModelRevForTECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetModelRevForTECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProdLineAndResultForTECompletedEventHandler(ByVal sender As Object, ByVal e As GetProdLineAndResultForTECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProdLineAndResultForTECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckFixutureIDCompletedEventHandler(ByVal sender As Object, ByVal e As CheckFixutureIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckFixutureIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetWipHeaderByIntSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetWipHeaderByIntSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWipHeaderByIntSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPanelIDByIntSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetPanelIDByIntSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPanelIDByIntSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ClearFixtureIDCompletedEventHandler(ByVal sender As Object, ByVal e As ClearFixtureIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClearFixtureIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub FixtureMountCompletedEventHandler(ByVal sender As Object, ByVal e As FixtureMountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FixtureMountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub TE_IntSNListReadbyFixtureIDCompletedEventHandler(ByVal sender As Object, ByVal e As TE_IntSNListReadbyFixtureIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TE_IntSNListReadbyFixtureIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub TE_ReworkUnitFlagCompletedEventHandler(ByVal sender As Object, ByVal e As TE_ReworkUnitFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TE_ReworkUnitFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub TE_UnbindFixtureIDCompletedEventHandler(ByVal sender As Object, ByVal e As TE_UnbindFixtureIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TE_UnbindFixtureIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ChangeExpdateUserCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeExpdateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeExpdateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BatchChangeExpdateCompletedEventHandler(ByVal sender As Object, ByVal e As BatchChangeExpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BatchChangeExpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckCLIDExpFormatCompletedEventHandler(ByVal sender As Object, ByVal e As CheckCLIDExpFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckCLIDExpFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getKanbanIDinfoCompletedEventHandler(ByVal sender As Object, ByVal e As getKanbanIDinfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getKanbanIDinfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateKanbanCodeDSCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateKanbanCodeDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateKanbanCodeDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckPNFormatCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPNFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPNFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckBuildPanFormatCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBuildPanFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBuildPanFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CommitBuildPlanCompletedEventHandler(ByVal sender As Object, ByVal e As CommitBuildPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CommitBuildPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveKanbanDataCompletedEventHandler(ByVal sender As Object, ByVal e As SaveKanbanDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveKanbanDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub uploadQuotaSharingCompletedEventHandler(ByVal sender As Object, ByVal e As uploadQuotaSharingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class uploadQuotaSharingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub uploadTransmissionCompletedEventHandler(ByVal sender As Object, ByVal e As uploadTransmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class uploadTransmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getQuotaSharingCompletedEventHandler(ByVal sender As Object, ByVal e As getQuotaSharingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getQuotaSharingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getTransmissionCompletedEventHandler(ByVal sender As Object, ByVal e As getTransmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTransmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetNextBPIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextBPIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextBPIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getBuildPlanListCompletedEventHandler(ByVal sender As Object, ByVal e As getBuildPlanListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBuildPlanListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getBuildPlandetailCompletedEventHandler(ByVal sender As Object, ByVal e As getBuildPlandetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBuildPlandetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub getLocatorsPBCompletedEventHandler(ByVal sender As Object, ByVal e As getLocatorsPBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLocatorsPBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetRTNo_MiscRcptCompletedEventHandler(ByVal sender As Object, ByVal e As GetRTNo_MiscRcptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRTNo_MiscRcptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetNextInvIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextInvIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextInvIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckFormatCompletedEventHandler(ByVal sender As Object, ByVal e As CheckFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckBatchFormatCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBatchFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBatchFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckPIFormatCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPIFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPIFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidMRDataCompletedEventHandler(ByVal sender As Object, ByVal e As ValidMRDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidMRDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidPIDataCompletedEventHandler(ByVal sender As Object, ByVal e As ValidPIDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidPIDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidINVNoCompletedEventHandler(ByVal sender As Object, ByVal e As ValidINVNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidINVNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidBatchNoCompletedEventHandler(ByVal sender As Object, ByVal e As ValidBatchNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidBatchNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostMRCompletedEventHandler(ByVal sender As Object, ByVal e As PostMRCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostMRCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintCLIDforMRCompletedEventHandler(ByVal sender As Object, ByVal e As PrintCLIDforMRCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintCLIDforMRCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CS_GetCLIDInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CS_GetCLIDInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CS_GetCLIDInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CS_UpdateCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As CS_UpdateCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CS_UpdateCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetBerthCompletedEventHandler(ByVal sender As Object, ByVal e As GetBerthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBerthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDashboardDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetDashboardDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDashboardDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadEMCfileCompletedEventHandler(ByVal sender As Object, ByVal e As UploadEMCfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadEMCfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidBatchDataCompletedEventHandler(ByVal sender As Object, ByVal e As ValidBatchDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidBatchDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostBatchListCompletedEventHandler(ByVal sender As Object, ByVal e As PostBatchListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostBatchListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As PostBatchRslt
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),PostBatchRslt)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BJ_GetDJInfoCompletedEventHandler(ByVal sender As Object, ByVal e As BJ_GetDJInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BJ_GetDJInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BJ_Rs
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BJ_Rs)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BJ_CreationCompletedEventHandler(ByVal sender As Object, ByVal e As BJ_CreationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BJ_CreationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BJ_Rs
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BJ_Rs)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BJ_SaveChangeCompletedEventHandler(ByVal sender As Object, ByVal e As BJ_SaveChangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BJ_SaveChangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckBJInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBJInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBJInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BJ_Rs
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BJ_Rs)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BJ_GetBJCompletedEventHandler(ByVal sender As Object, ByVal e As BJ_GetBJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BJ_GetBJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BJ_Rs
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BJ_Rs)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub BJ_GenMOCompletedEventHandler(ByVal sender As Object, ByVal e As BJ_GenMOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BJ_GenMOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LEDDashBoardByRackCompletedEventHandler(ByVal sender As Object, ByVal e As LEDDashBoardByRackCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LEDDashBoardByRackCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LEDDashBoardPCBCompletedEventHandler(ByVal sender As Object, ByVal e As LEDDashBoardPCBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LEDDashBoardPCBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_SrcSubInvCompletedEventHandler(ByVal sender As Object, ByVal e As Get_SrcSubInvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_SrcSubInvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_AvlQtyCompletedEventHandler(ByVal sender As Object, ByVal e As Get_AvlQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_AvlQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMSBSourceCompletedEventHandler(ByVal sender As Object, ByVal e As GetMSBSourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMSBSourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Save_TemplateCompletedEventHandler(ByVal sender As Object, ByVal e As Save_TemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Save_TemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveProdPickingCompletedEventHandler(ByVal sender As Object, ByVal e As SaveProdPickingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveProdPickingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetTemplateItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetTemplateItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTemplateItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDJInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetDJInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDJInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Update_CLIDCompletedEventHandler(ByVal sender As Object, ByVal e As Update_CLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Update_CLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Post_DJ_ReversalCompletedEventHandler(ByVal sender As Object, ByVal e As Post_DJ_ReversalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Post_DJ_ReversalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As dj_response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),dj_response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetTOItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetTOItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTOItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Search_TemplateCompletedEventHandler(ByVal sender As Object, ByVal e As Search_TemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Search_TemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Check_TemplateCompletedEventHandler(ByVal sender As Object, ByVal e As Check_TemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Check_TemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Search_LockTOCompletedEventHandler(ByVal sender As Object, ByVal e As Search_LockTOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Search_LockTOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Search_OpenTOCompletedEventHandler(ByVal sender As Object, ByVal e As Search_OpenTOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Search_OpenTOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Unlock_PickOrderCompletedEventHandler(ByVal sender As Object, ByVal e As Unlock_PickOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Unlock_PickOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ClosePickOrderCompletedEventHandler(ByVal sender As Object, ByVal e As ClosePickOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClosePickOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_PickOrderCompletedEventHandler(ByVal sender As Object, ByVal e As Get_PickOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_PickOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As GetTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Check_PickListCompletedEventHandler(ByVal sender As Object, ByVal e As Check_PickListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Check_PickListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostProdPickingCompletedEventHandler(ByVal sender As Object, ByVal e As PostProdPickingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostProdPickingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProdPickingResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProdPickingResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DeleteTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetBOMFromERPCompletedEventHandler(ByVal sender As Object, ByVal e As GetBOMFromERPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBOMFromERPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetListFromExcelCompletedEventHandler(ByVal sender As Object, ByVal e As GetListFromExcelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListFromExcelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As PPDataRst
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),PPDataRst)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_DestSubLocCompletedEventHandler(ByVal sender As Object, ByVal e As Get_DestSubLocCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_DestSubLocCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProdPickingStructure
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProdPickingStructure)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_ChangeExcelFlagCompletedEventHandler(ByVal sender As Object, ByVal e As Get_ChangeExcelFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_ChangeExcelFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetOrderInfoFromERPCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderInfoFromERPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderInfoFromERPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDJInfoFromERPCompletedEventHandler(ByVal sender As Object, ByVal e As GetDJInfoFromERPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDJInfoFromERPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetOrderInfoFromETRACECompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderInfoFromETRACECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderInfoFromETRACECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetIDInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetIDInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIDInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Check_HW_FlagCompletedEventHandler(ByVal sender As Object, ByVal e As Check_HW_FlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Check_HW_FlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Flag_AutoGetBOMRevCompletedEventHandler(ByVal sender As Object, ByVal e As Flag_AutoGetBOMRevCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Flag_AutoGetBOMRevCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Post_DJ_CompletionCompletedEventHandler(ByVal sender As Object, ByVal e As Post_DJ_CompletionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Post_DJ_CompletionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As dj_response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),dj_response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub get_uploadinforCompletedEventHandler(ByVal sender As Object, ByVal e As get_uploadinforCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class get_uploadinforCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DJ_CompletionCompletedEventHandler(ByVal sender As Object, ByVal e As DJ_CompletionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DJ_CompletionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As dj_response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),dj_response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DJ_Completion_BoxIDCompletedEventHandler(ByVal sender As Object, ByVal e As DJ_Completion_BoxIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DJ_Completion_BoxIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As dj_response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),dj_response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DJCompletion_For_PMJobCompletedEventHandler(ByVal sender As Object, ByVal e As DJCompletion_For_PMJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DJCompletion_For_PMJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CountOfBoxIDCompletedEventHandler(ByVal sender As Object, ByVal e As CountOfBoxIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CountOfBoxIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSOLineCompletedEventHandler(ByVal sender As Object, ByVal e As GetSOLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSOLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As dj_response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),dj_response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Getrelease_linesCompletedEventHandler(ByVal sender As Object, ByVal e As Getrelease_linesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Getrelease_linesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub writeClidRefPoCompletedEventHandler(ByVal sender As Object, ByVal e As writeClidRefPoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class writeClidRefPoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AllowEditDJCompletedEventHandler(ByVal sender As Object, ByVal e As AllowEditDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllowEditDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AllowDiffDJCompletedEventHandler(ByVal sender As Object, ByVal e As AllowDiffDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllowDiffDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DJCmp_GetBoxInfoCompletedEventHandler(ByVal sender As Object, ByVal e As DJCmp_GetBoxInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DJCmp_GetBoxInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As dj_response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),dj_response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckDJforCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As CheckDJforCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckDJforCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CreateCLIDforPoCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCLIDforPoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCLIDforPoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CountOfPoCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As CountOfPoCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CountOfPoCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveCreateCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCreateCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCreateCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveCreatCLIDforPoCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCreatCLIDforPoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCreatCLIDforPoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RePrintCreateCLIDforPOCLIDsCompletedEventHandler(ByVal sender As Object, ByVal e As RePrintCreateCLIDforPOCLIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RePrintCreateCLIDforPOCLIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckCHDJCompletedEventHandler(ByVal sender As Object, ByVal e As CheckCHDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckCHDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadCLIDsCompletedEventHandler(ByVal sender As Object, ByVal e As ReadCLIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadCLIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadCLIDDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReadCLIDDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadCLIDDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMOFromDJCompletedEventHandler(ByVal sender As Object, ByVal e As GetMOFromDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMOFromDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDJMOLinesCompletedEventHandler(ByVal sender As Object, ByVal e As GetDJMOLinesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDJMOLinesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MOrderPostCompletedEventHandler(ByVal sender As Object, ByVal e As MOrderPostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MOrderPostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property myMOData() As MOData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),MOData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MOEarlyLotPostCompletedEventHandler(ByVal sender As Object, ByVal e As MOEarlyLotPostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MOEarlyLotPostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LabelConversionCompletedEventHandler(ByVal sender As Object, ByVal e As LabelConversionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LabelConversionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ConversionResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ConversionResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetItemMasterCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemMasterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemMasterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetItemDescriptionCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemDescriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemDescriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ItemData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ItemData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PartNoTransferCompletedEventHandler(ByVal sender As Object, ByVal e As PartNoTransferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PartNoTransferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub InterOrgTransferCompletedEventHandler(ByVal sender As Object, ByVal e As InterOrgTransferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterOrgTransferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetRTVLabelsCompletedEventHandler(ByVal sender As Object, ByVal e As GetRTVLabelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRTVLabelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MiscRTVCompletedEventHandler(ByVal sender As Object, ByVal e As MiscRTVCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MiscRTVCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CVMIRTVCompletedEventHandler(ByVal sender As Object, ByVal e As CVMIRTVCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CVMIRTVCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetItemRTLotCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemRTLotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemRTLotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetItemOnhandCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemOnhandCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemOnhandCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadLabelIDInfoCompletedEventHandler(ByVal sender As Object, ByVal e As ReadLabelIDInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadLabelIDInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LabelGenerationCompletedEventHandler(ByVal sender As Object, ByVal e As LabelGenerationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LabelGenerationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetTypeIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetTypeIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTypeIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadLabelIDsForDJCompletedEventHandler(ByVal sender As Object, ByVal e As ReadLabelIDsForDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadLabelIDsForDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_LabelInfoHasSameLotCompletedEventHandler(ByVal sender As Object, ByVal e As Get_LabelInfoHasSameLotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_LabelInfoHasSameLotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Update_LabelInfoHasSameLotCompletedEventHandler(ByVal sender As Object, ByVal e As Update_LabelInfoHasSameLotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Update_LabelInfoHasSameLotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPalletListCompletedEventHandler(ByVal sender As Object, ByVal e As GetPalletListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPalletListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetStatusListCompletedEventHandler(ByVal sender As Object, ByVal e As GetStatusListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStatusListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdatePalletListCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePalletListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePalletListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMaterialInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaterialInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaterialInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateMaterialCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMaterialCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMaterialCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckItemMPNCompletedEventHandler(ByVal sender As Object, ByVal e As CheckItemMPNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckItemMPNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DownloadSuppDataCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadSuppDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadSuppDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveSuppDataCompletedEventHandler(ByVal sender As Object, ByVal e As SaveSuppDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveSuppDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CreateGRResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CreateGRResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetPOLineMPQCompletedEventHandler(ByVal sender As Object, ByVal e As GetPOLineMPQCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPOLineMPQCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetItemMPQCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemMPQCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemMPQCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetRecDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetRecDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRecDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GRHeader() As GRHeaderStructure
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),GRHeaderStructure)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ProcessMatMovementCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessMatMovementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessMatMovementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CreateGRResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CreateGRResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveDCodeLotNoCompletedEventHandler(ByVal sender As Object, ByVal e As SaveDCodeLotNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveDCodeLotNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintRTSlipCompletedEventHandler(ByVal sender As Object, ByVal e As PrintRTSlipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintRTSlipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintRECLabelsCompletedEventHandler(ByVal sender As Object, ByVal e As PrintRECLabelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintRECLabelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadShipmentDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReadShipmentDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadShipmentDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadIRDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReadIRDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadIRDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateIRRTNoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateIRRTNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateIRRTNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CleanBoxIDCompletedEventHandler(ByVal sender As Object, ByVal e As CleanBoxIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CleanBoxIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetValidSourceCompletedEventHandler(ByVal sender As Object, ByVal e As GetValidSourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetValidSourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PutawayPostCompletedEventHandler(ByVal sender As Object, ByVal e As PutawayPostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PutawayPostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMRBSubInvCompletedEventHandler(ByVal sender As Object, ByVal e As GetMRBSubInvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMRBSubInvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadBlockDCLNCompletedEventHandler(ByVal sender As Object, ByVal e As ReadBlockDCLNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadBlockDCLNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SaveBlockDCLNCompletedEventHandler(ByVal sender As Object, ByVal e As SaveBlockDCLNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveBlockDCLNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SourceForCompToDJCompletedEventHandler(ByVal sender As Object, ByVal e As SourceForCompToDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SourceForCompToDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WS_CompToDJCompletedEventHandler(ByVal sender As Object, ByVal e As WS_CompToDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WS_CompToDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckUTurnSubinvCompletedEventHandler(ByVal sender As Object, ByVal e As CheckUTurnSubinvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckUTurnSubinvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadCLID_UTurnCompletedEventHandler(ByVal sender As Object, ByVal e As ReadCLID_UTurnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadCLID_UTurnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UTurnDeliveryCompletedEventHandler(ByVal sender As Object, ByVal e As UTurnDeliveryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UTurnDeliveryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckUTurnCLIDFormatCompletedEventHandler(ByVal sender As Object, ByVal e As CheckUTurnCLIDFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckUTurnCLIDFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostUTurnStatusChangeCompletedEventHandler(ByVal sender As Object, ByVal e As PostUTurnStatusChangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostUTurnStatusChangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckLocRTListCompletedEventHandler(ByVal sender As Object, ByVal e As CheckLocRTListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckLocRTListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckCLIDDisableFlagCompletedEventHandler(ByVal sender As Object, ByVal e As CheckCLIDDisableFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckCLIDDisableFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidateSubinvCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateSubinvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateSubinvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckBatchDisableCLIDFormatCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBatchDisableCLIDFormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBatchDisableCLIDFormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostBatchDisableCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As PostBatchDisableCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostBatchDisableCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UpdateSlotCheckOptionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSlotCheckOptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSlotCheckOptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PackingManagementCompletedEventHandler(ByVal sender As Object, ByVal e As PackingManagementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PackingManagementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SFGetDcodeLnforIntSNCompletedEventHandler(ByVal sender As Object, ByVal e As SFGetDcodeLnforIntSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SFGetDcodeLnforIntSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SFGetDcodeLnforSNCompletedEventHandler(ByVal sender As Object, ByVal e As SFGetDcodeLnforSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SFGetDcodeLnforSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Save_SubInvTransferCompletedEventHandler(ByVal sender As Object, ByVal e As Save_SubInvTransferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Save_SubInvTransferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Check_CLID_InfoCompletedEventHandler(ByVal sender As Object, ByVal e As Check_CLID_InfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Check_CLID_InfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CLID_Info
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CLID_Info)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub MatSourceReadCompletedEventHandler(ByVal sender As Object, ByVal e As MatSourceReadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MatSourceReadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ClearPalletIDCompletedEventHandler(ByVal sender As Object, ByVal e As ClearPalletIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClearPalletIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As CheckCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RepSourceReadCompletedEventHandler(ByVal sender As Object, ByVal e As RepSourceReadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RepSourceReadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub CheckDestCompletedEventHandler(ByVal sender As Object, ByVal e As CheckDestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckDestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Check_DestCompletedEventHandler(ByVal sender As Object, ByVal e As Check_DestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Check_DestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Check_Return_OptionCompletedEventHandler(ByVal sender As Object, ByVal e As Check_Return_OptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Check_Return_OptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub account_alias_batch_receiptCompletedEventHandler(ByVal sender As Object, ByVal e As account_alias_batch_receiptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class account_alias_batch_receiptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub account_alias_batch_issueCompletedEventHandler(ByVal sender As Object, ByVal e As account_alias_batch_issueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class account_alias_batch_issueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub account_receiptCompletedEventHandler(ByVal sender As Object, ByVal e As account_receiptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class account_receiptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub save_account_receiptCompletedEventHandler(ByVal sender As Object, ByVal e As save_account_receiptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class save_account_receiptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub account_alias_receiptCompletedEventHandler(ByVal sender As Object, ByVal e As account_alias_receiptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class account_alias_receiptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub account_issueCompletedEventHandler(ByVal sender As Object, ByVal e As account_issueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class account_issueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub post_pull_returnCompletedEventHandler(ByVal sender As Object, ByVal e As post_pull_returnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class post_pull_returnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Result
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Result)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub account_issue_rcptCompletedEventHandler(ByVal sender As Object, ByVal e As account_issue_rcptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class account_issue_rcptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub account_alias_issueCompletedEventHandler(ByVal sender As Object, ByVal e As account_alias_issueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class account_alias_issueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub save_account_issueCompletedEventHandler(ByVal sender As Object, ByVal e As save_account_issueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class save_account_issueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub post_misc_rcptCompletedEventHandler(ByVal sender As Object, ByVal e As post_misc_rcptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class post_misc_rcptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ConversionResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ConversionResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LabelForMiscReceiptCompletedEventHandler(ByVal sender As Object, ByVal e As LabelForMiscReceiptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LabelForMiscReceiptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ConversionResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ConversionResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ExportHWDataInfoCompletedEventHandler(ByVal sender As Object, ByVal e As ExportHWDataInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExportHWDataInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As HW_ExportDataInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),HW_ExportDataInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub eTrace_UpdateCompletedEventHandler(ByVal sender As Object, ByVal e As eTrace_UpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class eTrace_UpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Misc_issue_rcptCompletedEventHandler(ByVal sender As Object, ByVal e As Misc_issue_rcptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Misc_issue_rcptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub post_push_returnCompletedEventHandler(ByVal sender As Object, ByVal e As post_push_returnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class post_push_returnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Result
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Result)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub component_returnCompletedEventHandler(ByVal sender As Object, ByVal e As component_returnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class component_returnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ChangeCLIDCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeCLIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeCLIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetRTNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetRTNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRTNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadUserDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReadUserDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadUserDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadRoleDataCompletedEventHandler(ByVal sender As Object, ByVal e As ReadRoleDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadRoleDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostUserDataCompletedEventHandler(ByVal sender As Object, ByVal e As PostUserDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostUserDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PostRoleDataCompletedEventHandler(ByVal sender As Object, ByVal e As PostRoleDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostRoleDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub InvMigCurrStatusCompletedEventHandler(ByVal sender As Object, ByVal e As InvMigCurrStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InvMigCurrStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub InvMigUserCheckCompletedEventHandler(ByVal sender As Object, ByVal e As InvMigUserCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InvMigUserCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub InvMigrationStatusCompletedEventHandler(ByVal sender As Object, ByVal e As InvMigrationStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InvMigrationStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetDaughterBoardSNCompletedEventHandler(ByVal sender As Object, ByVal e As GetDaughterBoardSNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDaughterBoardSNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMailListCompletedEventHandler(ByVal sender As Object, ByVal e As GetMailListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMailListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AutoMail_SiplaceDataCheckCompletedEventHandler(ByVal sender As Object, ByVal e As AutoMail_SiplaceDataCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AutoMail_SiplaceDataCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AutoSendMail_PastDueDJCompletedEventHandler(ByVal sender As Object, ByVal e As AutoSendMail_PastDueDJCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AutoSendMail_PastDueDJCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DeleteMOAllocatedCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteMOAllocatedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteMOAllocatedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub RedoLedMOAllocatedCompletedEventHandler(ByVal sender As Object, ByVal e As RedoLedMOAllocatedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RedoLedMOAllocatedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidateUserCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadBJData_to_OracleCompletedEventHandler(ByVal sender As Object, ByVal e As UploadBJData_to_OracleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadBJData_to_OracleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadAutoEJIT_DJSum_to_OracleCompletedEventHandler(ByVal sender As Object, ByVal e As UploadAutoEJIT_DJSum_to_OracleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadAutoEJIT_DJSum_to_OracleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub UploadAutoEJIT_DJList_to_OracleCompletedEventHandler(ByVal sender As Object, ByVal e As UploadAutoEJIT_DJList_to_OracleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadAutoEJIT_DJList_to_OracleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AutoCreatedEJITCompletedEventHandler(ByVal sender As Object, ByVal e As AutoCreatedEJITCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AutoCreatedEJITCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub AutoCreatedEJIT_ByDayCompletedEventHandler(ByVal sender As Object, ByVal e As AutoCreatedEJIT_ByDayCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AutoCreatedEJIT_ByDayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ErrorLoggingCompletedEventHandler(ByVal sender As Object, ByVal e As ErrorLoggingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ErrorLoggingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ErrorLogCompletedEventHandler(ByVal sender As Object, ByVal e As ErrorLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ErrorLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ErrorLogOTOCompletedEventHandler(ByVal sender As Object, ByVal e As ErrorLogOTOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ErrorLogOTOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetServerDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetServerDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetServerDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetConfigValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetConfigValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConfigValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrinterCheckCompletedEventHandler(ByVal sender As Object, ByVal e As PrinterCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrinterCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LoginCheckCompletedEventHandler(ByVal sender As Object, ByVal e As LoginCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UserData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UserData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ChangePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidateItemRevisionCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateItemRevisionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateItemRevisionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ItemRevList
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ItemRevList)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidateItemTypeCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateItemTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateItemTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ItemType
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ItemType)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidateSubLocCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateSubLocCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateSubLocCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_LocatorSPCompletedEventHandler(ByVal sender As Object, ByVal e As Get_LocatorSPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_LocatorSPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SlotCheckCompletedEventHandler(ByVal sender As Object, ByVal e As SlotCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SlotCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property myCLIDSlot() As CLIDSlot
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),CLIDSlot)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SlotLightOnCompletedEventHandler(ByVal sender As Object, ByVal e As SlotLightOnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SlotLightOnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub DockSlotLightOnCompletedEventHandler(ByVal sender As Object, ByVal e As DockSlotLightOnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DockSlotLightOnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_ReasonCodeCompletedEventHandler(ByVal sender As Object, ByVal e As Get_ReasonCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_ReasonCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_SubinvLocCompletedEventHandler(ByVal sender As Object, ByVal e As Get_SubinvLocCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_SubinvLocCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub get_iteminfoCompletedEventHandler(ByVal sender As Object, ByVal e As get_iteminfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class get_iteminfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub get_itemonhandCompletedEventHandler(ByVal sender As Object, ByVal e As get_itemonhandCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class get_itemonhandCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_AccountAliasCompletedEventHandler(ByVal sender As Object, ByVal e As Get_AccountAliasCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_AccountAliasCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_TransactionTypesCompletedEventHandler(ByVal sender As Object, ByVal e As Get_TransactionTypesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_TransactionTypesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetScreenElementsCompletedEventHandler(ByVal sender As Object, ByVal e As GetScreenElementsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetScreenElementsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintMatlLabelCompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintMatlLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintMatlLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintNoMatlLabelCompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintNoMatlLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintNoMatlLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub WritePrintLabelCompletedEventHandler(ByVal sender As Object, ByVal e As WritePrintLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WritePrintLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabelCompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabel_ProductionCompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabel_ProductionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabel_ProductionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabel_LAGCompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabel_LAGCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabel_LAGCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabel_CVTCompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabel_CVTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabel_CVTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabelForAppsCompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabelForAppsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabelForAppsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabelForEtrace2CompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabelForEtrace2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabelForEtrace2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabelForPrtSvrCompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabelForPrtSvrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabelForPrtSvrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabelForTemp01CompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabelForTemp01CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabelForTemp01CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabelForTemp02CompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabelForTemp02CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabelForTemp02CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabelForTemp03CompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabelForTemp03CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabelForTemp03CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabelForTemp04CompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabelForTemp04CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabelForTemp04CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub OpenPrintLabelForTemp05CompletedEventHandler(ByVal sender As Object, ByVal e As OpenPrintLabelForTemp05CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenPrintLabelForTemp05CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub updatePrintLabelCompletedEventHandler(ByVal sender As Object, ByVal e As updatePrintLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updatePrintLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintCLIDsCompletedEventHandler(ByVal sender As Object, ByVal e As PrintCLIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintCLIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetProcessPropertiesCompletedEventHandler(ByVal sender As Object, ByVal e As GetProcessPropertiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProcessPropertiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAccessCardUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccessCardUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccessCardUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As AccessCard
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),AccessCard)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetMGTraceLevelCompletedEventHandler(ByVal sender As Object, ByVal e As GetMGTraceLevelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMGTraceLevelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAMLCompletedEventHandler(ByVal sender As Object, ByVal e As GetAMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetAMLDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetAMLDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAMLDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetOrgListsCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrgListsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrgListsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetLoginDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoginDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoginDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetHHVersionCompletedEventHandler(ByVal sender As Object, ByVal e As GetHHVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHHVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ClearBoxIDCompletedEventHandler(ByVal sender As Object, ByVal e As ClearBoxIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClearBoxIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Get_Subinv_RestrictCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Subinv_RestrictCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Subinv_RestrictCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCOOListsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCOOListsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCOOListsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub Post_SubInvTransferCompletedEventHandler(ByVal sender As Object, ByVal e As Post_SubInvTransferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Post_SubInvTransferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetSysMessageCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ShowMessageCompletedEventHandler(ByVal sender As Object, ByVal e As ShowMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShowMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidatePalletCompletedEventHandler(ByVal sender As Object, ByVal e As ValidatePalletCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidatePalletCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ValidateBerthCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateBerthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateBerthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintInterOrgCLIDsCompletedEventHandler(ByVal sender As Object, ByVal e As PrintInterOrgCLIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintInterOrgCLIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintCH09LabelCompletedEventHandler(ByVal sender As Object, ByVal e As PrintCH09LabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintCH09LabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ConnectionTestCompletedEventHandler(ByVal sender As Object, ByVal e As ConnectionTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConnectionTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property myCnTest() As ConnTestData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),ConnTestData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadLabelIDsCompletedEventHandler(ByVal sender As Object, ByVal e As ReadLabelIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadLabelIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub SplitLabelIDsCompletedEventHandler(ByVal sender As Object, ByVal e As SplitLabelIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SplitLabelIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub LabelDataUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As LabelDataUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LabelDataUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub ReadPalletIDCompletedEventHandler(ByVal sender As Object, ByVal e As ReadPalletIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadPalletIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PalletManagementCompletedEventHandler(ByVal sender As Object, ByVal e As PalletManagementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PalletManagementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub GetCartonLabelCompletedEventHandler(ByVal sender As Object, ByVal e As GetCartonLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCartonLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")>  _
    Public Delegate Sub PrintCartonLabelCompletedEventHandler(ByVal sender As Object, ByVal e As PrintCartonLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintCartonLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
